package mkunion

import (
	"github.com/stretchr/testify/assert"
	"github.com/widmogrod/mkunion/x/shape"
	"testing"
)

func TestShapeGenerator(t *testing.T) {
	g := NewShapeGenerator(shape.UnionLike{
		Name:          "Tree",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Variant: []shape.Shape{
			&shape.StructLike{
				Name:          "Branch",
				PkgName:       "example",
				PkgImportName: "github.com/widmogrod/mkunion/example",
				Fields: []*shape.FieldLike{
					{
						Name: "L",
						Type: &shape.StructLike{
							Name:          "Tree",
							PkgName:       "example",
							PkgImportName: "github.com/widmogrod/mkunion/example",
						},
					},
					{
						Name: "R",
						Type: &shape.RefName{
							Name:          "Tree",
							PkgName:       "example",
							PkgImportName: "github.com/widmogrod/mkunion/example",
						},
					},
				},
			},
			&shape.StructLike{
				Name:          "Leaf",
				PkgName:       "example",
				PkgImportName: "github.com/widmogrod/mkunion/example",
				Fields: []*shape.FieldLike{
					{
						Name: "Value",
						Type: &shape.RefName{
							Name:          "Schema",
							PkgName:       "schema",
							PkgImportName: "github.com/widmogrod/mkunion/s/schema",
						},
					},
				},
			},
		},
	}, NewHelper(WithPackageName("example")))

	result, err := g.Generate()
	assert.NoError(t, err)
	assert.Equal(t, `// Code generated by mkunion. DO NOT EDIT.
package example

import "github.com/widmogrod/mkunion/x/shape"

func TreeShape() shape.Shape {
	return &shape.UnionLike{
		Name: "Tree",
		PkgName: "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Variant: []shape.Shape{
			BranchShape(),
			LeafShape(),
		},
	}
}

func BranchShape() shape.Shape {
	return &shape.StructLike{
		Name: "Branch",
		PkgName: "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Fields: []*shape.FieldLike{
			{
				Name: "L",
				Type: &shape.StructLike{
					Name: "Tree",
					PkgName: "example",
					PkgImportName: "github.com/widmogrod/mkunion/example",
				},
			},
			{
				Name: "R",
				Type: &shape.RefName{
					Name: "Tree",
					PkgName: "example",
					PkgImportName: "github.com/widmogrod/mkunion/example",
				},
			},
		},
	}
}

func LeafShape() shape.Shape {
	return &shape.StructLike{
		Name: "Leaf",
		PkgName: "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Fields: []*shape.FieldLike{
			{
				Name: "Value",
				Type: &shape.RefName{
					Name: "Schema",
					PkgName: "schema",
					PkgImportName: "github.com/widmogrod/mkunion/s/schema",
				},
			},
		},
	}
}
`, string(result))
}
