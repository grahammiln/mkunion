// Code generated by mkunion. DO NOT EDIT.
package example


var _ CalcVisitor = (*CalcBreatheFirstVisitor[any])(nil)

type CalcBreatheFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce CalcReducer[A]

	queue         []Calc
	visited       map[Calc]bool
	shouldExecute map[Calc]bool
}


func (d *CalcBreatheFirstVisitor[A]) VisitLit(v *Lit) any {
	d.queue = append(d.queue, v)
	
	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceLit(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *CalcBreatheFirstVisitor[A]) VisitSum(v *Sum) any {
	d.queue = append(d.queue, v)
	d.queue = append(d.queue, v.Left)
	d.queue = append(d.queue, v.Right)
	
	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceSum(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *CalcBreatheFirstVisitor[A]) VisitMul(v *Mul) any {
	d.queue = append(d.queue, v)
	d.queue = append(d.queue, v.Left)
	d.queue = append(d.queue, v.Right)
	
	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceMul(v, d.result)
	} else {
		d.execute()
	}
	return nil
}


func (d *CalcBreatheFirstVisitor[A]) execute() {
	for len(d.queue) > 0 {
		if d.stop {
			return
		}

		i := d.pop()
		if d.visited[i] {
			continue
		}
		d.visited[i] = true
		d.shouldExecute[i] = true
		i.Accept(d)
	}

	return
}

func (d *CalcBreatheFirstVisitor[A]) pop() Calc {
	i := d.queue[0]
	d.queue = d.queue[1:]
	return i
}

func ReduceCalcBreatheFirst[A any](r CalcReducer[A], v Calc, init A) A {
	reducer := &CalcBreatheFirstVisitor[A]{
		result:        init,
		reduce:        r,
		queue:         []Calc{v},
		visited:       make(map[Calc]bool),
		shouldExecute: make(map[Calc]bool),
	}

	_ = v.Accept(reducer)

	return reducer.result
}
