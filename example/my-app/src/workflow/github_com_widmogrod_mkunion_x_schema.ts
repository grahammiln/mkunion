//generated by mkunion
export type Schema = {
	"$type"?: "schema.None",
	"schema.None": None
} | {
	"$type"?: "schema.Bool",
	"schema.Bool": Bool
} | {
	"$type"?: "schema.Number",
	"schema.Number": Number
} | {
	"$type"?: "schema.String",
	"schema.String": String
} | {
	"$type"?: "schema.Binary",
	"schema.Binary": Binary
} | {
	"$type"?: "schema.List",
	"schema.List": List
} | {
	"$type"?: "schema.Map",
	"schema.Map": Map
}

export type None = {}

export type Bool = boolean

export type Number = number

export type String = string

export type Binary = string

export type List = Schema[]

export type Map = {[key: string]: Schema}

export type Location = {
	"$type"?: "schema.LocationField",
	"schema.LocationField": LocationField
} | {
	"$type"?: "schema.LocationIndex",
	"schema.LocationIndex": LocationIndex
} | {
	"$type"?: "schema.LocationAnything",
	"schema.LocationAnything": LocationAnything
}

export type LocationField = {
	Name?: string,
}

export type LocationIndex = {
	Index?: number,
}

export type LocationAnything = {}

export type LocationUnionJSON = {
	Type?: string,
	LocationField?: json.RawMessage,
	LocationIndex?: json.RawMessage,
	LocationAnything?: json.RawMessage,
}
export type Part = {
	Location?: string,
	Acc?: Acc[],
}
export type Acc = {
	Name?: string,
	Index?: number,
	Any?: boolean,
}
export type PathAst = {
	Parts?: Part[],
}
export type Field = {
	Name?: string,
	Value?: Schema,
}
export type SchemaUnionJSON = {
	Type?: string,
	None?: json.RawMessage,
	Bool?: json.RawMessage,
	Number?: json.RawMessage,
	String?: json.RawMessage,
	Binary?: json.RawMessage,
	List?: json.RawMessage,
	Map?: json.RawMessage,
}
export type Max = {
	Int?: number,
	Int8?: number,
	Int16?: number,
	Int32?: number,
	Int64?: number,
	Float32?: number,
	Float64?: number,
	Uint?: number,
	Uint8?: number,
	Uint16?: number,
	Uint32?: number,
	Uint64?: number,
}
export type locres = {}

//eslint-disable-next-line
import * as json from './encoding_json'
