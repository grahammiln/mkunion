// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"github.com/widmogrod/mkunion/f"
)

type WherePredicateVisitor interface {
	VisitEq(v *Eq) any
	VisitAnd(v *And) any
	VisitOr(v *Or) any
	VisitPath(v *Path) any
}

type WherePredicate interface {
	Accept(g WherePredicateVisitor) any
}

func (r *Eq) Accept(v WherePredicateVisitor) any   { return v.VisitEq(r) }
func (r *And) Accept(v WherePredicateVisitor) any  { return v.VisitAnd(r) }
func (r *Or) Accept(v WherePredicateVisitor) any   { return v.VisitOr(r) }
func (r *Path) Accept(v WherePredicateVisitor) any { return v.VisitPath(r) }

var (
	_ WherePredicate = (*Eq)(nil)
	_ WherePredicate = (*And)(nil)
	_ WherePredicate = (*Or)(nil)
	_ WherePredicate = (*Path)(nil)
)

func MustMatchWherePredicate[TOut any](
	x WherePredicate,
	f1 func(x *Eq) TOut,
	f2 func(x *And) TOut,
	f3 func(x *Or) TOut,
	f4 func(x *Path) TOut,
) TOut {
	return f.MustMatch4(x, f1, f2, f3, f4)
}

func MustMatchWherePredicateR2[TOut1, TOut2 any](
	x WherePredicate,
	f1 func(x *Eq) (TOut1, TOut2),
	f2 func(x *And) (TOut1, TOut2),
	f3 func(x *Or) (TOut1, TOut2),
	f4 func(x *Path) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.MustMatch4R2(x, f1, f2, f3, f4)
}
