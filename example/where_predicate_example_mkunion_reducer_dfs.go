// Code generated by mkunion. DO NOT EDIT.
package example

type (
	WherePredicateReducer[A any] interface {
		ReduceEq(x *Eq, agg A) (result A, stop bool)
		ReduceAnd(x *And, agg A) (result A, stop bool)
		ReduceOr(x *Or, agg A) (result A, stop bool)
		ReducePath(x *Path, agg A) (result A, stop bool)
	}
)

type WherePredicateDepthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce WherePredicateReducer[A]
}

var _ WherePredicateVisitor = (*WherePredicateDepthFirstVisitor[any])(nil)

func (d *WherePredicateDepthFirstVisitor[A]) VisitEq(v *Eq) any {
	d.result, d.stop = d.reduce.ReduceEq(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *WherePredicateDepthFirstVisitor[A]) VisitAnd(v *And) any {
	d.result, d.stop = d.reduce.ReduceAnd(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *WherePredicateDepthFirstVisitor[A]) VisitOr(v *Or) any {
	d.result, d.stop = d.reduce.ReduceOr(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *WherePredicateDepthFirstVisitor[A]) VisitPath(v *Path) any {
	d.result, d.stop = d.reduce.ReducePath(v, d.result)
	if d.stop {
		return nil
	}
	if _ = v.Condition.Accept(d); d.stop {
		return nil
	}
	for idx := range v.Then {
		if _ = v.Then[idx].Accept(d); d.stop {
			return nil
		}
	}
	for idx, _ := range v.Y {
		if _ = v.Y[idx].Accept(d); d.stop {
			return nil
		}
	}

	return nil
}

func ReduceWherePredicateDepthFirst[A any](r WherePredicateReducer[A], v WherePredicate, init A) A {
	reducer := &WherePredicateDepthFirstVisitor[A]{
		result: init,
		reduce: r,
	}

	_ = v.Accept(reducer)

	return reducer.result
}
