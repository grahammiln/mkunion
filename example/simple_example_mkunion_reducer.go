// Code generated by mkunion. DO NOT EDIT.
package example

type (
	VehicleReducer[A any] interface {
		ReducePlane(x *Plane, agg A) (result A, stop bool)
		ReduceCar(x *Car, agg A) (result A, stop bool)
		ReduceBoat(x *Boat, agg A) (result A, stop bool)
	}
)

type VehicleDepthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce VehicleReducer[A]
}

var _ VehicleVisitor = (*VehicleDepthFirstVisitor[any])(nil)

func (d *VehicleDepthFirstVisitor[A]) VisitPlane(v *Plane) any {
	d.result, d.stop = d.reduce.ReducePlane(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *VehicleDepthFirstVisitor[A]) VisitCar(v *Car) any {
	d.result, d.stop = d.reduce.ReduceCar(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *VehicleDepthFirstVisitor[A]) VisitBoat(v *Boat) any {
	d.result, d.stop = d.reduce.ReduceBoat(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func ReduceVehicle[A any](r VehicleReducer[A], v Vehicle, init A) A {
	reducer := &VehicleDepthFirstVisitor[A]{
		result: init,
		reduce: r,
	}

	_ = v.Accept(reducer)

	return reducer.result
}

var _ VehicleReducer[any] = (*VehicleDefaultReduction[any])(nil)

type (
	VehicleDefaultReduction[A any] struct {
		PanicOnFallback bool
		DefaultStopReduction bool
		OnPlane func(x *Plane, agg A) (result A, stop bool)
		OnCar func(x *Car, agg A) (result A, stop bool)
		OnBoat func(x *Boat, agg A) (result A, stop bool)
	}
)

func (t *VehicleDefaultReduction[A]) ReducePlane(x *Plane, agg A) (result A, stop bool) {
	if t.OnPlane != nil {
		return t.OnPlane(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch")
	}
	return agg, t.DefaultStopReduction
}

func (t *VehicleDefaultReduction[A]) ReduceCar(x *Car, agg A) (result A, stop bool) {
	if t.OnCar != nil {
		return t.OnCar(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch")
	}
	return agg, t.DefaultStopReduction
}

func (t *VehicleDefaultReduction[A]) ReduceBoat(x *Boat, agg A) (result A, stop bool) {
	if t.OnBoat != nil {
		return t.OnBoat(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch")
	}
	return agg, t.DefaultStopReduction
}
