// Code generated by mkunion. DO NOT EDIT.
package example

var _ VehicleVisitor = (*VehicleBreadthFirstVisitor[any])(nil)

type VehicleBreadthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce VehicleReducer[A]

	queue         []Vehicle
	visited       map[Vehicle]bool
	shouldExecute map[Vehicle]bool
}

func (d *VehicleBreadthFirstVisitor[A]) VisitPlane(v *Plane) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReducePlane(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *VehicleBreadthFirstVisitor[A]) VisitCar(v *Car) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceCar(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *VehicleBreadthFirstVisitor[A]) VisitBoat(v *Boat) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceBoat(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *VehicleBreadthFirstVisitor[A]) execute() {
	for len(d.queue) > 0 {
		if d.stop {
			return
		}

		i := d.pop()
		if d.visited[i] {
			continue
		}
		d.visited[i] = true
		d.shouldExecute[i] = true
		i.Accept(d)
	}

	return
}

func (d *VehicleBreadthFirstVisitor[A]) pop() Vehicle {
	i := d.queue[0]
	d.queue = d.queue[1:]
	return i
}

func ReduceVehicleBreadthFirst[A any](r VehicleReducer[A], v Vehicle, init A) A {
	reducer := &VehicleBreadthFirstVisitor[A]{
		result:        init,
		reduce:        r,
		queue:         []Vehicle{v},
		visited:       make(map[Vehicle]bool),
		shouldExecute: make(map[Vehicle]bool),
	}

	_ = v.Accept(reducer)

	return reducer.result
}
