// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type VehicleVisitor interface {
	VisitCar(v *Car) any
	VisitPlane(v *Plane) any
	VisitBoat(v *Boat) any
}

type Vehicle interface {
	AcceptVehicle(g VehicleVisitor) any
}

var (
	_ Vehicle = (*Car)(nil)
	_ Vehicle = (*Plane)(nil)
	_ Vehicle = (*Boat)(nil)
)

func (r *Car) AcceptVehicle(v VehicleVisitor) any   { return v.VisitCar(r) }
func (r *Plane) AcceptVehicle(v VehicleVisitor) any { return v.VisitPlane(r) }
func (r *Boat) AcceptVehicle(v VehicleVisitor) any  { return v.VisitBoat(r) }

func MatchVehicleR3[T0, T1, T2 any](
	x Vehicle,
	f1 func(x *Car) (T0, T1, T2),
	f2 func(x *Plane) (T0, T1, T2),
	f3 func(x *Boat) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Car:
		return f1(v)
	case *Plane:
		return f2(v)
	case *Boat:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchVehicleR2[T0, T1 any](
	x Vehicle,
	f1 func(x *Car) (T0, T1),
	f2 func(x *Plane) (T0, T1),
	f3 func(x *Boat) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Car:
		return f1(v)
	case *Plane:
		return f2(v)
	case *Boat:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchVehicleR1[T0 any](
	x Vehicle,
	f1 func(x *Car) T0,
	f2 func(x *Plane) T0,
	f3 func(x *Boat) T0,
) T0 {
	switch v := x.(type) {
	case *Car:
		return f1(v)
	case *Plane:
		return f2(v)
	case *Boat:
		return f3(v)
	}
	var result1 T0
	return result1
}

func MatchVehicleR0(
	x Vehicle,
	f1 func(x *Car),
	f2 func(x *Plane),
	f3 func(x *Boat),
) {
	switch v := x.(type) {
	case *Car:
		f1(v)
	case *Plane:
		f2(v)
	case *Boat:
		f3(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Boat", BoatFromJSON, BoatToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Car", CarFromJSON, CarToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Plane", PlaneFromJSON, PlaneToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Vehicle", VehicleFromJSON, VehicleToJSON)
}

type VehicleUnionJSON struct {
	Type  string          `json:"$type,omitempty"`
	Car   json.RawMessage `json:"example.Car,omitempty"`
	Plane json.RawMessage `json:"example.Plane,omitempty"`
	Boat  json.RawMessage `json:"example.Boat,omitempty"`
}

func VehicleFromJSON(x []byte) (Vehicle, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data VehicleUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("example.VehicleFromJSON: %w", err)
	}

	switch data.Type {
	case "example.Car":
		return CarFromJSON(data.Car)
	case "example.Plane":
		return PlaneFromJSON(data.Plane)
	case "example.Boat":
		return BoatFromJSON(data.Boat)
	}

	if data.Car != nil {
		return CarFromJSON(data.Car)
	} else if data.Plane != nil {
		return PlaneFromJSON(data.Plane)
	} else if data.Boat != nil {
		return BoatFromJSON(data.Boat)
	}
	return nil, fmt.Errorf("example.VehicleFromJSON: unknown type: %s", data.Type)
}

func VehicleToJSON(x Vehicle) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchVehicleR2(
		x,
		func(y *Car) ([]byte, error) {
			body, err := CarToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.VehicleToJSON: %w", err)
			}
			return json.Marshal(VehicleUnionJSON{
				Type: "example.Car",
				Car:  body,
			})
		},
		func(y *Plane) ([]byte, error) {
			body, err := PlaneToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.VehicleToJSON: %w", err)
			}
			return json.Marshal(VehicleUnionJSON{
				Type:  "example.Plane",
				Plane: body,
			})
		},
		func(y *Boat) ([]byte, error) {
			body, err := BoatToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.VehicleToJSON: %w", err)
			}
			return json.Marshal(VehicleUnionJSON{
				Type: "example.Boat",
				Boat: body,
			})
		},
	)
}

func CarFromJSON(x []byte) (*Car, error) {
	result := new(Car)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.CarFromJSON: %w", err)
	}
	return result, nil
}

func CarToJSON(x *Car) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Car)(nil)
	_ json.Marshaler   = (*Car)(nil)
)

func (r *Car) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONCar(*r)
}
func (r *Car) _marshalJSONCar(x Car) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldColor []byte
	fieldColor, err = r._marshalJSONstring(x.Color)
	if err != nil {
		return nil, fmt.Errorf("example: Car._marshalJSONCar: field name Color; %w", err)
	}
	partial["Color"] = fieldColor
	var fieldWheels []byte
	fieldWheels, err = r._marshalJSONint(x.Wheels)
	if err != nil {
		return nil, fmt.Errorf("example: Car._marshalJSONCar: field name Wheels; %w", err)
	}
	partial["Wheels"] = fieldWheels
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Car._marshalJSONCar: struct; %w", err)
	}
	return result, nil
}
func (r *Car) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: Car._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Car) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: Car._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *Car) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONCar(data)
	if err != nil {
		return fmt.Errorf("example: Car.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Car) _unmarshalJSONCar(data []byte) (Car, error) {
	result := Car{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Car._unmarshalJSONCar: native struct unwrap; %w", err)
	}
	if fieldColor, ok := partial["Color"]; ok {
		result.Color, err = r._unmarshalJSONstring(fieldColor)
		if err != nil {
			return result, fmt.Errorf("example: Car._unmarshalJSONCar: field Color; %w", err)
		}
	}
	if fieldWheels, ok := partial["Wheels"]; ok {
		result.Wheels, err = r._unmarshalJSONint(fieldWheels)
		if err != nil {
			return result, fmt.Errorf("example: Car._unmarshalJSONCar: field Wheels; %w", err)
		}
	}
	return result, nil
}
func (r *Car) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: Car._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Car) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: Car._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}

func PlaneFromJSON(x []byte) (*Plane, error) {
	result := new(Plane)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.PlaneFromJSON: %w", err)
	}
	return result, nil
}

func PlaneToJSON(x *Plane) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Plane)(nil)
	_ json.Marshaler   = (*Plane)(nil)
)

func (r *Plane) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONPlane(*r)
}
func (r *Plane) _marshalJSONPlane(x Plane) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldColor []byte
	fieldColor, err = r._marshalJSONstring(x.Color)
	if err != nil {
		return nil, fmt.Errorf("example: Plane._marshalJSONPlane: field name Color; %w", err)
	}
	partial["Color"] = fieldColor
	var fieldEngines []byte
	fieldEngines, err = r._marshalJSONint(x.Engines)
	if err != nil {
		return nil, fmt.Errorf("example: Plane._marshalJSONPlane: field name Engines; %w", err)
	}
	partial["Engines"] = fieldEngines
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Plane._marshalJSONPlane: struct; %w", err)
	}
	return result, nil
}
func (r *Plane) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: Plane._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Plane) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: Plane._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *Plane) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONPlane(data)
	if err != nil {
		return fmt.Errorf("example: Plane.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Plane) _unmarshalJSONPlane(data []byte) (Plane, error) {
	result := Plane{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Plane._unmarshalJSONPlane: native struct unwrap; %w", err)
	}
	if fieldColor, ok := partial["Color"]; ok {
		result.Color, err = r._unmarshalJSONstring(fieldColor)
		if err != nil {
			return result, fmt.Errorf("example: Plane._unmarshalJSONPlane: field Color; %w", err)
		}
	}
	if fieldEngines, ok := partial["Engines"]; ok {
		result.Engines, err = r._unmarshalJSONint(fieldEngines)
		if err != nil {
			return result, fmt.Errorf("example: Plane._unmarshalJSONPlane: field Engines; %w", err)
		}
	}
	return result, nil
}
func (r *Plane) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: Plane._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Plane) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: Plane._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}

func BoatFromJSON(x []byte) (*Boat, error) {
	result := new(Boat)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.BoatFromJSON: %w", err)
	}
	return result, nil
}

func BoatToJSON(x *Boat) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Boat)(nil)
	_ json.Marshaler   = (*Boat)(nil)
)

func (r *Boat) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONBoat(*r)
}
func (r *Boat) _marshalJSONBoat(x Boat) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldColor []byte
	fieldColor, err = r._marshalJSONstring(x.Color)
	if err != nil {
		return nil, fmt.Errorf("example: Boat._marshalJSONBoat: field name Color; %w", err)
	}
	partial["Color"] = fieldColor
	var fieldPropellers []byte
	fieldPropellers, err = r._marshalJSONint(x.Propellers)
	if err != nil {
		return nil, fmt.Errorf("example: Boat._marshalJSONBoat: field name Propellers; %w", err)
	}
	partial["Propellers"] = fieldPropellers
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Boat._marshalJSONBoat: struct; %w", err)
	}
	return result, nil
}
func (r *Boat) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: Boat._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Boat) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: Boat._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *Boat) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONBoat(data)
	if err != nil {
		return fmt.Errorf("example: Boat.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Boat) _unmarshalJSONBoat(data []byte) (Boat, error) {
	result := Boat{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Boat._unmarshalJSONBoat: native struct unwrap; %w", err)
	}
	if fieldColor, ok := partial["Color"]; ok {
		result.Color, err = r._unmarshalJSONstring(fieldColor)
		if err != nil {
			return result, fmt.Errorf("example: Boat._unmarshalJSONBoat: field Color; %w", err)
		}
	}
	if fieldPropellers, ok := partial["Propellers"]; ok {
		result.Propellers, err = r._unmarshalJSONint(fieldPropellers)
		if err != nil {
			return result, fmt.Errorf("example: Boat._unmarshalJSONBoat: field Propellers; %w", err)
		}
	}
	return result, nil
}
func (r *Boat) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: Boat._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Boat) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: Boat._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}
