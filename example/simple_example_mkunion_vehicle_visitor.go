// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"github.com/widmogrod/mkunion/f"
)

type VehicleVisitor interface {
	VisitCar(v *Car) any
	VisitPlane(v *Plane) any
	VisitBoat(v *Boat) any
}

type Vehicle interface {
	Accept(g VehicleVisitor) any
}

func (r *Car) Accept(v VehicleVisitor) any   { return v.VisitCar(r) }
func (r *Plane) Accept(v VehicleVisitor) any { return v.VisitPlane(r) }
func (r *Boat) Accept(v VehicleVisitor) any  { return v.VisitBoat(r) }

var (
	_ Vehicle = (*Car)(nil)
	_ Vehicle = (*Plane)(nil)
	_ Vehicle = (*Boat)(nil)
)

type VehicleOneOf struct {
	Car   *Car   `json:",omitempty"`
	Plane *Plane `json:",omitempty"`
	Boat  *Boat  `json:",omitempty"`
}

func (r *VehicleOneOf) Accept(v VehicleVisitor) any {
	switch {
	case r.Car != nil:
		return v.VisitCar(r.Car)
	case r.Plane != nil:
		return v.VisitPlane(r.Plane)
	case r.Boat != nil:
		return v.VisitBoat(r.Boat)
	default:
		panic("unexpected")
	}
}

var _ Vehicle = (*VehicleOneOf)(nil)

type mapVehicleToOneOf struct{}

func (t *mapVehicleToOneOf) VisitCar(v *Car) any     { return &VehicleOneOf{Car: v} }
func (t *mapVehicleToOneOf) VisitPlane(v *Plane) any { return &VehicleOneOf{Plane: v} }
func (t *mapVehicleToOneOf) VisitBoat(v *Boat) any   { return &VehicleOneOf{Boat: v} }

var defaultMapVehicleToOneOf VehicleVisitor = &mapVehicleToOneOf{}

func MapVehicleToOneOf(v Vehicle) *VehicleOneOf {
	return v.Accept(defaultMapVehicleToOneOf).(*VehicleOneOf)
}

func MustMatchVehicle[TOut any](
	x Vehicle,
	f1 func(x *Car) TOut,
	f2 func(x *Plane) TOut,
	f3 func(x *Boat) TOut,
) TOut {
	return f.MustMatch3(x, f1, f2, f3)
}
