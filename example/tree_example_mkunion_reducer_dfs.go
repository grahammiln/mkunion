// Code generated by mkunion. DO NOT EDIT.
package example

type (
	TreeReducer[A any] interface {
		ReduceBranch(x *Branch, agg A) (result A, stop bool)
		ReduceLeaf(x *Leaf, agg A) (result A, stop bool)
	}
)

type TreeDepthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce TreeReducer[A]
}

var _ TreeVisitor = (*TreeDepthFirstVisitor[any])(nil)

func (d *TreeDepthFirstVisitor[A]) VisitBranch(v *Branch) any {
	d.result, d.stop = d.reduce.ReduceBranch(v, d.result)
	if d.stop {
		return nil
	}
	if _ = v.L.Accept(d); d.stop {
		return nil
	}
	if _ = v.R.Accept(d); d.stop {
		return nil
	}

	return nil
}

func (d *TreeDepthFirstVisitor[A]) VisitLeaf(v *Leaf) any {
	d.result, d.stop = d.reduce.ReduceLeaf(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func ReduceTreeDepthFirst[A any](r TreeReducer[A], v Tree, init A) A {
	reducer := &TreeDepthFirstVisitor[A]{
		result: init,
		reduce: r,
	}

	_ = v.Accept(reducer)

	return reducer.result
}
