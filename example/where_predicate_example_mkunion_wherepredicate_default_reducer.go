// Code generated by mkunion. DO NOT EDIT.
package example

var _ WherePredicateReducer[any] = (*WherePredicateDefaultReduction[any])(nil)

type (
	WherePredicateDefaultReduction[A any] struct {
		PanicOnFallback      bool
		DefaultStopReduction bool
		OnEq                 func(x *Eq, agg A) (result A, stop bool)
		OnAnd                func(x *And, agg A) (result A, stop bool)
		OnOr                 func(x *Or, agg A) (result A, stop bool)
		OnPath               func(x *Path, agg A) (result A, stop bool)
	}
)

func (t *WherePredicateDefaultReduction[A]) ReduceEq(x *Eq, agg A) (result A, stop bool) {
	if t.OnEq != nil {
		return t.OnEq(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch")
	}
	return agg, t.DefaultStopReduction
}

func (t *WherePredicateDefaultReduction[A]) ReduceAnd(x *And, agg A) (result A, stop bool) {
	if t.OnAnd != nil {
		return t.OnAnd(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch")
	}
	return agg, t.DefaultStopReduction
}

func (t *WherePredicateDefaultReduction[A]) ReduceOr(x *Or, agg A) (result A, stop bool) {
	if t.OnOr != nil {
		return t.OnOr(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch")
	}
	return agg, t.DefaultStopReduction
}

func (t *WherePredicateDefaultReduction[A]) ReducePath(x *Path, agg A) (result A, stop bool) {
	if t.OnPath != nil {
		return t.OnPath(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch")
	}
	return agg, t.DefaultStopReduction
}
