{{ .Header }}
package {{ .PackageName }}

import (
	"github.com/widmogrod/mkunion/f"
)

{{ $name := .Name }}
type {{ $name }}Visitor interface {
	{{- range .Types }}
	Visit{{ . }}(v *{{ . }}) any
	{{- end }}
}

type {{ $name }} interface {
	Accept(g {{ $name }}Visitor) any
}
{{ range .Types }}
func (r *{{ . }}) Accept(v {{ $name }}Visitor) any { return v.Visit{{ . }}(r) }
{{- end }}

var (
	{{- range .Types }}
	_ {{ $name }} = (*{{ . }})(nil)
	{{- end }}
)

type {{ $name }}OneOf struct {
{{- range .Types }}
	{{ . }} *{{ . }} `json:",omitempty"`
{{- end }}
}

func (r *{{ $name }}OneOf) Accept(v {{ $name }}Visitor) any {
	switch {
{{- range .Types }}
	case r.{{ . }} != nil:
		return v.Visit{{ . }}(r.{{ . }})
{{- end }}
	default:
		panic("unexpected")
	}
}

func (r *{{ $name }}OneOf) Unwrap() {{ $name }} {
	switch {
{{- range .Types }}
	case r.{{ . }} != nil:
		return r.{{ . }}
{{- end }}
	}

	return nil
}

var _ {{ $name }} = (*{{ $name }}OneOf)(nil)

type map{{ $name }}ToOneOf struct{}
{{ range .Types }}
func (t *map{{ $name }}ToOneOf) Visit{{ . }}(v *{{ . }}) any { return &{{ $name }}OneOf{ {{- . }}: v} }
{{- end }}

var defaultMap{{ $name }}ToOneOf {{ $name }}Visitor = &map{{ $name }}ToOneOf{}

func Map{{ $name }}ToOneOf(v {{ $name }}) *{{ $name }}OneOf {
	return v.Accept(defaultMap{{ $name }}ToOneOf).(*{{ $name }}OneOf)
}
{{ $i := len .Types}}
func MustMatch{{ $name }}[TOut any](
	x {{ $name }},
	{{- range $k, $t := .Types }}
	f{{ Add $k 1}} func(x *{{ $t }}) TOut,
    {{- end }}
) TOut {
	return f.MustMatch{{ $i }}(x {{- range $k := GenIntSlice 1 $i }}, f{{ $k }} {{- end }})
}