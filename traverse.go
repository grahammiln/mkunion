package mkunion

import (
	"bytes"
	"text/template"
)

type Traverse struct {
	Name        string
	PackageName string
	Types       []string
	Branches    map[string][]string
}

var (
	traverseTmpl = `// Code generated by mkunion. DO NOT EDIT.
package {{ .PackageName }}
{{ $root := . -}}
{{ $name := .Name }}
type (
	{{ $name }}Reducer[A any] struct {
		{{- range .Types }}
		{{ . }} func(x *{{ . }}, agg A) (result A, stop bool)
		{{- end }}
	}
)

type dfs{{ $name }}[A any] struct {
	stop   bool
	result A
	reduce {{ $name }}Reducer[A]
}

var _ {{ $name }}Visitor = (*dfs{{ $name }}[any])(nil)
{{ range $i, $type := .Types }}
func (d *dfs{{ $name }}[A]) Visit{{ . }}(v *{{ . }}) any {
	d.result, d.stop = d.reduce.{{ . }}(v, d.result)
	if d.stop {
		return nil
	}
	
	{{- range (index $root.Branches $type) }}
	if _ = v.{{ . }}.Accept(d); d.stop {
		return nil
	}
	{{- end }}

	return nil
}
{{ end }}
func Reduce{{ $name }}[A any](r {{ $name }}Reducer[A], v {{ $name }}, init A) A {
	reducer := &dfs{{ $name }}[A]{
		result: init,
		reduce: r,
	}

	_ = v.Accept(reducer)

	return reducer.result
}
`
)

var (
	renderTraverse = template.Must(template.New("main").Parse(traverseTmpl))
)

func (t *Traverse) Generate() ([]byte, error) {
	result := &bytes.Buffer{}
	err := renderTraverse.ExecuteTemplate(result, "main", t)
	if err != nil {
		return nil, err
	}

	return result.Bytes(), nil
}
