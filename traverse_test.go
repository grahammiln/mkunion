package mkunion

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestTravers(t *testing.T) {
	g := Traverse{
		Name:        "Tree",
		PackageName: "visitor",
		Types:       []string{"Branch", "Leaf"},
		Branches: map[string][]string{
			"Branch": {"L", "R"},
		},
	}

	result, err := g.Generate()
	assert.NoError(t, err)
	assert.Equal(t, `// Code generated by mkunion. DO NOT EDIT.
package visitor

type (
	TreeReducer[A any] struct {
		Branch func(x *Branch, agg A) (result A, stop bool)
		Leaf func(x *Leaf, agg A) (result A, stop bool)
	}
)

type dfsTree[A any] struct {
	stop   bool
	result A
	reduce TreeReducer[A]
}

var _ TreeVisitor = (*dfsTree[any])(nil)

func (d *dfsTree[A]) VisitBranch(v *Branch) any {
	d.result, d.stop = d.reduce.Branch(v, d.result)
	if d.stop {
		return nil
	}
	if _ = v.L.Accept(d); d.stop {
		return nil
	}
	if _ = v.R.Accept(d); d.stop {
		return nil
	}

	return nil
}

func (d *dfsTree[A]) VisitLeaf(v *Leaf) any {
	d.result, d.stop = d.reduce.Leaf(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func ReduceTree[A any](r TreeReducer[A], v Tree, init A) A {
	reducer := &dfsTree[A]{
		result: init,
		reduce: r,
	}

	_ = v.Accept(reducer)

	return reducer.result
}
`, string(result))
}
