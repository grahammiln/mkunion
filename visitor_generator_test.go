package mkunion

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestGeneration(t *testing.T) {
	g := VisitorGenerator{
		Header:      Header,
		Name:        "Vehicle",
		Types:       []string{"Plane", "Car", "Boat"},
		PackageName: "visitor",
	}

	result, err := g.Generate()
	assert.NoError(t, err)
	assert.Equal(t, `// Code generated by mkunion. DO NOT EDIT.
package visitor

import (
	"github.com/widmogrod/mkunion/f"
)


type VehicleVisitor interface {
	VisitPlane(v *Plane) any
	VisitCar(v *Car) any
	VisitBoat(v *Boat) any
}

type Vehicle interface {
	Accept(g VehicleVisitor) any
}

func (r *Plane) Accept(v VehicleVisitor) any { return v.VisitPlane(r) }
func (r *Car) Accept(v VehicleVisitor) any { return v.VisitCar(r) }
func (r *Boat) Accept(v VehicleVisitor) any { return v.VisitBoat(r) }

var (
	_ Vehicle = (*Plane)(nil)
	_ Vehicle = (*Car)(nil)
	_ Vehicle = (*Boat)(nil)
)

func MustMatchVehicle[TOut any](
	x Vehicle,
	f1 func(x *Plane) TOut,
	f2 func(x *Car) TOut,
	f3 func(x *Boat) TOut,
) TOut {
	return f.MustMatch3(x, f1, f2, f3)
}

func MustMatchVehicleR2[TOut1, TOut2 any](
	x Vehicle,
	f1 func(x *Plane) (TOut1, TOut2),
	f2 func(x *Car) (TOut1, TOut2),
	f3 func(x *Boat) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.MustMatch3R2(x, f1, f2, f3)
}`, string(result))
}
