// Code generated by mkunion. DO NOT EDIT.
package shape

import "github.com/widmogrod/mkunion/f"
import "github.com/widmogrod/mkunion/x/schema"

//mkunion-extension:visitor

type GuardVisitor interface {
	VisitRegexp(v *Regexp) any
	VisitBetween(v *Between) any
	VisitAndGuard(v *AndGuard) any
	VisitOrGuard(v *OrGuard) any
}

type Guard interface {
	AcceptGuard(g GuardVisitor) any
}

func (r *Regexp) AcceptGuard(v GuardVisitor) any   { return v.VisitRegexp(r) }
func (r *Between) AcceptGuard(v GuardVisitor) any  { return v.VisitBetween(r) }
func (r *AndGuard) AcceptGuard(v GuardVisitor) any { return v.VisitAndGuard(r) }
func (r *OrGuard) AcceptGuard(v GuardVisitor) any  { return v.VisitOrGuard(r) }

var (
	_ Guard = (*Regexp)(nil)
	_ Guard = (*Between)(nil)
	_ Guard = (*AndGuard)(nil)
	_ Guard = (*OrGuard)(nil)
)

func MatchGuard[TOut any](
	x Guard,
	f1 func(x *Regexp) TOut,
	f2 func(x *Between) TOut,
	f3 func(x *AndGuard) TOut,
	f4 func(x *OrGuard) TOut,
	df func(x Guard) TOut,
) TOut {
	return f.Match4(x, f1, f2, f3, f4, df)
}

func MatchGuardR2[TOut1, TOut2 any](
	x Guard,
	f1 func(x *Regexp) (TOut1, TOut2),
	f2 func(x *Between) (TOut1, TOut2),
	f3 func(x *AndGuard) (TOut1, TOut2),
	f4 func(x *OrGuard) (TOut1, TOut2),
	df func(x Guard) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.Match4R2(x, f1, f2, f3, f4, df)
}

func MustMatchGuard[TOut any](
	x Guard,
	f1 func(x *Regexp) TOut,
	f2 func(x *Between) TOut,
	f3 func(x *AndGuard) TOut,
	f4 func(x *OrGuard) TOut,
) TOut {
	return f.MustMatch4(x, f1, f2, f3, f4)
}

func MustMatchGuardR0(
	x Guard,
	f1 func(x *Regexp),
	f2 func(x *Between),
	f3 func(x *AndGuard),
	f4 func(x *OrGuard),
) {
	f.MustMatch4R0(x, f1, f2, f3, f4)
}

func MustMatchGuardR2[TOut1, TOut2 any](
	x Guard,
	f1 func(x *Regexp) (TOut1, TOut2),
	f2 func(x *Between) (TOut1, TOut2),
	f3 func(x *AndGuard) (TOut1, TOut2),
	f4 func(x *OrGuard) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.MustMatch4R2(x, f1, f2, f3, f4)
}

// mkunion-extension:schema
func init() {
	schema.RegisterUnionTypes(GuardSchemaDef())
}

func GuardSchemaDef() *schema.UnionVariants[Guard] {
	return schema.MustDefineUnion[Guard](
		&Regexp{},
		&Between{},
		&AndGuard{},
		&OrGuard{},
	)
}
