// Code generated by mkunion. DO NOT EDIT.
package shape

type (
	ShapeReducer[A any] interface {
		ReduceAny(x *Any, agg A) (result A, stop bool)
		ReduceRefName(x *RefName, agg A) (result A, stop bool)
		ReduceBooleanLike(x *BooleanLike, agg A) (result A, stop bool)
		ReduceStringLike(x *StringLike, agg A) (result A, stop bool)
		ReduceNumberLike(x *NumberLike, agg A) (result A, stop bool)
		ReduceListLike(x *ListLike, agg A) (result A, stop bool)
		ReduceMapLike(x *MapLike, agg A) (result A, stop bool)
		ReduceStructLike(x *StructLike, agg A) (result A, stop bool)
		ReduceUnionLike(x *UnionLike, agg A) (result A, stop bool)
	}
)

type ShapeDepthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce ShapeReducer[A]
}

var _ ShapeVisitor = (*ShapeDepthFirstVisitor[any])(nil)

func (d *ShapeDepthFirstVisitor[A]) VisitAny(v *Any) any {
	d.result, d.stop = d.reduce.ReduceAny(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *ShapeDepthFirstVisitor[A]) VisitRefName(v *RefName) any {
	d.result, d.stop = d.reduce.ReduceRefName(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *ShapeDepthFirstVisitor[A]) VisitBooleanLike(v *BooleanLike) any {
	d.result, d.stop = d.reduce.ReduceBooleanLike(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *ShapeDepthFirstVisitor[A]) VisitStringLike(v *StringLike) any {
	d.result, d.stop = d.reduce.ReduceStringLike(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *ShapeDepthFirstVisitor[A]) VisitNumberLike(v *NumberLike) any {
	d.result, d.stop = d.reduce.ReduceNumberLike(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *ShapeDepthFirstVisitor[A]) VisitListLike(v *ListLike) any {
	d.result, d.stop = d.reduce.ReduceListLike(v, d.result)
	if d.stop {
		return nil
	}
	if _ = v.Element.AcceptShape(d); d.stop {
		return nil
	}

	return nil
}

func (d *ShapeDepthFirstVisitor[A]) VisitMapLike(v *MapLike) any {
	d.result, d.stop = d.reduce.ReduceMapLike(v, d.result)
	if d.stop {
		return nil
	}
	if _ = v.Key.AcceptShape(d); d.stop {
		return nil
	}
	if _ = v.Val.AcceptShape(d); d.stop {
		return nil
	}

	return nil
}

func (d *ShapeDepthFirstVisitor[A]) VisitStructLike(v *StructLike) any {
	d.result, d.stop = d.reduce.ReduceStructLike(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *ShapeDepthFirstVisitor[A]) VisitUnionLike(v *UnionLike) any {
	d.result, d.stop = d.reduce.ReduceUnionLike(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func ReduceShapeDepthFirst[A any](r ShapeReducer[A], v Shape, init A) A {
	reducer := &ShapeDepthFirstVisitor[A]{
		result: init,
		reduce: r,
	}

	_ = v.AcceptShape(reducer)

	return reducer.result
}
