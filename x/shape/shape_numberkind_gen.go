// Code generated by mkunion. DO NOT EDIT.
package shape

import "github.com/widmogrod/mkunion/f"
import "github.com/widmogrod/mkunion/x/schema"
import "github.com/widmogrod/mkunion/x/shared"
import "encoding/json"
import "fmt"

//mkunion-extension:visitor

type NumberKindVisitor interface {
	VisitUInt8(v *UInt8) any
	VisitUInt16(v *UInt16) any
	VisitUInt32(v *UInt32) any
	VisitUInt64(v *UInt64) any
	VisitInt8(v *Int8) any
	VisitInt16(v *Int16) any
	VisitInt32(v *Int32) any
	VisitInt64(v *Int64) any
	VisitFloat32(v *Float32) any
	VisitFloat64(v *Float64) any
}

type NumberKind interface {
	AcceptNumberKind(g NumberKindVisitor) any
}

func (r *UInt8) AcceptNumberKind(v NumberKindVisitor) any   { return v.VisitUInt8(r) }
func (r *UInt16) AcceptNumberKind(v NumberKindVisitor) any  { return v.VisitUInt16(r) }
func (r *UInt32) AcceptNumberKind(v NumberKindVisitor) any  { return v.VisitUInt32(r) }
func (r *UInt64) AcceptNumberKind(v NumberKindVisitor) any  { return v.VisitUInt64(r) }
func (r *Int8) AcceptNumberKind(v NumberKindVisitor) any    { return v.VisitInt8(r) }
func (r *Int16) AcceptNumberKind(v NumberKindVisitor) any   { return v.VisitInt16(r) }
func (r *Int32) AcceptNumberKind(v NumberKindVisitor) any   { return v.VisitInt32(r) }
func (r *Int64) AcceptNumberKind(v NumberKindVisitor) any   { return v.VisitInt64(r) }
func (r *Float32) AcceptNumberKind(v NumberKindVisitor) any { return v.VisitFloat32(r) }
func (r *Float64) AcceptNumberKind(v NumberKindVisitor) any { return v.VisitFloat64(r) }

var (
	_ NumberKind = (*UInt8)(nil)
	_ NumberKind = (*UInt16)(nil)
	_ NumberKind = (*UInt32)(nil)
	_ NumberKind = (*UInt64)(nil)
	_ NumberKind = (*Int8)(nil)
	_ NumberKind = (*Int16)(nil)
	_ NumberKind = (*Int32)(nil)
	_ NumberKind = (*Int64)(nil)
	_ NumberKind = (*Float32)(nil)
	_ NumberKind = (*Float64)(nil)
)

func MatchNumberKind[TOut any](
	x NumberKind,
	f1 func(x *UInt8) TOut,
	f2 func(x *UInt16) TOut,
	f3 func(x *UInt32) TOut,
	f4 func(x *UInt64) TOut,
	f5 func(x *Int8) TOut,
	f6 func(x *Int16) TOut,
	f7 func(x *Int32) TOut,
	f8 func(x *Int64) TOut,
	f9 func(x *Float32) TOut,
	f10 func(x *Float64) TOut,
	df func(x NumberKind) TOut,
) TOut {
	return f.Match10(x, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, df)
}

func MatchNumberKindR2[TOut1, TOut2 any](
	x NumberKind,
	f1 func(x *UInt8) (TOut1, TOut2),
	f2 func(x *UInt16) (TOut1, TOut2),
	f3 func(x *UInt32) (TOut1, TOut2),
	f4 func(x *UInt64) (TOut1, TOut2),
	f5 func(x *Int8) (TOut1, TOut2),
	f6 func(x *Int16) (TOut1, TOut2),
	f7 func(x *Int32) (TOut1, TOut2),
	f8 func(x *Int64) (TOut1, TOut2),
	f9 func(x *Float32) (TOut1, TOut2),
	f10 func(x *Float64) (TOut1, TOut2),
	df func(x NumberKind) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.Match10R2(x, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, df)
}

func MustMatchNumberKind[TOut any](
	x NumberKind,
	f1 func(x *UInt8) TOut,
	f2 func(x *UInt16) TOut,
	f3 func(x *UInt32) TOut,
	f4 func(x *UInt64) TOut,
	f5 func(x *Int8) TOut,
	f6 func(x *Int16) TOut,
	f7 func(x *Int32) TOut,
	f8 func(x *Int64) TOut,
	f9 func(x *Float32) TOut,
	f10 func(x *Float64) TOut,
) TOut {
	return f.MustMatch10(x, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10)
}

func MustMatchNumberKindR0(
	x NumberKind,
	f1 func(x *UInt8),
	f2 func(x *UInt16),
	f3 func(x *UInt32),
	f4 func(x *UInt64),
	f5 func(x *Int8),
	f6 func(x *Int16),
	f7 func(x *Int32),
	f8 func(x *Int64),
	f9 func(x *Float32),
	f10 func(x *Float64),
) {
	f.MustMatch10R0(x, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10)
}

func MustMatchNumberKindR2[TOut1, TOut2 any](
	x NumberKind,
	f1 func(x *UInt8) (TOut1, TOut2),
	f2 func(x *UInt16) (TOut1, TOut2),
	f3 func(x *UInt32) (TOut1, TOut2),
	f4 func(x *UInt64) (TOut1, TOut2),
	f5 func(x *Int8) (TOut1, TOut2),
	f6 func(x *Int16) (TOut1, TOut2),
	f7 func(x *Int32) (TOut1, TOut2),
	f8 func(x *Int64) (TOut1, TOut2),
	f9 func(x *Float32) (TOut1, TOut2),
	f10 func(x *Float64) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.MustMatch10R2(x, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10)
}

// mkunion-extension:schema
func init() {
	schema.RegisterUnionTypes(NumberKindSchemaDef())
}

func NumberKindSchemaDef() *schema.UnionVariants[NumberKind] {
	return schema.MustDefineUnion[NumberKind](
		new(UInt8),
		new(UInt16),
		new(UInt32),
		new(UInt64),
		new(Int8),
		new(Int16),
		new(Int32),
		new(Int64),
		new(Float32),
		new(Float64),
	)
}

// mkunion-extension:shape
func NumberKindShape() Shape {
	return &UnionLike{
		Name:          "NumberKind",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Variant: []Shape{
			UInt8Shape(),
			UInt16Shape(),
			UInt32Shape(),
			UInt64Shape(),
			Int8Shape(),
			Int16Shape(),
			Int32Shape(),
			Int64Shape(),
			Float32Shape(),
			Float64Shape(),
		},
	}
}

func UInt8Shape() Shape {
	return &StructLike{
		Name:          "UInt8",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func UInt16Shape() Shape {
	return &StructLike{
		Name:          "UInt16",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func UInt32Shape() Shape {
	return &StructLike{
		Name:          "UInt32",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func UInt64Shape() Shape {
	return &StructLike{
		Name:          "UInt64",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Int8Shape() Shape {
	return &StructLike{
		Name:          "Int8",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Int16Shape() Shape {
	return &StructLike{
		Name:          "Int16",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Int32Shape() Shape {
	return &StructLike{
		Name:          "Int32",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Int64Shape() Shape {
	return &StructLike{
		Name:          "Int64",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Float32Shape() Shape {
	return &StructLike{
		Name:          "Float32",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Float64Shape() Shape {
	return &StructLike{
		Name:          "Float64",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

// mkunion-extension:json
type NumberKindUnionJSON struct {
	Type    string          `json:"$type,omitempty"`
	UInt8   json.RawMessage `json:"shape.UInt8,omitempty"`
	UInt16  json.RawMessage `json:"shape.UInt16,omitempty"`
	UInt32  json.RawMessage `json:"shape.UInt32,omitempty"`
	UInt64  json.RawMessage `json:"shape.UInt64,omitempty"`
	Int8    json.RawMessage `json:"shape.Int8,omitempty"`
	Int16   json.RawMessage `json:"shape.Int16,omitempty"`
	Int32   json.RawMessage `json:"shape.Int32,omitempty"`
	Int64   json.RawMessage `json:"shape.Int64,omitempty"`
	Float32 json.RawMessage `json:"shape.Float32,omitempty"`
	Float64 json.RawMessage `json:"shape.Float64,omitempty"`
}

func NumberKindFromJSON(x []byte) (NumberKind, error) {
	var data NumberKindUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "shape.UInt8":
		return UInt8FromJSON(data.UInt8)
	case "shape.UInt16":
		return UInt16FromJSON(data.UInt16)
	case "shape.UInt32":
		return UInt32FromJSON(data.UInt32)
	case "shape.UInt64":
		return UInt64FromJSON(data.UInt64)
	case "shape.Int8":
		return Int8FromJSON(data.Int8)
	case "shape.Int16":
		return Int16FromJSON(data.Int16)
	case "shape.Int32":
		return Int32FromJSON(data.Int32)
	case "shape.Int64":
		return Int64FromJSON(data.Int64)
	case "shape.Float32":
		return Float32FromJSON(data.Float32)
	case "shape.Float64":
		return Float64FromJSON(data.Float64)
	}

	if data.UInt8 != nil {
		return UInt8FromJSON(data.UInt8)
	} else if data.UInt16 != nil {
		return UInt16FromJSON(data.UInt16)
	} else if data.UInt32 != nil {
		return UInt32FromJSON(data.UInt32)
	} else if data.UInt64 != nil {
		return UInt64FromJSON(data.UInt64)
	} else if data.Int8 != nil {
		return Int8FromJSON(data.Int8)
	} else if data.Int16 != nil {
		return Int16FromJSON(data.Int16)
	} else if data.Int32 != nil {
		return Int32FromJSON(data.Int32)
	} else if data.Int64 != nil {
		return Int64FromJSON(data.Int64)
	} else if data.Float32 != nil {
		return Float32FromJSON(data.Float32)
	} else if data.Float64 != nil {
		return Float64FromJSON(data.Float64)
	}

	return nil, fmt.Errorf("unknown type %s", data.Type)
}

func NumberKindToJSON(x NumberKind) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MustMatchNumberKindR2(
		x,
		func(x *UInt8) ([]byte, error) {
			body, err := UInt8ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:  "shape.UInt8",
				UInt8: body,
			})
		},
		func(x *UInt16) ([]byte, error) {
			body, err := UInt16ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:   "shape.UInt16",
				UInt16: body,
			})
		},
		func(x *UInt32) ([]byte, error) {
			body, err := UInt32ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:   "shape.UInt32",
				UInt32: body,
			})
		},
		func(x *UInt64) ([]byte, error) {
			body, err := UInt64ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:   "shape.UInt64",
				UInt64: body,
			})
		},
		func(x *Int8) ([]byte, error) {
			body, err := Int8ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type: "shape.Int8",
				Int8: body,
			})
		},
		func(x *Int16) ([]byte, error) {
			body, err := Int16ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:  "shape.Int16",
				Int16: body,
			})
		},
		func(x *Int32) ([]byte, error) {
			body, err := Int32ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:  "shape.Int32",
				Int32: body,
			})
		},
		func(x *Int64) ([]byte, error) {
			body, err := Int64ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:  "shape.Int64",
				Int64: body,
			})
		},
		func(x *Float32) ([]byte, error) {
			body, err := Float32ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:    "shape.Float32",
				Float32: body,
			})
		},
		func(x *Float64) ([]byte, error) {
			body, err := Float64ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:    "shape.Float64",
				Float64: body,
			})
		},
	)
}

func UInt8FromJSON(x []byte) (*UInt8, error) {
	var result *UInt8 = new(UInt8)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		}

		return fmt.Errorf("shape.UInt8FromJSON: unknown key %s", key)
	})

	return result, err
}

func UInt8ToJSON(x *UInt8) ([]byte, error) {
	return json.Marshal(map[string]json.RawMessage{})
}
func (self *UInt8) MarshalJSON() ([]byte, error) {
	return UInt8ToJSON(self)
}

func (self *UInt8) UnmarshalJSON(x []byte) error {
	n, err := UInt8FromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func UInt16FromJSON(x []byte) (*UInt16, error) {
	var result *UInt16 = new(UInt16)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		}

		return fmt.Errorf("shape.UInt16FromJSON: unknown key %s", key)
	})

	return result, err
}

func UInt16ToJSON(x *UInt16) ([]byte, error) {
	return json.Marshal(map[string]json.RawMessage{})
}
func (self *UInt16) MarshalJSON() ([]byte, error) {
	return UInt16ToJSON(self)
}

func (self *UInt16) UnmarshalJSON(x []byte) error {
	n, err := UInt16FromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func UInt32FromJSON(x []byte) (*UInt32, error) {
	var result *UInt32 = new(UInt32)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		}

		return fmt.Errorf("shape.UInt32FromJSON: unknown key %s", key)
	})

	return result, err
}

func UInt32ToJSON(x *UInt32) ([]byte, error) {
	return json.Marshal(map[string]json.RawMessage{})
}
func (self *UInt32) MarshalJSON() ([]byte, error) {
	return UInt32ToJSON(self)
}

func (self *UInt32) UnmarshalJSON(x []byte) error {
	n, err := UInt32FromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func UInt64FromJSON(x []byte) (*UInt64, error) {
	var result *UInt64 = new(UInt64)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		}

		return fmt.Errorf("shape.UInt64FromJSON: unknown key %s", key)
	})

	return result, err
}

func UInt64ToJSON(x *UInt64) ([]byte, error) {
	return json.Marshal(map[string]json.RawMessage{})
}
func (self *UInt64) MarshalJSON() ([]byte, error) {
	return UInt64ToJSON(self)
}

func (self *UInt64) UnmarshalJSON(x []byte) error {
	n, err := UInt64FromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func Int8FromJSON(x []byte) (*Int8, error) {
	var result *Int8 = new(Int8)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		}

		return fmt.Errorf("shape.Int8FromJSON: unknown key %s", key)
	})

	return result, err
}

func Int8ToJSON(x *Int8) ([]byte, error) {
	return json.Marshal(map[string]json.RawMessage{})
}
func (self *Int8) MarshalJSON() ([]byte, error) {
	return Int8ToJSON(self)
}

func (self *Int8) UnmarshalJSON(x []byte) error {
	n, err := Int8FromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func Int16FromJSON(x []byte) (*Int16, error) {
	var result *Int16 = new(Int16)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		}

		return fmt.Errorf("shape.Int16FromJSON: unknown key %s", key)
	})

	return result, err
}

func Int16ToJSON(x *Int16) ([]byte, error) {
	return json.Marshal(map[string]json.RawMessage{})
}
func (self *Int16) MarshalJSON() ([]byte, error) {
	return Int16ToJSON(self)
}

func (self *Int16) UnmarshalJSON(x []byte) error {
	n, err := Int16FromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func Int32FromJSON(x []byte) (*Int32, error) {
	var result *Int32 = new(Int32)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		}

		return fmt.Errorf("shape.Int32FromJSON: unknown key %s", key)
	})

	return result, err
}

func Int32ToJSON(x *Int32) ([]byte, error) {
	return json.Marshal(map[string]json.RawMessage{})
}
func (self *Int32) MarshalJSON() ([]byte, error) {
	return Int32ToJSON(self)
}

func (self *Int32) UnmarshalJSON(x []byte) error {
	n, err := Int32FromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func Int64FromJSON(x []byte) (*Int64, error) {
	var result *Int64 = new(Int64)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		}

		return fmt.Errorf("shape.Int64FromJSON: unknown key %s", key)
	})

	return result, err
}

func Int64ToJSON(x *Int64) ([]byte, error) {
	return json.Marshal(map[string]json.RawMessage{})
}
func (self *Int64) MarshalJSON() ([]byte, error) {
	return Int64ToJSON(self)
}

func (self *Int64) UnmarshalJSON(x []byte) error {
	n, err := Int64FromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func Float32FromJSON(x []byte) (*Float32, error) {
	var result *Float32 = new(Float32)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		}

		return fmt.Errorf("shape.Float32FromJSON: unknown key %s", key)
	})

	return result, err
}

func Float32ToJSON(x *Float32) ([]byte, error) {
	return json.Marshal(map[string]json.RawMessage{})
}
func (self *Float32) MarshalJSON() ([]byte, error) {
	return Float32ToJSON(self)
}

func (self *Float32) UnmarshalJSON(x []byte) error {
	n, err := Float32FromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func Float64FromJSON(x []byte) (*Float64, error) {
	var result *Float64 = new(Float64)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		}

		return fmt.Errorf("shape.Float64FromJSON: unknown key %s", key)
	})

	return result, err
}

func Float64ToJSON(x *Float64) ([]byte, error) {
	return json.Marshal(map[string]json.RawMessage{})
}
func (self *Float64) MarshalJSON() ([]byte, error) {
	return Float64ToJSON(self)
}

func (self *Float64) UnmarshalJSON(x []byte) error {
	n, err := Float64FromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}
