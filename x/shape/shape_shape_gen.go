// Code generated by mkunion. DO NOT EDIT.
package shape

import "github.com/widmogrod/mkunion/f"
import "github.com/widmogrod/mkunion/x/schema"

//mkunion-extension:visitor

type ShapeVisitor interface {
	VisitAny(v *Any) any
	VisitRefName(v *RefName) any
	VisitBooleanLike(v *BooleanLike) any
	VisitStringLike(v *StringLike) any
	VisitNumberLike(v *NumberLike) any
	VisitListLike(v *ListLike) any
	VisitMapLike(v *MapLike) any
	VisitStructLike(v *StructLike) any
	VisitUnionLike(v *UnionLike) any
}

type Shape interface {
	AcceptShape(g ShapeVisitor) any
}

func (r *Any) AcceptShape(v ShapeVisitor) any         { return v.VisitAny(r) }
func (r *RefName) AcceptShape(v ShapeVisitor) any     { return v.VisitRefName(r) }
func (r *BooleanLike) AcceptShape(v ShapeVisitor) any { return v.VisitBooleanLike(r) }
func (r *StringLike) AcceptShape(v ShapeVisitor) any  { return v.VisitStringLike(r) }
func (r *NumberLike) AcceptShape(v ShapeVisitor) any  { return v.VisitNumberLike(r) }
func (r *ListLike) AcceptShape(v ShapeVisitor) any    { return v.VisitListLike(r) }
func (r *MapLike) AcceptShape(v ShapeVisitor) any     { return v.VisitMapLike(r) }
func (r *StructLike) AcceptShape(v ShapeVisitor) any  { return v.VisitStructLike(r) }
func (r *UnionLike) AcceptShape(v ShapeVisitor) any   { return v.VisitUnionLike(r) }

var (
	_ Shape = (*Any)(nil)
	_ Shape = (*RefName)(nil)
	_ Shape = (*BooleanLike)(nil)
	_ Shape = (*StringLike)(nil)
	_ Shape = (*NumberLike)(nil)
	_ Shape = (*ListLike)(nil)
	_ Shape = (*MapLike)(nil)
	_ Shape = (*StructLike)(nil)
	_ Shape = (*UnionLike)(nil)
)

func MatchShape[TOut any](
	x Shape,
	f1 func(x *Any) TOut,
	f2 func(x *RefName) TOut,
	f3 func(x *BooleanLike) TOut,
	f4 func(x *StringLike) TOut,
	f5 func(x *NumberLike) TOut,
	f6 func(x *ListLike) TOut,
	f7 func(x *MapLike) TOut,
	f8 func(x *StructLike) TOut,
	f9 func(x *UnionLike) TOut,
	df func(x Shape) TOut,
) TOut {
	return f.Match9(x, f1, f2, f3, f4, f5, f6, f7, f8, f9, df)
}

func MatchShapeR2[TOut1, TOut2 any](
	x Shape,
	f1 func(x *Any) (TOut1, TOut2),
	f2 func(x *RefName) (TOut1, TOut2),
	f3 func(x *BooleanLike) (TOut1, TOut2),
	f4 func(x *StringLike) (TOut1, TOut2),
	f5 func(x *NumberLike) (TOut1, TOut2),
	f6 func(x *ListLike) (TOut1, TOut2),
	f7 func(x *MapLike) (TOut1, TOut2),
	f8 func(x *StructLike) (TOut1, TOut2),
	f9 func(x *UnionLike) (TOut1, TOut2),
	df func(x Shape) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.Match9R2(x, f1, f2, f3, f4, f5, f6, f7, f8, f9, df)
}

func MustMatchShape[TOut any](
	x Shape,
	f1 func(x *Any) TOut,
	f2 func(x *RefName) TOut,
	f3 func(x *BooleanLike) TOut,
	f4 func(x *StringLike) TOut,
	f5 func(x *NumberLike) TOut,
	f6 func(x *ListLike) TOut,
	f7 func(x *MapLike) TOut,
	f8 func(x *StructLike) TOut,
	f9 func(x *UnionLike) TOut,
) TOut {
	return f.MustMatch9(x, f1, f2, f3, f4, f5, f6, f7, f8, f9)
}

func MustMatchShapeR0(
	x Shape,
	f1 func(x *Any),
	f2 func(x *RefName),
	f3 func(x *BooleanLike),
	f4 func(x *StringLike),
	f5 func(x *NumberLike),
	f6 func(x *ListLike),
	f7 func(x *MapLike),
	f8 func(x *StructLike),
	f9 func(x *UnionLike),
) {
	f.MustMatch9R0(x, f1, f2, f3, f4, f5, f6, f7, f8, f9)
}

func MustMatchShapeR2[TOut1, TOut2 any](
	x Shape,
	f1 func(x *Any) (TOut1, TOut2),
	f2 func(x *RefName) (TOut1, TOut2),
	f3 func(x *BooleanLike) (TOut1, TOut2),
	f4 func(x *StringLike) (TOut1, TOut2),
	f5 func(x *NumberLike) (TOut1, TOut2),
	f6 func(x *ListLike) (TOut1, TOut2),
	f7 func(x *MapLike) (TOut1, TOut2),
	f8 func(x *StructLike) (TOut1, TOut2),
	f9 func(x *UnionLike) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.MustMatch9R2(x, f1, f2, f3, f4, f5, f6, f7, f8, f9)
}

// mkunion-extension:schema
func init() {
	schema.RegisterUnionTypes(ShapeSchemaDef())
}

func ShapeSchemaDef() *schema.UnionVariants[Shape] {
	return schema.MustDefineUnion[Shape](
		&Any{},
		&RefName{},
		&BooleanLike{},
		&StringLike{},
		&NumberLike{},
		&ListLike{},
		&MapLike{},
		&StructLike{},
		&UnionLike{},
	)
}
