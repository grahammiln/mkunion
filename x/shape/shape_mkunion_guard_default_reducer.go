// Code generated by mkunion. DO NOT EDIT.
package shape

var _ GuardReducer[any] = (*GuardDefaultReduction[any])(nil)

type (
	GuardDefaultReduction[A any] struct {
		PanicOnFallback      bool
		DefaultStopReduction bool
		OnRegexp             func(x *Regexp, agg A) (result A, stop bool)
		OnBetween            func(x *Between, agg A) (result A, stop bool)
		OnAndGuard           func(x *AndGuard, agg A) (result A, stop bool)
		OnOrGuard            func(x *OrGuard, agg A) (result A, stop bool)
	}
)

func (t *GuardDefaultReduction[A]) ReduceRegexp(x *Regexp, agg A) (result A, stop bool) {
	if t.OnRegexp != nil {
		return t.OnRegexp(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch")
	}
	return agg, t.DefaultStopReduction
}

func (t *GuardDefaultReduction[A]) ReduceBetween(x *Between, agg A) (result A, stop bool) {
	if t.OnBetween != nil {
		return t.OnBetween(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch")
	}
	return agg, t.DefaultStopReduction
}

func (t *GuardDefaultReduction[A]) ReduceAndGuard(x *AndGuard, agg A) (result A, stop bool) {
	if t.OnAndGuard != nil {
		return t.OnAndGuard(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch")
	}
	return agg, t.DefaultStopReduction
}

func (t *GuardDefaultReduction[A]) ReduceOrGuard(x *OrGuard, agg A) (result A, stop bool) {
	if t.OnOrGuard != nil {
		return t.OnOrGuard(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch")
	}
	return agg, t.DefaultStopReduction
}
