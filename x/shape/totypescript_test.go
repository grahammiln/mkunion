package shape

import (
	"github.com/stretchr/testify/assert"
	"os"
	"testing"
)

func TestTypeScriptSchemaGeneration(t *testing.T) {

	tsr := NewTypeScriptRenderer()
	tsr.AddUnion(&UnionLike{
		Name:          "Tree",
		PkgName:       "test",
		PkgImportName: "test",
		Variant: []*StructLike{
			{
				Name:          "Branch",
				PkgName:       "test",
				PkgImportName: "go.import.test",
				Fields: []*FieldLike{
					{
						Name: "L",
						Type: &RefName{
							Name:          "Tree",
							PkgName:       "test",
							PkgImportName: "go.import.test",
						},
					},
					{
						Name: "R",
						Type: &RefName{
							Name:          "Tree",
							PkgName:       "test",
							PkgImportName: "go.import.test",
						},
					},
				},
			},
			{
				Name:          "Leaf",
				PkgName:       "test",
				PkgImportName: "go.import.test",
				Fields: []*FieldLike{
					{
						Name: "Value",
						Type: &RefName{
							Name:          "Schema",
							PkgName:       "schema",
							PkgImportName: "github.com/widmogrod/mkunion/x/schema",
						},
					},
				},
			},
		},
	})

	tsr.AddStruct(&StructLike{
		Name:          "SomeStruct",
		PkgName:       "test",
		PkgImportName: "go.import.test",
		Fields:        nil,
	})

	err := tsr.WriteToDir("_test/")
	assert.NoError(t, err)

	assert.FileExists(t, "_test/test.ts")

	contents, err := os.ReadFile("_test/test.ts")
	assert.NoError(t, err)

	expected := `//generated by mkunion
export type Tree = {
	"test.Branch": Branch
} | {
	"test.Leaf": Leaf
}

export type Branch = {
	L?: Tree,
	R?: Tree,
}

export type Leaf = {
	Value?: schema.Schema,
}

export type SomeStruct = {
}

import * as schema from './github_com_widmogrod_mkunion_x_schema'
`

	assert.Equal(t, expected, string(contents))
}
