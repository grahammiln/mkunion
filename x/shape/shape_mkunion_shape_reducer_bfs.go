// Code generated by mkunion. DO NOT EDIT.
package shape

var _ ShapeVisitor = (*ShapeBreadthFirstVisitor[any])(nil)

type ShapeBreadthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce ShapeReducer[A]

	queue         []Shape
	visited       map[Shape]bool
	shouldExecute map[Shape]bool
}

func (d *ShapeBreadthFirstVisitor[A]) VisitAny(v *Any) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceAny(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *ShapeBreadthFirstVisitor[A]) VisitRefName(v *RefName) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceRefName(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *ShapeBreadthFirstVisitor[A]) VisitBooleanLike(v *BooleanLike) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceBooleanLike(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *ShapeBreadthFirstVisitor[A]) VisitStringLike(v *StringLike) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceStringLike(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *ShapeBreadthFirstVisitor[A]) VisitNumberLike(v *NumberLike) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceNumberLike(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *ShapeBreadthFirstVisitor[A]) VisitListLike(v *ListLike) any {
	d.queue = append(d.queue, v)
	d.queue = append(d.queue, v.Element)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceListLike(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *ShapeBreadthFirstVisitor[A]) VisitMapLike(v *MapLike) any {
	d.queue = append(d.queue, v)
	d.queue = append(d.queue, v.Key)
	d.queue = append(d.queue, v.Val)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceMapLike(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *ShapeBreadthFirstVisitor[A]) VisitStructLike(v *StructLike) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceStructLike(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *ShapeBreadthFirstVisitor[A]) VisitUnionLike(v *UnionLike) any {
	d.queue = append(d.queue, v)
	for idx := range v.Variant {
		d.queue = append(d.queue, v.Variant[idx])
	}

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceUnionLike(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *ShapeBreadthFirstVisitor[A]) execute() {
	for len(d.queue) > 0 {
		if d.stop {
			return
		}

		i := d.pop()
		if d.visited[i] {
			continue
		}
		d.visited[i] = true
		d.shouldExecute[i] = true
		i.AcceptShape(d)
	}

	return
}

func (d *ShapeBreadthFirstVisitor[A]) pop() Shape {
	i := d.queue[0]
	d.queue = d.queue[1:]
	return i
}

func ReduceShapeBreadthFirst[A any](r ShapeReducer[A], v Shape, init A) A {
	reducer := &ShapeBreadthFirstVisitor[A]{
		result:        init,
		reduce:        r,
		queue:         []Shape{v},
		visited:       make(map[Shape]bool),
		shouldExecute: make(map[Shape]bool),
	}

	_ = v.AcceptShape(reducer)

	return reducer.result
}
