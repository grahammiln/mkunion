// Code generated by mkunion. DO NOT EDIT.
package shape

var _ GuardVisitor = (*GuardBreadthFirstVisitor[any])(nil)

type GuardBreadthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce GuardReducer[A]

	queue         []Guard
	visited       map[Guard]bool
	shouldExecute map[Guard]bool
}

func (d *GuardBreadthFirstVisitor[A]) VisitRegexp(v *Regexp) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceRegexp(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *GuardBreadthFirstVisitor[A]) VisitBetween(v *Between) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceBetween(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *GuardBreadthFirstVisitor[A]) VisitAndGuard(v *AndGuard) any {
	d.queue = append(d.queue, v)
	for idx := range v.L {
		d.queue = append(d.queue, v.L[idx])
	}

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceAndGuard(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *GuardBreadthFirstVisitor[A]) VisitOrGuard(v *OrGuard) any {
	d.queue = append(d.queue, v)
	for idx := range v.L {
		d.queue = append(d.queue, v.L[idx])
	}

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceOrGuard(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *GuardBreadthFirstVisitor[A]) execute() {
	for len(d.queue) > 0 {
		if d.stop {
			return
		}

		i := d.pop()
		if d.visited[i] {
			continue
		}
		d.visited[i] = true
		d.shouldExecute[i] = true
		i.AcceptGuard(d)
	}

	return
}

func (d *GuardBreadthFirstVisitor[A]) pop() Guard {
	i := d.queue[0]
	d.queue = d.queue[1:]
	return i
}

func ReduceGuardBreadthFirst[A any](r GuardReducer[A], v Guard, init A) A {
	reducer := &GuardBreadthFirstVisitor[A]{
		result:        init,
		reduce:        r,
		queue:         []Guard{v},
		visited:       make(map[Guard]bool),
		shouldExecute: make(map[Guard]bool),
	}

	_ = v.AcceptGuard(reducer)

	return reducer.result
}
