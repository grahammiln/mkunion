// Code generated by mkunion. DO NOT EDIT.
package shape

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

func init() {
	Register(ShapeShape())
	Register(AnyShape())
	Register(RefNameShape())
	Register(PointerLikeShape())
	Register(AliasLikeShape())
	Register(PrimitiveLikeShape())
	Register(ListLikeShape())
	Register(MapLikeShape())
	Register(StructLikeShape())
	Register(UnionLikeShape())
	Register(PrimitiveKindShape())
	Register(BooleanLikeShape())
	Register(StringLikeShape())
	Register(NumberLikeShape())
	Register(NumberKindShape())
	Register(UInt8Shape())
	Register(UInt16Shape())
	Register(UInt32Shape())
	Register(UInt64Shape())
	Register(Int8Shape())
	Register(Int16Shape())
	Register(Int32Shape())
	Register(Int64Shape())
	Register(Float32Shape())
	Register(Float64Shape())
	Register(GuardShape())
	Register(EnumShape())
	Register(RequiredShape())
	Register(AndGuardShape())
}

type ShapeVisitor interface {
	VisitAny(v *Any) any
	VisitRefName(v *RefName) any
	VisitPointerLike(v *PointerLike) any
	VisitAliasLike(v *AliasLike) any
	VisitPrimitiveLike(v *PrimitiveLike) any
	VisitListLike(v *ListLike) any
	VisitMapLike(v *MapLike) any
	VisitStructLike(v *StructLike) any
	VisitUnionLike(v *UnionLike) any
}

type Shape interface {
	AcceptShape(g ShapeVisitor) any
}

var (
	_ Shape = (*Any)(nil)
	_ Shape = (*RefName)(nil)
	_ Shape = (*PointerLike)(nil)
	_ Shape = (*AliasLike)(nil)
	_ Shape = (*PrimitiveLike)(nil)
	_ Shape = (*ListLike)(nil)
	_ Shape = (*MapLike)(nil)
	_ Shape = (*StructLike)(nil)
	_ Shape = (*UnionLike)(nil)
)

func (r *Any) AcceptShape(v ShapeVisitor) any           { return v.VisitAny(r) }
func (r *RefName) AcceptShape(v ShapeVisitor) any       { return v.VisitRefName(r) }
func (r *PointerLike) AcceptShape(v ShapeVisitor) any   { return v.VisitPointerLike(r) }
func (r *AliasLike) AcceptShape(v ShapeVisitor) any     { return v.VisitAliasLike(r) }
func (r *PrimitiveLike) AcceptShape(v ShapeVisitor) any { return v.VisitPrimitiveLike(r) }
func (r *ListLike) AcceptShape(v ShapeVisitor) any      { return v.VisitListLike(r) }
func (r *MapLike) AcceptShape(v ShapeVisitor) any       { return v.VisitMapLike(r) }
func (r *StructLike) AcceptShape(v ShapeVisitor) any    { return v.VisitStructLike(r) }
func (r *UnionLike) AcceptShape(v ShapeVisitor) any     { return v.VisitUnionLike(r) }

func MatchShapeR3[T0, T1, T2 any](
	x Shape,
	f1 func(x *Any) (T0, T1, T2),
	f2 func(x *RefName) (T0, T1, T2),
	f3 func(x *PointerLike) (T0, T1, T2),
	f4 func(x *AliasLike) (T0, T1, T2),
	f5 func(x *PrimitiveLike) (T0, T1, T2),
	f6 func(x *ListLike) (T0, T1, T2),
	f7 func(x *MapLike) (T0, T1, T2),
	f8 func(x *StructLike) (T0, T1, T2),
	f9 func(x *UnionLike) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Any:
		return f1(v)
	case *RefName:
		return f2(v)
	case *PointerLike:
		return f3(v)
	case *AliasLike:
		return f4(v)
	case *PrimitiveLike:
		return f5(v)
	case *ListLike:
		return f6(v)
	case *MapLike:
		return f7(v)
	case *StructLike:
		return f8(v)
	case *UnionLike:
		return f9(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchShapeR2[T0, T1 any](
	x Shape,
	f1 func(x *Any) (T0, T1),
	f2 func(x *RefName) (T0, T1),
	f3 func(x *PointerLike) (T0, T1),
	f4 func(x *AliasLike) (T0, T1),
	f5 func(x *PrimitiveLike) (T0, T1),
	f6 func(x *ListLike) (T0, T1),
	f7 func(x *MapLike) (T0, T1),
	f8 func(x *StructLike) (T0, T1),
	f9 func(x *UnionLike) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Any:
		return f1(v)
	case *RefName:
		return f2(v)
	case *PointerLike:
		return f3(v)
	case *AliasLike:
		return f4(v)
	case *PrimitiveLike:
		return f5(v)
	case *ListLike:
		return f6(v)
	case *MapLike:
		return f7(v)
	case *StructLike:
		return f8(v)
	case *UnionLike:
		return f9(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchShapeR1[T0 any](
	x Shape,
	f1 func(x *Any) T0,
	f2 func(x *RefName) T0,
	f3 func(x *PointerLike) T0,
	f4 func(x *AliasLike) T0,
	f5 func(x *PrimitiveLike) T0,
	f6 func(x *ListLike) T0,
	f7 func(x *MapLike) T0,
	f8 func(x *StructLike) T0,
	f9 func(x *UnionLike) T0,
) T0 {
	switch v := x.(type) {
	case *Any:
		return f1(v)
	case *RefName:
		return f2(v)
	case *PointerLike:
		return f3(v)
	case *AliasLike:
		return f4(v)
	case *PrimitiveLike:
		return f5(v)
	case *ListLike:
		return f6(v)
	case *MapLike:
		return f7(v)
	case *StructLike:
		return f8(v)
	case *UnionLike:
		return f9(v)
	}
	var result1 T0
	return result1
}

func MatchShapeR0(
	x Shape,
	f1 func(x *Any),
	f2 func(x *RefName),
	f3 func(x *PointerLike),
	f4 func(x *AliasLike),
	f5 func(x *PrimitiveLike),
	f6 func(x *ListLike),
	f7 func(x *MapLike),
	f8 func(x *StructLike),
	f9 func(x *UnionLike),
) {
	switch v := x.(type) {
	case *Any:
		f1(v)
	case *RefName:
		f2(v)
	case *PointerLike:
		f3(v)
	case *AliasLike:
		f4(v)
	case *PrimitiveLike:
		f5(v)
	case *ListLike:
		f6(v)
	case *MapLike:
		f7(v)
	case *StructLike:
		f8(v)
	case *UnionLike:
		f9(v)
	}
}

func ShapeShape() Shape {
	return &UnionLike{
		Name:          "Shape",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Variant: []Shape{
			AnyShape(),
			RefNameShape(),
			PointerLikeShape(),
			AliasLikeShape(),
			PrimitiveLikeShape(),
			ListLikeShape(),
			MapLikeShape(),
			StructLikeShape(),
			UnionLikeShape(),
		},
	}
}

func AnyShape() Shape {
	return &StructLike{
		Name:          "Any",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func RefNameShape() Shape {
	return &StructLike{
		Name:          "RefName",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Name",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgImportName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "IsPointer",
				Type: &PrimitiveLike{Kind: &BooleanLike{}},
			},
			{
				Name: "Indexed",
				Type: &ListLike{
					Element: &RefName{
						Name:          "Shape",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
		},
	}
}

func PointerLikeShape() Shape {
	return &StructLike{
		Name:          "PointerLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Type",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
		},
	}
}

func AliasLikeShape() Shape {
	return &StructLike{
		Name:          "AliasLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Name",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgImportName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "IsAlias",
				Type: &PrimitiveLike{Kind: &BooleanLike{}},
			},
			{
				Name: "Type",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
			{
				Name: "Tags",
				Type: &MapLike{
					Key: &PrimitiveLike{Kind: &StringLike{}},
					Val: &RefName{
						Name:          "Tag",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
		},
	}
}

func PrimitiveLikeShape() Shape {
	return &StructLike{
		Name:          "PrimitiveLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Kind",
				Type: &RefName{
					Name:          "PrimitiveKind",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
		},
	}
}

func ListLikeShape() Shape {
	return &StructLike{
		Name:          "ListLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Element",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
			{
				Name: "ElementIsPointer",
				Type: &PrimitiveLike{Kind: &BooleanLike{}},
			},
			{
				Name: "ArrayLen",
				Type: &PrimitiveLike{
					Kind: &NumberLike{},
				},
			},
		},
	}
}

func MapLikeShape() Shape {
	return &StructLike{
		Name:          "MapLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Key",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
			{
				Name: "Val",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
			{
				Name: "KeyIsPointer",
				Type: &PrimitiveLike{Kind: &BooleanLike{}},
			},
			{
				Name: "ValIsPointer",
				Type: &PrimitiveLike{Kind: &BooleanLike{}},
			},
		},
	}
}

func StructLikeShape() Shape {
	return &StructLike{
		Name:          "StructLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Name",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgImportName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "TypeParams",
				Type: &ListLike{
					Element: &RefName{
						Name:          "TypeParam",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
			{
				Name: "Fields",
				Type: &ListLike{
					Element: &RefName{
						Name:          "FieldLike",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
			{
				Name: "Tags",
				Type: &MapLike{
					Key: &PrimitiveLike{Kind: &StringLike{}},
					Val: &RefName{
						Name:          "Tag",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
			{
				Name: "IsPointer",
				Type: &PrimitiveLike{Kind: &BooleanLike{}},
			},
		},
	}
}

func UnionLikeShape() Shape {
	return &StructLike{
		Name:          "UnionLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Name",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgImportName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "Variant",
				Type: &ListLike{
					Element: &RefName{
						Name:          "Shape",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
			{
				Name: "Tags",
				Type: &MapLike{
					Key: &PrimitiveLike{Kind: &StringLike{}},
					Val: &RefName{
						Name:          "Tag",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
		},
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/Shape", ShapeFromJSON, ShapeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/Any", AnyFromJSON, AnyToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/RefName", RefNameFromJSON, RefNameToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/PointerLike", PointerLikeFromJSON, PointerLikeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/AliasLike", AliasLikeFromJSON, AliasLikeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/PrimitiveLike", PrimitiveLikeFromJSON, PrimitiveLikeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/ListLike", ListLikeFromJSON, ListLikeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/MapLike", MapLikeFromJSON, MapLikeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/StructLike", StructLikeFromJSON, StructLikeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/UnionLike", UnionLikeFromJSON, UnionLikeToJSON)
}

type ShapeUnionJSON struct {
	Type          string          `json:"$type,omitempty"`
	Any           json.RawMessage `json:"Any,omitempty"`
	RefName       json.RawMessage `json:"RefName,omitempty"`
	PointerLike   json.RawMessage `json:"PointerLike,omitempty"`
	AliasLike     json.RawMessage `json:"AliasLike,omitempty"`
	PrimitiveLike json.RawMessage `json:"PrimitiveLike,omitempty"`
	ListLike      json.RawMessage `json:"ListLike,omitempty"`
	MapLike       json.RawMessage `json:"MapLike,omitempty"`
	StructLike    json.RawMessage `json:"StructLike,omitempty"`
	UnionLike     json.RawMessage `json:"UnionLike,omitempty"`
}

func ShapeFromJSON(x []byte) (Shape, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}

	var data ShapeUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "Any":
		return AnyFromJSON(data.Any)
	case "RefName":
		return RefNameFromJSON(data.RefName)
	case "PointerLike":
		return PointerLikeFromJSON(data.PointerLike)
	case "AliasLike":
		return AliasLikeFromJSON(data.AliasLike)
	case "PrimitiveLike":
		return PrimitiveLikeFromJSON(data.PrimitiveLike)
	case "ListLike":
		return ListLikeFromJSON(data.ListLike)
	case "MapLike":
		return MapLikeFromJSON(data.MapLike)
	case "StructLike":
		return StructLikeFromJSON(data.StructLike)
	case "UnionLike":
		return UnionLikeFromJSON(data.UnionLike)
	}

	if data.Any != nil {
		return AnyFromJSON(data.Any)
	} else if data.RefName != nil {
		return RefNameFromJSON(data.RefName)
	} else if data.PointerLike != nil {
		return PointerLikeFromJSON(data.PointerLike)
	} else if data.AliasLike != nil {
		return AliasLikeFromJSON(data.AliasLike)
	} else if data.PrimitiveLike != nil {
		return PrimitiveLikeFromJSON(data.PrimitiveLike)
	} else if data.ListLike != nil {
		return ListLikeFromJSON(data.ListLike)
	} else if data.MapLike != nil {
		return MapLikeFromJSON(data.MapLike)
	} else if data.StructLike != nil {
		return StructLikeFromJSON(data.StructLike)
	} else if data.UnionLike != nil {
		return UnionLikeFromJSON(data.UnionLike)
	}

	return nil, fmt.Errorf("Shape: unknown type %s", data.Type)
}

func ShapeToJSON(x Shape) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MatchShapeR2(
		x,
		func(x *Any) ([]byte, error) {
			body, err := AnyToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(ShapeUnionJSON{
				Type: "Any",
				Any:  body,
			})
		},
		func(x *RefName) ([]byte, error) {
			body, err := RefNameToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(ShapeUnionJSON{
				Type:    "RefName",
				RefName: body,
			})
		},
		func(x *PointerLike) ([]byte, error) {
			body, err := PointerLikeToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(ShapeUnionJSON{
				Type:        "PointerLike",
				PointerLike: body,
			})
		},
		func(x *AliasLike) ([]byte, error) {
			body, err := AliasLikeToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(ShapeUnionJSON{
				Type:      "AliasLike",
				AliasLike: body,
			})
		},
		func(x *PrimitiveLike) ([]byte, error) {
			body, err := PrimitiveLikeToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(ShapeUnionJSON{
				Type:          "PrimitiveLike",
				PrimitiveLike: body,
			})
		},
		func(x *ListLike) ([]byte, error) {
			body, err := ListLikeToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(ShapeUnionJSON{
				Type:     "ListLike",
				ListLike: body,
			})
		},
		func(x *MapLike) ([]byte, error) {
			body, err := MapLikeToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(ShapeUnionJSON{
				Type:    "MapLike",
				MapLike: body,
			})
		},
		func(x *StructLike) ([]byte, error) {
			body, err := StructLikeToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(ShapeUnionJSON{
				Type:       "StructLike",
				StructLike: body,
			})
		},
		func(x *UnionLike) ([]byte, error) {
			body, err := UnionLikeToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(ShapeUnionJSON{
				Type:      "UnionLike",
				UnionLike: body,
			})
		},
	)
}

func AnyFromJSON(x []byte) (*Any, error) {
	result := new(Any)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func AnyToJSON(x *Any) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Any)(nil)
	_ json.Marshaler   = (*Any)(nil)
)

func (r *Any) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONAny(*r)
}
func (r *Any) _marshalJSONAny(x Any) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: Any._marshalJSONAny: struct; %w", err)
	}
	return result, nil
}
func (r *Any) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONAny(data)
	if err != nil {
		return fmt.Errorf("shape: Any.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Any) _unmarshalJSONAny(data []byte) (Any, error) {
	result := Any{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: Any._unmarshalJSONAny: native struct unwrap; %w", err)
	}
	return result, nil
}

func RefNameFromJSON(x []byte) (*RefName, error) {
	result := new(RefName)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func RefNameToJSON(x *RefName) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*RefName)(nil)
	_ json.Marshaler   = (*RefName)(nil)
)

func (r *RefName) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONRefName(*r)
}
func (r *RefName) _marshalJSONRefName(x RefName) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldName []byte
	fieldName, err = r._marshalJSONstring(x.Name)
	if err != nil {
		return nil, fmt.Errorf("shape: RefName._marshalJSONRefName: field name Name; %w", err)
	}
	partial["Name"] = fieldName
	var fieldPkgName []byte
	fieldPkgName, err = r._marshalJSONstring(x.PkgName)
	if err != nil {
		return nil, fmt.Errorf("shape: RefName._marshalJSONRefName: field name PkgName; %w", err)
	}
	partial["PkgName"] = fieldPkgName
	var fieldPkgImportName []byte
	fieldPkgImportName, err = r._marshalJSONstring(x.PkgImportName)
	if err != nil {
		return nil, fmt.Errorf("shape: RefName._marshalJSONRefName: field name PkgImportName; %w", err)
	}
	partial["PkgImportName"] = fieldPkgImportName

	var fieldIndexed []byte
	fieldIndexed, err = r._marshalJSONSliceShape(x.Indexed)
	if err != nil {
		return nil, fmt.Errorf("shape: RefName._marshalJSONRefName: field name Indexed; %w", err)
	}
	partial["Indexed"] = fieldIndexed
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: RefName._marshalJSONRefName: struct; %w", err)
	}
	return result, nil
}
func (r *RefName) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: RefName._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *RefName) _marshalJSONbool(x bool) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: RefName._marshalJSONbool:; %w", err)
	}
	return result, nil
}
func (r *RefName) _marshalJSONSliceShape(x []Shape) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONShape(v)
		if err != nil {
			return nil, fmt.Errorf("shape: RefName._marshalJSONSliceShape: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: RefName._marshalJSONSliceShape:; %w", err)
	}
	return result, nil
}
func (r *RefName) _marshalJSONShape(x Shape) ([]byte, error) {
	result, err := shared.JSONMarshal[Shape](x)
	if err != nil {
		return nil, fmt.Errorf("shape: RefName._marshalJSONShape:; %w", err)
	}
	return result, nil
}
func (r *RefName) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONRefName(data)
	if err != nil {
		return fmt.Errorf("shape: RefName.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *RefName) _unmarshalJSONRefName(data []byte) (RefName, error) {
	result := RefName{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: RefName._unmarshalJSONRefName: native struct unwrap; %w", err)
	}
	if fieldName, ok := partial["Name"]; ok {
		result.Name, err = r._unmarshalJSONstring(fieldName)
		if err != nil {
			return result, fmt.Errorf("shape: RefName._unmarshalJSONRefName: field Name; %w", err)
		}
	}
	if fieldPkgName, ok := partial["PkgName"]; ok {
		result.PkgName, err = r._unmarshalJSONstring(fieldPkgName)
		if err != nil {
			return result, fmt.Errorf("shape: RefName._unmarshalJSONRefName: field PkgName; %w", err)
		}
	}
	if fieldPkgImportName, ok := partial["PkgImportName"]; ok {
		result.PkgImportName, err = r._unmarshalJSONstring(fieldPkgImportName)
		if err != nil {
			return result, fmt.Errorf("shape: RefName._unmarshalJSONRefName: field PkgImportName; %w", err)
		}
	}

	if fieldIndexed, ok := partial["Indexed"]; ok {
		result.Indexed, err = r._unmarshalJSONSliceShape(fieldIndexed)
		if err != nil {
			return result, fmt.Errorf("shape: RefName._unmarshalJSONRefName: field Indexed; %w", err)
		}
	}
	return result, nil
}
func (r *RefName) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: RefName._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *RefName) _unmarshalJSONbool(data []byte) (bool, error) {
	var result bool
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: RefName._unmarshalJSONbool: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *RefName) _unmarshalJSONSliceShape(data []byte) ([]Shape, error) {
	result := make([]Shape, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: RefName._unmarshalJSONSliceShape: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONShape(v)
		if err != nil {
			return result, fmt.Errorf("shape: RefName._unmarshalJSONSliceShape: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *RefName) _unmarshalJSONShape(data []byte) (Shape, error) {
	result, err := shared.JSONUnmarshal[Shape](data)
	if err != nil {
		return result, fmt.Errorf("shape: RefName._unmarshalJSONShape: native ref unwrap; %w", err)
	}
	return result, nil
}

func PointerLikeFromJSON(x []byte) (*PointerLike, error) {
	result := new(PointerLike)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func PointerLikeToJSON(x *PointerLike) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*PointerLike)(nil)
	_ json.Marshaler   = (*PointerLike)(nil)
)

func (r *PointerLike) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONPointerLike(*r)
}
func (r *PointerLike) _marshalJSONPointerLike(x PointerLike) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldType []byte
	fieldType, err = r._marshalJSONShape(x.Type)
	if err != nil {
		return nil, fmt.Errorf("shape: PointerLike._marshalJSONPointerLike: field name Type; %w", err)
	}
	partial["Type"] = fieldType
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: PointerLike._marshalJSONPointerLike: struct; %w", err)
	}
	return result, nil
}
func (r *PointerLike) _marshalJSONShape(x Shape) ([]byte, error) {
	result, err := shared.JSONMarshal[Shape](x)
	if err != nil {
		return nil, fmt.Errorf("shape: PointerLike._marshalJSONShape:; %w", err)
	}
	return result, nil
}
func (r *PointerLike) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONPointerLike(data)
	if err != nil {
		return fmt.Errorf("shape: PointerLike.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *PointerLike) _unmarshalJSONPointerLike(data []byte) (PointerLike, error) {
	result := PointerLike{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: PointerLike._unmarshalJSONPointerLike: native struct unwrap; %w", err)
	}
	if fieldType, ok := partial["Type"]; ok {
		result.Type, err = r._unmarshalJSONShape(fieldType)
		if err != nil {
			return result, fmt.Errorf("shape: PointerLike._unmarshalJSONPointerLike: field Type; %w", err)
		}
	}
	return result, nil
}
func (r *PointerLike) _unmarshalJSONShape(data []byte) (Shape, error) {
	result, err := shared.JSONUnmarshal[Shape](data)
	if err != nil {
		return result, fmt.Errorf("shape: PointerLike._unmarshalJSONShape: native ref unwrap; %w", err)
	}
	return result, nil
}

func AliasLikeFromJSON(x []byte) (*AliasLike, error) {
	result := new(AliasLike)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func AliasLikeToJSON(x *AliasLike) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*AliasLike)(nil)
	_ json.Marshaler   = (*AliasLike)(nil)
)

func (r *AliasLike) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONAliasLike(*r)
}
func (r *AliasLike) _marshalJSONAliasLike(x AliasLike) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldName []byte
	fieldName, err = r._marshalJSONstring(x.Name)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONAliasLike: field name Name; %w", err)
	}
	partial["Name"] = fieldName
	var fieldPkgName []byte
	fieldPkgName, err = r._marshalJSONstring(x.PkgName)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONAliasLike: field name PkgName; %w", err)
	}
	partial["PkgName"] = fieldPkgName
	var fieldPkgImportName []byte
	fieldPkgImportName, err = r._marshalJSONstring(x.PkgImportName)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONAliasLike: field name PkgImportName; %w", err)
	}
	partial["PkgImportName"] = fieldPkgImportName
	var fieldIsAlias []byte
	fieldIsAlias, err = r._marshalJSONbool(x.IsAlias)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONAliasLike: field name IsAlias; %w", err)
	}
	partial["IsAlias"] = fieldIsAlias
	var fieldType []byte
	fieldType, err = r._marshalJSONShape(x.Type)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONAliasLike: field name Type; %w", err)
	}
	partial["Type"] = fieldType
	var fieldTags []byte
	fieldTags, err = r._marshalJSONmapLb_string_bLTag(x.Tags)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONAliasLike: field name Tags; %w", err)
	}
	partial["Tags"] = fieldTags
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONAliasLike: struct; %w", err)
	}
	return result, nil
}
func (r *AliasLike) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *AliasLike) _marshalJSONbool(x bool) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONbool:; %w", err)
	}
	return result, nil
}
func (r *AliasLike) _marshalJSONShape(x Shape) ([]byte, error) {
	result, err := shared.JSONMarshal[Shape](x)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONShape:; %w", err)
	}
	return result, nil
}
func (r *AliasLike) _marshalJSONmapLb_string_bLTag(x map[string]Tag) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	for k, v := range x {
		key := string(k)
		value, err := r._marshalJSONTag(v)
		if err != nil {
			return nil, fmt.Errorf("shape: AliasLike._marshalJSONmapLb_string_bLTag: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONmapLb_string_bLTag:; %w", err)
	}
	return result, nil
}
func (r *AliasLike) _marshalJSONTag(x Tag) ([]byte, error) {
	result, err := shared.JSONMarshal[Tag](x)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._marshalJSONTag:; %w", err)
	}
	return result, nil
}
func (r *AliasLike) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONAliasLike(data)
	if err != nil {
		return fmt.Errorf("shape: AliasLike.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *AliasLike) _unmarshalJSONAliasLike(data []byte) (AliasLike, error) {
	result := AliasLike{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: AliasLike._unmarshalJSONAliasLike: native struct unwrap; %w", err)
	}
	if fieldName, ok := partial["Name"]; ok {
		result.Name, err = r._unmarshalJSONstring(fieldName)
		if err != nil {
			return result, fmt.Errorf("shape: AliasLike._unmarshalJSONAliasLike: field Name; %w", err)
		}
	}
	if fieldPkgName, ok := partial["PkgName"]; ok {
		result.PkgName, err = r._unmarshalJSONstring(fieldPkgName)
		if err != nil {
			return result, fmt.Errorf("shape: AliasLike._unmarshalJSONAliasLike: field PkgName; %w", err)
		}
	}
	if fieldPkgImportName, ok := partial["PkgImportName"]; ok {
		result.PkgImportName, err = r._unmarshalJSONstring(fieldPkgImportName)
		if err != nil {
			return result, fmt.Errorf("shape: AliasLike._unmarshalJSONAliasLike: field PkgImportName; %w", err)
		}
	}
	if fieldIsAlias, ok := partial["IsAlias"]; ok {
		result.IsAlias, err = r._unmarshalJSONbool(fieldIsAlias)
		if err != nil {
			return result, fmt.Errorf("shape: AliasLike._unmarshalJSONAliasLike: field IsAlias; %w", err)
		}
	}
	if fieldType, ok := partial["Type"]; ok {
		result.Type, err = r._unmarshalJSONShape(fieldType)
		if err != nil {
			return result, fmt.Errorf("shape: AliasLike._unmarshalJSONAliasLike: field Type; %w", err)
		}
	}
	if fieldTags, ok := partial["Tags"]; ok {
		result.Tags, err = r._unmarshalJSONmapLb_string_bLTag(fieldTags)
		if err != nil {
			return result, fmt.Errorf("shape: AliasLike._unmarshalJSONAliasLike: field Tags; %w", err)
		}
	}
	return result, nil
}
func (r *AliasLike) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: AliasLike._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *AliasLike) _unmarshalJSONbool(data []byte) (bool, error) {
	var result bool
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: AliasLike._unmarshalJSONbool: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *AliasLike) _unmarshalJSONShape(data []byte) (Shape, error) {
	result, err := shared.JSONUnmarshal[Shape](data)
	if err != nil {
		return result, fmt.Errorf("shape: AliasLike._unmarshalJSONShape: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *AliasLike) _unmarshalJSONmapLb_string_bLTag(data []byte) (map[string]Tag, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("shape: AliasLike._unmarshalJSONmapLb_string_bLTag: native map unwrap; %w", err)
	}
	result := make(map[string]Tag)
	for k, v := range partial {
		key := string(k)
		value, err := r._unmarshalJSONTag(v)
		if err != nil {
			return nil, fmt.Errorf("shape: AliasLike._unmarshalJSONmapLb_string_bLTag: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *AliasLike) _unmarshalJSONTag(data []byte) (Tag, error) {
	result, err := shared.JSONUnmarshal[Tag](data)
	if err != nil {
		return result, fmt.Errorf("shape: AliasLike._unmarshalJSONTag: native ref unwrap; %w", err)
	}
	return result, nil
}

func PrimitiveLikeFromJSON(x []byte) (*PrimitiveLike, error) {
	result := new(PrimitiveLike)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func PrimitiveLikeToJSON(x *PrimitiveLike) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*PrimitiveLike)(nil)
	_ json.Marshaler   = (*PrimitiveLike)(nil)
)

func (r *PrimitiveLike) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONPrimitiveLike(*r)
}
func (r *PrimitiveLike) _marshalJSONPrimitiveLike(x PrimitiveLike) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldKind []byte
	fieldKind, err = r._marshalJSONPrimitiveKind(x.Kind)
	if err != nil {
		return nil, fmt.Errorf("shape: PrimitiveLike._marshalJSONPrimitiveLike: field name Kind; %w", err)
	}
	partial["Kind"] = fieldKind
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: PrimitiveLike._marshalJSONPrimitiveLike: struct; %w", err)
	}
	return result, nil
}
func (r *PrimitiveLike) _marshalJSONPrimitiveKind(x PrimitiveKind) ([]byte, error) {
	result, err := shared.JSONMarshal[PrimitiveKind](x)
	if err != nil {
		return nil, fmt.Errorf("shape: PrimitiveLike._marshalJSONPrimitiveKind:; %w", err)
	}
	return result, nil
}
func (r *PrimitiveLike) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONPrimitiveLike(data)
	if err != nil {
		return fmt.Errorf("shape: PrimitiveLike.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *PrimitiveLike) _unmarshalJSONPrimitiveLike(data []byte) (PrimitiveLike, error) {
	result := PrimitiveLike{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: PrimitiveLike._unmarshalJSONPrimitiveLike: native struct unwrap; %w", err)
	}
	if fieldKind, ok := partial["Kind"]; ok {
		result.Kind, err = r._unmarshalJSONPrimitiveKind(fieldKind)
		if err != nil {
			return result, fmt.Errorf("shape: PrimitiveLike._unmarshalJSONPrimitiveLike: field Kind; %w", err)
		}
	}
	return result, nil
}
func (r *PrimitiveLike) _unmarshalJSONPrimitiveKind(data []byte) (PrimitiveKind, error) {
	result, err := shared.JSONUnmarshal[PrimitiveKind](data)
	if err != nil {
		return result, fmt.Errorf("shape: PrimitiveLike._unmarshalJSONPrimitiveKind: native ref unwrap; %w", err)
	}
	return result, nil
}

func ListLikeFromJSON(x []byte) (*ListLike, error) {
	result := new(ListLike)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func ListLikeToJSON(x *ListLike) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*ListLike)(nil)
	_ json.Marshaler   = (*ListLike)(nil)
)

func (r *ListLike) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONListLike(*r)
}
func (r *ListLike) _marshalJSONListLike(x ListLike) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldElement []byte
	fieldElement, err = r._marshalJSONShape(x.Element)
	if err != nil {
		return nil, fmt.Errorf("shape: ListLike._marshalJSONListLike: field name Element; %w", err)
	}
	partial["Element"] = fieldElement
	var fieldElementIsPointer []byte
	if err != nil {
		return nil, fmt.Errorf("shape: ListLike._marshalJSONListLike: field name ElementIsPointer; %w", err)
	}
	partial["ElementIsPointer"] = fieldElementIsPointer

	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: ListLike._marshalJSONListLike: struct; %w", err)
	}
	return result, nil
}
func (r *ListLike) _marshalJSONShape(x Shape) ([]byte, error) {
	result, err := shared.JSONMarshal[Shape](x)
	if err != nil {
		return nil, fmt.Errorf("shape: ListLike._marshalJSONShape:; %w", err)
	}
	return result, nil
}
func (r *ListLike) _marshalJSONbool(x bool) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: ListLike._marshalJSONbool:; %w", err)
	}
	return result, nil
}
func (r *ListLike) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: ListLike._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *ListLike) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONListLike(data)
	if err != nil {
		return fmt.Errorf("shape: ListLike.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ListLike) _unmarshalJSONListLike(data []byte) (ListLike, error) {
	result := ListLike{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: ListLike._unmarshalJSONListLike: native struct unwrap; %w", err)
	}
	if fieldElement, ok := partial["Element"]; ok {
		result.Element, err = r._unmarshalJSONShape(fieldElement)
		if err != nil {
			return result, fmt.Errorf("shape: ListLike._unmarshalJSONListLike: field Element; %w", err)
		}
	}
	return result, nil
}
func (r *ListLike) _unmarshalJSONShape(data []byte) (Shape, error) {
	result, err := shared.JSONUnmarshal[Shape](data)
	if err != nil {
		return result, fmt.Errorf("shape: ListLike._unmarshalJSONShape: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *ListLike) _unmarshalJSONbool(data []byte) (bool, error) {
	var result bool
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: ListLike._unmarshalJSONbool: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *ListLike) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: ListLike._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}

func MapLikeFromJSON(x []byte) (*MapLike, error) {
	result := new(MapLike)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func MapLikeToJSON(x *MapLike) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*MapLike)(nil)
	_ json.Marshaler   = (*MapLike)(nil)
)

func (r *MapLike) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONMapLike(*r)
}
func (r *MapLike) _marshalJSONMapLike(x MapLike) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldKey []byte
	fieldKey, err = r._marshalJSONShape(x.Key)
	if err != nil {
		return nil, fmt.Errorf("shape: MapLike._marshalJSONMapLike: field name Key; %w", err)
	}
	partial["Key"] = fieldKey
	var fieldVal []byte
	fieldVal, err = r._marshalJSONShape(x.Val)
	if err != nil {
		return nil, fmt.Errorf("shape: MapLike._marshalJSONMapLike: field name Val; %w", err)
	}
	partial["Val"] = fieldVal
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: MapLike._marshalJSONMapLike: struct; %w", err)
	}
	return result, nil
}
func (r *MapLike) _marshalJSONShape(x Shape) ([]byte, error) {
	result, err := shared.JSONMarshal[Shape](x)
	if err != nil {
		return nil, fmt.Errorf("shape: MapLike._marshalJSONShape:; %w", err)
	}
	return result, nil
}
func (r *MapLike) _marshalJSONbool(x bool) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: MapLike._marshalJSONbool:; %w", err)
	}
	return result, nil
}
func (r *MapLike) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONMapLike(data)
	if err != nil {
		return fmt.Errorf("shape: MapLike.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *MapLike) _unmarshalJSONMapLike(data []byte) (MapLike, error) {
	result := MapLike{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: MapLike._unmarshalJSONMapLike: native struct unwrap; %w", err)
	}
	if fieldKey, ok := partial["Key"]; ok {
		result.Key, err = r._unmarshalJSONShape(fieldKey)
		if err != nil {
			return result, fmt.Errorf("shape: MapLike._unmarshalJSONMapLike: field Key; %w", err)
		}
	}
	if fieldVal, ok := partial["Val"]; ok {
		result.Val, err = r._unmarshalJSONShape(fieldVal)
		if err != nil {
			return result, fmt.Errorf("shape: MapLike._unmarshalJSONMapLike: field Val; %w", err)
		}
	}
	return result, nil
}
func (r *MapLike) _unmarshalJSONShape(data []byte) (Shape, error) {
	result, err := shared.JSONUnmarshal[Shape](data)
	if err != nil {
		return result, fmt.Errorf("shape: MapLike._unmarshalJSONShape: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *MapLike) _unmarshalJSONbool(data []byte) (bool, error) {
	var result bool
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: MapLike._unmarshalJSONbool: native primitive unwrap; %w", err)
	}
	return result, nil
}

func StructLikeFromJSON(x []byte) (*StructLike, error) {
	result := new(StructLike)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func StructLikeToJSON(x *StructLike) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*StructLike)(nil)
	_ json.Marshaler   = (*StructLike)(nil)
)

func (r *StructLike) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONStructLike(*r)
}
func (r *StructLike) _marshalJSONStructLike(x StructLike) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldName []byte
	fieldName, err = r._marshalJSONstring(x.Name)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONStructLike: field name Name; %w", err)
	}
	partial["Name"] = fieldName
	var fieldPkgName []byte
	fieldPkgName, err = r._marshalJSONstring(x.PkgName)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONStructLike: field name PkgName; %w", err)
	}
	partial["PkgName"] = fieldPkgName
	var fieldPkgImportName []byte
	fieldPkgImportName, err = r._marshalJSONstring(x.PkgImportName)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONStructLike: field name PkgImportName; %w", err)
	}
	partial["PkgImportName"] = fieldPkgImportName
	var fieldTypeParams []byte
	fieldTypeParams, err = r._marshalJSONSliceTypeParam(x.TypeParams)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONStructLike: field name TypeParams; %w", err)
	}
	partial["TypeParams"] = fieldTypeParams
	var fieldFields []byte
	fieldFields, err = r._marshalJSONSlicePtrFieldLike(x.Fields)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONStructLike: field name Fields; %w", err)
	}
	partial["Fields"] = fieldFields
	var fieldTags []byte
	fieldTags, err = r._marshalJSONmapLb_string_bLTag(x.Tags)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONStructLike: field name Tags; %w", err)
	}
	partial["Tags"] = fieldTags
	var fieldIsPointer []byte

	partial["IsPointer"] = fieldIsPointer
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONStructLike: struct; %w", err)
	}
	return result, nil
}
func (r *StructLike) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *StructLike) _marshalJSONSliceTypeParam(x []TypeParam) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONTypeParam(v)
		if err != nil {
			return nil, fmt.Errorf("shape: StructLike._marshalJSONSliceTypeParam: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONSliceTypeParam:; %w", err)
	}
	return result, nil
}
func (r *StructLike) _marshalJSONTypeParam(x TypeParam) ([]byte, error) {
	result, err := shared.JSONMarshal[TypeParam](x)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONTypeParam:; %w", err)
	}
	return result, nil
}
func (r *StructLike) _marshalJSONSlicePtrFieldLike(x []*FieldLike) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONPtrFieldLike(v)
		if err != nil {
			return nil, fmt.Errorf("shape: StructLike._marshalJSONSlicePtrFieldLike: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONSlicePtrFieldLike:; %w", err)
	}
	return result, nil
}
func (r *StructLike) _marshalJSONPtrFieldLike(x *FieldLike) ([]byte, error) {
	result, err := shared.JSONMarshal[*FieldLike](x)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONPtrFieldLike:; %w", err)
	}
	return result, nil
}
func (r *StructLike) _marshalJSONmapLb_string_bLTag(x map[string]Tag) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	for k, v := range x {
		key := string(k)
		value, err := r._marshalJSONTag(v)
		if err != nil {
			return nil, fmt.Errorf("shape: StructLike._marshalJSONmapLb_string_bLTag: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONmapLb_string_bLTag:; %w", err)
	}
	return result, nil
}
func (r *StructLike) _marshalJSONTag(x Tag) ([]byte, error) {
	result, err := shared.JSONMarshal[Tag](x)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONTag:; %w", err)
	}
	return result, nil
}
func (r *StructLike) _marshalJSONbool(x bool) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._marshalJSONbool:; %w", err)
	}
	return result, nil
}
func (r *StructLike) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONStructLike(data)
	if err != nil {
		return fmt.Errorf("shape: StructLike.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *StructLike) _unmarshalJSONStructLike(data []byte) (StructLike, error) {
	result := StructLike{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: StructLike._unmarshalJSONStructLike: native struct unwrap; %w", err)
	}
	if fieldName, ok := partial["Name"]; ok {
		result.Name, err = r._unmarshalJSONstring(fieldName)
		if err != nil {
			return result, fmt.Errorf("shape: StructLike._unmarshalJSONStructLike: field Name; %w", err)
		}
	}
	if fieldPkgName, ok := partial["PkgName"]; ok {
		result.PkgName, err = r._unmarshalJSONstring(fieldPkgName)
		if err != nil {
			return result, fmt.Errorf("shape: StructLike._unmarshalJSONStructLike: field PkgName; %w", err)
		}
	}
	if fieldPkgImportName, ok := partial["PkgImportName"]; ok {
		result.PkgImportName, err = r._unmarshalJSONstring(fieldPkgImportName)
		if err != nil {
			return result, fmt.Errorf("shape: StructLike._unmarshalJSONStructLike: field PkgImportName; %w", err)
		}
	}
	if fieldTypeParams, ok := partial["TypeParams"]; ok {
		result.TypeParams, err = r._unmarshalJSONSliceTypeParam(fieldTypeParams)
		if err != nil {
			return result, fmt.Errorf("shape: StructLike._unmarshalJSONStructLike: field TypeParams; %w", err)
		}
	}
	if fieldFields, ok := partial["Fields"]; ok {
		result.Fields, err = r._unmarshalJSONSlicePtrFieldLike(fieldFields)
		if err != nil {
			return result, fmt.Errorf("shape: StructLike._unmarshalJSONStructLike: field Fields; %w", err)
		}
	}
	if fieldTags, ok := partial["Tags"]; ok {
		result.Tags, err = r._unmarshalJSONmapLb_string_bLTag(fieldTags)
		if err != nil {
			return result, fmt.Errorf("shape: StructLike._unmarshalJSONStructLike: field Tags; %w", err)
		}
	}

	return result, nil
}
func (r *StructLike) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: StructLike._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *StructLike) _unmarshalJSONSliceTypeParam(data []byte) ([]TypeParam, error) {
	result := make([]TypeParam, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: StructLike._unmarshalJSONSliceTypeParam: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONTypeParam(v)
		if err != nil {
			return result, fmt.Errorf("shape: StructLike._unmarshalJSONSliceTypeParam: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *StructLike) _unmarshalJSONTypeParam(data []byte) (TypeParam, error) {
	result, err := shared.JSONUnmarshal[TypeParam](data)
	if err != nil {
		return result, fmt.Errorf("shape: StructLike._unmarshalJSONTypeParam: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *StructLike) _unmarshalJSONSlicePtrFieldLike(data []byte) ([]*FieldLike, error) {
	result := make([]*FieldLike, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: StructLike._unmarshalJSONSlicePtrFieldLike: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONPtrFieldLike(v)
		if err != nil {
			return result, fmt.Errorf("shape: StructLike._unmarshalJSONSlicePtrFieldLike: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *StructLike) _unmarshalJSONPtrFieldLike(data []byte) (*FieldLike, error) {
	result, err := shared.JSONUnmarshal[*FieldLike](data)
	if err != nil {
		return result, fmt.Errorf("shape: StructLike._unmarshalJSONPtrFieldLike: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *StructLike) _unmarshalJSONmapLb_string_bLTag(data []byte) (map[string]Tag, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("shape: StructLike._unmarshalJSONmapLb_string_bLTag: native map unwrap; %w", err)
	}
	result := make(map[string]Tag)
	for k, v := range partial {
		key := string(k)
		value, err := r._unmarshalJSONTag(v)
		if err != nil {
			return nil, fmt.Errorf("shape: StructLike._unmarshalJSONmapLb_string_bLTag: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *StructLike) _unmarshalJSONTag(data []byte) (Tag, error) {
	result, err := shared.JSONUnmarshal[Tag](data)
	if err != nil {
		return result, fmt.Errorf("shape: StructLike._unmarshalJSONTag: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *StructLike) _unmarshalJSONbool(data []byte) (bool, error) {
	var result bool
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: StructLike._unmarshalJSONbool: native primitive unwrap; %w", err)
	}
	return result, nil
}

func UnionLikeFromJSON(x []byte) (*UnionLike, error) {
	result := new(UnionLike)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func UnionLikeToJSON(x *UnionLike) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*UnionLike)(nil)
	_ json.Marshaler   = (*UnionLike)(nil)
)

func (r *UnionLike) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONUnionLike(*r)
}
func (r *UnionLike) _marshalJSONUnionLike(x UnionLike) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldName []byte
	fieldName, err = r._marshalJSONstring(x.Name)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._marshalJSONUnionLike: field name Name; %w", err)
	}
	partial["Name"] = fieldName
	var fieldPkgName []byte
	fieldPkgName, err = r._marshalJSONstring(x.PkgName)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._marshalJSONUnionLike: field name PkgName; %w", err)
	}
	partial["PkgName"] = fieldPkgName
	var fieldPkgImportName []byte
	fieldPkgImportName, err = r._marshalJSONstring(x.PkgImportName)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._marshalJSONUnionLike: field name PkgImportName; %w", err)
	}
	partial["PkgImportName"] = fieldPkgImportName
	var fieldVariant []byte
	fieldVariant, err = r._marshalJSONSliceShape(x.Variant)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._marshalJSONUnionLike: field name Variant; %w", err)
	}
	partial["Variant"] = fieldVariant
	var fieldTags []byte
	fieldTags, err = r._marshalJSONmapLb_string_bLTag(x.Tags)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._marshalJSONUnionLike: field name Tags; %w", err)
	}
	partial["Tags"] = fieldTags
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._marshalJSONUnionLike: struct; %w", err)
	}
	return result, nil
}
func (r *UnionLike) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *UnionLike) _marshalJSONSliceShape(x []Shape) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONShape(v)
		if err != nil {
			return nil, fmt.Errorf("shape: UnionLike._marshalJSONSliceShape: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._marshalJSONSliceShape:; %w", err)
	}
	return result, nil
}
func (r *UnionLike) _marshalJSONShape(x Shape) ([]byte, error) {
	result, err := shared.JSONMarshal[Shape](x)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._marshalJSONShape:; %w", err)
	}
	return result, nil
}
func (r *UnionLike) _marshalJSONmapLb_string_bLTag(x map[string]Tag) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	for k, v := range x {
		key := string(k)
		value, err := r._marshalJSONTag(v)
		if err != nil {
			return nil, fmt.Errorf("shape: UnionLike._marshalJSONmapLb_string_bLTag: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._marshalJSONmapLb_string_bLTag:; %w", err)
	}
	return result, nil
}
func (r *UnionLike) _marshalJSONTag(x Tag) ([]byte, error) {
	result, err := shared.JSONMarshal[Tag](x)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._marshalJSONTag:; %w", err)
	}
	return result, nil
}
func (r *UnionLike) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONUnionLike(data)
	if err != nil {
		return fmt.Errorf("shape: UnionLike.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *UnionLike) _unmarshalJSONUnionLike(data []byte) (UnionLike, error) {
	result := UnionLike{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: UnionLike._unmarshalJSONUnionLike: native struct unwrap; %w", err)
	}
	if fieldName, ok := partial["Name"]; ok {
		result.Name, err = r._unmarshalJSONstring(fieldName)
		if err != nil {
			return result, fmt.Errorf("shape: UnionLike._unmarshalJSONUnionLike: field Name; %w", err)
		}
	}
	if fieldPkgName, ok := partial["PkgName"]; ok {
		result.PkgName, err = r._unmarshalJSONstring(fieldPkgName)
		if err != nil {
			return result, fmt.Errorf("shape: UnionLike._unmarshalJSONUnionLike: field PkgName; %w", err)
		}
	}
	if fieldPkgImportName, ok := partial["PkgImportName"]; ok {
		result.PkgImportName, err = r._unmarshalJSONstring(fieldPkgImportName)
		if err != nil {
			return result, fmt.Errorf("shape: UnionLike._unmarshalJSONUnionLike: field PkgImportName; %w", err)
		}
	}
	if fieldVariant, ok := partial["Variant"]; ok {
		result.Variant, err = r._unmarshalJSONSliceShape(fieldVariant)
		if err != nil {
			return result, fmt.Errorf("shape: UnionLike._unmarshalJSONUnionLike: field Variant; %w", err)
		}
	}
	if fieldTags, ok := partial["Tags"]; ok {
		result.Tags, err = r._unmarshalJSONmapLb_string_bLTag(fieldTags)
		if err != nil {
			return result, fmt.Errorf("shape: UnionLike._unmarshalJSONUnionLike: field Tags; %w", err)
		}
	}
	return result, nil
}
func (r *UnionLike) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: UnionLike._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *UnionLike) _unmarshalJSONSliceShape(data []byte) ([]Shape, error) {
	result := make([]Shape, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: UnionLike._unmarshalJSONSliceShape: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONShape(v)
		if err != nil {
			return result, fmt.Errorf("shape: UnionLike._unmarshalJSONSliceShape: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *UnionLike) _unmarshalJSONShape(data []byte) (Shape, error) {
	result, err := shared.JSONUnmarshal[Shape](data)
	if err != nil {
		return result, fmt.Errorf("shape: UnionLike._unmarshalJSONShape: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *UnionLike) _unmarshalJSONmapLb_string_bLTag(data []byte) (map[string]Tag, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("shape: UnionLike._unmarshalJSONmapLb_string_bLTag: native map unwrap; %w", err)
	}
	result := make(map[string]Tag)
	for k, v := range partial {
		key := string(k)
		value, err := r._unmarshalJSONTag(v)
		if err != nil {
			return nil, fmt.Errorf("shape: UnionLike._unmarshalJSONmapLb_string_bLTag: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *UnionLike) _unmarshalJSONTag(data []byte) (Tag, error) {
	result, err := shared.JSONUnmarshal[Tag](data)
	if err != nil {
		return result, fmt.Errorf("shape: UnionLike._unmarshalJSONTag: native ref unwrap; %w", err)
	}
	return result, nil
}

type PrimitiveKindVisitor interface {
	VisitBooleanLike(v *BooleanLike) any
	VisitStringLike(v *StringLike) any
	VisitNumberLike(v *NumberLike) any
}

type PrimitiveKind interface {
	AcceptPrimitiveKind(g PrimitiveKindVisitor) any
}

var (
	_ PrimitiveKind = (*BooleanLike)(nil)
	_ PrimitiveKind = (*StringLike)(nil)
	_ PrimitiveKind = (*NumberLike)(nil)
)

func (r *BooleanLike) AcceptPrimitiveKind(v PrimitiveKindVisitor) any { return v.VisitBooleanLike(r) }
func (r *StringLike) AcceptPrimitiveKind(v PrimitiveKindVisitor) any  { return v.VisitStringLike(r) }
func (r *NumberLike) AcceptPrimitiveKind(v PrimitiveKindVisitor) any  { return v.VisitNumberLike(r) }

func MatchPrimitiveKindR3[T0, T1, T2 any](
	x PrimitiveKind,
	f1 func(x *BooleanLike) (T0, T1, T2),
	f2 func(x *StringLike) (T0, T1, T2),
	f3 func(x *NumberLike) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *BooleanLike:
		return f1(v)
	case *StringLike:
		return f2(v)
	case *NumberLike:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchPrimitiveKindR2[T0, T1 any](
	x PrimitiveKind,
	f1 func(x *BooleanLike) (T0, T1),
	f2 func(x *StringLike) (T0, T1),
	f3 func(x *NumberLike) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *BooleanLike:
		return f1(v)
	case *StringLike:
		return f2(v)
	case *NumberLike:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchPrimitiveKindR1[T0 any](
	x PrimitiveKind,
	f1 func(x *BooleanLike) T0,
	f2 func(x *StringLike) T0,
	f3 func(x *NumberLike) T0,
) T0 {
	switch v := x.(type) {
	case *BooleanLike:
		return f1(v)
	case *StringLike:
		return f2(v)
	case *NumberLike:
		return f3(v)
	}
	var result1 T0
	return result1
}

func MatchPrimitiveKindR0(
	x PrimitiveKind,
	f1 func(x *BooleanLike),
	f2 func(x *StringLike),
	f3 func(x *NumberLike),
) {
	switch v := x.(type) {
	case *BooleanLike:
		f1(v)
	case *StringLike:
		f2(v)
	case *NumberLike:
		f3(v)
	}
}

func PrimitiveKindShape() Shape {
	return &UnionLike{
		Name:          "PrimitiveKind",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Variant: []Shape{
			BooleanLikeShape(),
			StringLikeShape(),
			NumberLikeShape(),
		},
	}
}

func BooleanLikeShape() Shape {
	return &StructLike{
		Name:          "BooleanLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func StringLikeShape() Shape {
	return &StructLike{
		Name:          "StringLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func NumberLikeShape() Shape {
	return &StructLike{
		Name:          "NumberLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Kind",
				Type: &RefName{
					Name:          "NumberKind",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
		},
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/PrimitiveKind", PrimitiveKindFromJSON, PrimitiveKindToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/BooleanLike", BooleanLikeFromJSON, BooleanLikeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/StringLike", StringLikeFromJSON, StringLikeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/NumberLike", NumberLikeFromJSON, NumberLikeToJSON)
}

type PrimitiveKindUnionJSON struct {
	Type        string          `json:"$type,omitempty"`
	BooleanLike json.RawMessage `json:"BooleanLike,omitempty"`
	StringLike  json.RawMessage `json:"StringLike,omitempty"`
	NumberLike  json.RawMessage `json:"NumberLike,omitempty"`
}

func PrimitiveKindFromJSON(x []byte) (PrimitiveKind, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}

	var data PrimitiveKindUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "BooleanLike":
		return BooleanLikeFromJSON(data.BooleanLike)
	case "StringLike":
		return StringLikeFromJSON(data.StringLike)
	case "NumberLike":
		return NumberLikeFromJSON(data.NumberLike)
	}

	if data.BooleanLike != nil {
		return BooleanLikeFromJSON(data.BooleanLike)
	} else if data.StringLike != nil {
		return StringLikeFromJSON(data.StringLike)
	} else if data.NumberLike != nil {
		return NumberLikeFromJSON(data.NumberLike)
	}

	return nil, fmt.Errorf("PrimitiveKind: unknown type %s", data.Type)
}

func PrimitiveKindToJSON(x PrimitiveKind) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MatchPrimitiveKindR2(
		x,
		func(x *BooleanLike) ([]byte, error) {
			body, err := BooleanLikeToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(PrimitiveKindUnionJSON{
				Type:        "BooleanLike",
				BooleanLike: body,
			})
		},
		func(x *StringLike) ([]byte, error) {
			body, err := StringLikeToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(PrimitiveKindUnionJSON{
				Type:       "StringLike",
				StringLike: body,
			})
		},
		func(x *NumberLike) ([]byte, error) {
			body, err := NumberLikeToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(PrimitiveKindUnionJSON{
				Type:       "NumberLike",
				NumberLike: body,
			})
		},
	)
}

func BooleanLikeFromJSON(x []byte) (*BooleanLike, error) {
	result := new(BooleanLike)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func BooleanLikeToJSON(x *BooleanLike) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*BooleanLike)(nil)
	_ json.Marshaler   = (*BooleanLike)(nil)
)

func (r *BooleanLike) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONBooleanLike(*r)
}
func (r *BooleanLike) _marshalJSONBooleanLike(x BooleanLike) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: BooleanLike._marshalJSONBooleanLike: struct; %w", err)
	}
	return result, nil
}
func (r *BooleanLike) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONBooleanLike(data)
	if err != nil {
		return fmt.Errorf("shape: BooleanLike.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *BooleanLike) _unmarshalJSONBooleanLike(data []byte) (BooleanLike, error) {
	result := BooleanLike{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: BooleanLike._unmarshalJSONBooleanLike: native struct unwrap; %w", err)
	}
	return result, nil
}

func StringLikeFromJSON(x []byte) (*StringLike, error) {
	result := new(StringLike)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func StringLikeToJSON(x *StringLike) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*StringLike)(nil)
	_ json.Marshaler   = (*StringLike)(nil)
)

func (r *StringLike) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONStringLike(*r)
}
func (r *StringLike) _marshalJSONStringLike(x StringLike) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: StringLike._marshalJSONStringLike: struct; %w", err)
	}
	return result, nil
}
func (r *StringLike) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONStringLike(data)
	if err != nil {
		return fmt.Errorf("shape: StringLike.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *StringLike) _unmarshalJSONStringLike(data []byte) (StringLike, error) {
	result := StringLike{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: StringLike._unmarshalJSONStringLike: native struct unwrap; %w", err)
	}
	return result, nil
}

func NumberLikeFromJSON(x []byte) (*NumberLike, error) {
	result := new(NumberLike)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func NumberLikeToJSON(x *NumberLike) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*NumberLike)(nil)
	_ json.Marshaler   = (*NumberLike)(nil)
)

func (r *NumberLike) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONNumberLike(*r)
}
func (r *NumberLike) _marshalJSONNumberLike(x NumberLike) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldKind []byte
	fieldKind, err = r._marshalJSONNumberKind(x.Kind)
	if err != nil {
		return nil, fmt.Errorf("shape: NumberLike._marshalJSONNumberLike: field name Kind; %w", err)
	}
	partial["Kind"] = fieldKind
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: NumberLike._marshalJSONNumberLike: struct; %w", err)
	}
	return result, nil
}
func (r *NumberLike) _marshalJSONNumberKind(x NumberKind) ([]byte, error) {
	result, err := shared.JSONMarshal[NumberKind](x)
	if err != nil {
		return nil, fmt.Errorf("shape: NumberLike._marshalJSONNumberKind:; %w", err)
	}
	return result, nil
}
func (r *NumberLike) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONNumberLike(data)
	if err != nil {
		return fmt.Errorf("shape: NumberLike.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *NumberLike) _unmarshalJSONNumberLike(data []byte) (NumberLike, error) {
	result := NumberLike{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: NumberLike._unmarshalJSONNumberLike: native struct unwrap; %w", err)
	}
	if fieldKind, ok := partial["Kind"]; ok {
		result.Kind, err = r._unmarshalJSONNumberKind(fieldKind)
		if err != nil {
			return result, fmt.Errorf("shape: NumberLike._unmarshalJSONNumberLike: field Kind; %w", err)
		}
	}
	return result, nil
}
func (r *NumberLike) _unmarshalJSONNumberKind(data []byte) (NumberKind, error) {
	result, err := shared.JSONUnmarshal[NumberKind](data)
	if err != nil {
		return result, fmt.Errorf("shape: NumberLike._unmarshalJSONNumberKind: native ref unwrap; %w", err)
	}
	return result, nil
}

type NumberKindVisitor interface {
	VisitUInt8(v *UInt8) any
	VisitUInt16(v *UInt16) any
	VisitUInt32(v *UInt32) any
	VisitUInt64(v *UInt64) any
	VisitInt8(v *Int8) any
	VisitInt16(v *Int16) any
	VisitInt32(v *Int32) any
	VisitInt64(v *Int64) any
	VisitFloat32(v *Float32) any
	VisitFloat64(v *Float64) any
}

type NumberKind interface {
	AcceptNumberKind(g NumberKindVisitor) any
}

var (
	_ NumberKind = (*UInt8)(nil)
	_ NumberKind = (*UInt16)(nil)
	_ NumberKind = (*UInt32)(nil)
	_ NumberKind = (*UInt64)(nil)
	_ NumberKind = (*Int8)(nil)
	_ NumberKind = (*Int16)(nil)
	_ NumberKind = (*Int32)(nil)
	_ NumberKind = (*Int64)(nil)
	_ NumberKind = (*Float32)(nil)
	_ NumberKind = (*Float64)(nil)
)

func (r *UInt8) AcceptNumberKind(v NumberKindVisitor) any   { return v.VisitUInt8(r) }
func (r *UInt16) AcceptNumberKind(v NumberKindVisitor) any  { return v.VisitUInt16(r) }
func (r *UInt32) AcceptNumberKind(v NumberKindVisitor) any  { return v.VisitUInt32(r) }
func (r *UInt64) AcceptNumberKind(v NumberKindVisitor) any  { return v.VisitUInt64(r) }
func (r *Int8) AcceptNumberKind(v NumberKindVisitor) any    { return v.VisitInt8(r) }
func (r *Int16) AcceptNumberKind(v NumberKindVisitor) any   { return v.VisitInt16(r) }
func (r *Int32) AcceptNumberKind(v NumberKindVisitor) any   { return v.VisitInt32(r) }
func (r *Int64) AcceptNumberKind(v NumberKindVisitor) any   { return v.VisitInt64(r) }
func (r *Float32) AcceptNumberKind(v NumberKindVisitor) any { return v.VisitFloat32(r) }
func (r *Float64) AcceptNumberKind(v NumberKindVisitor) any { return v.VisitFloat64(r) }

func MatchNumberKindR3[T0, T1, T2 any](
	x NumberKind,
	f1 func(x *UInt8) (T0, T1, T2),
	f2 func(x *UInt16) (T0, T1, T2),
	f3 func(x *UInt32) (T0, T1, T2),
	f4 func(x *UInt64) (T0, T1, T2),
	f5 func(x *Int8) (T0, T1, T2),
	f6 func(x *Int16) (T0, T1, T2),
	f7 func(x *Int32) (T0, T1, T2),
	f8 func(x *Int64) (T0, T1, T2),
	f9 func(x *Float32) (T0, T1, T2),
	f10 func(x *Float64) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *UInt8:
		return f1(v)
	case *UInt16:
		return f2(v)
	case *UInt32:
		return f3(v)
	case *UInt64:
		return f4(v)
	case *Int8:
		return f5(v)
	case *Int16:
		return f6(v)
	case *Int32:
		return f7(v)
	case *Int64:
		return f8(v)
	case *Float32:
		return f9(v)
	case *Float64:
		return f10(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchNumberKindR2[T0, T1 any](
	x NumberKind,
	f1 func(x *UInt8) (T0, T1),
	f2 func(x *UInt16) (T0, T1),
	f3 func(x *UInt32) (T0, T1),
	f4 func(x *UInt64) (T0, T1),
	f5 func(x *Int8) (T0, T1),
	f6 func(x *Int16) (T0, T1),
	f7 func(x *Int32) (T0, T1),
	f8 func(x *Int64) (T0, T1),
	f9 func(x *Float32) (T0, T1),
	f10 func(x *Float64) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *UInt8:
		return f1(v)
	case *UInt16:
		return f2(v)
	case *UInt32:
		return f3(v)
	case *UInt64:
		return f4(v)
	case *Int8:
		return f5(v)
	case *Int16:
		return f6(v)
	case *Int32:
		return f7(v)
	case *Int64:
		return f8(v)
	case *Float32:
		return f9(v)
	case *Float64:
		return f10(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchNumberKindR1[T0 any](
	x NumberKind,
	f1 func(x *UInt8) T0,
	f2 func(x *UInt16) T0,
	f3 func(x *UInt32) T0,
	f4 func(x *UInt64) T0,
	f5 func(x *Int8) T0,
	f6 func(x *Int16) T0,
	f7 func(x *Int32) T0,
	f8 func(x *Int64) T0,
	f9 func(x *Float32) T0,
	f10 func(x *Float64) T0,
) T0 {
	switch v := x.(type) {
	case *UInt8:
		return f1(v)
	case *UInt16:
		return f2(v)
	case *UInt32:
		return f3(v)
	case *UInt64:
		return f4(v)
	case *Int8:
		return f5(v)
	case *Int16:
		return f6(v)
	case *Int32:
		return f7(v)
	case *Int64:
		return f8(v)
	case *Float32:
		return f9(v)
	case *Float64:
		return f10(v)
	}
	var result1 T0
	return result1
}

func MatchNumberKindR0(
	x NumberKind,
	f1 func(x *UInt8),
	f2 func(x *UInt16),
	f3 func(x *UInt32),
	f4 func(x *UInt64),
	f5 func(x *Int8),
	f6 func(x *Int16),
	f7 func(x *Int32),
	f8 func(x *Int64),
	f9 func(x *Float32),
	f10 func(x *Float64),
) {
	switch v := x.(type) {
	case *UInt8:
		f1(v)
	case *UInt16:
		f2(v)
	case *UInt32:
		f3(v)
	case *UInt64:
		f4(v)
	case *Int8:
		f5(v)
	case *Int16:
		f6(v)
	case *Int32:
		f7(v)
	case *Int64:
		f8(v)
	case *Float32:
		f9(v)
	case *Float64:
		f10(v)
	}
}

func NumberKindShape() Shape {
	return &UnionLike{
		Name:          "NumberKind",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Variant: []Shape{
			UInt8Shape(),
			UInt16Shape(),
			UInt32Shape(),
			UInt64Shape(),
			Int8Shape(),
			Int16Shape(),
			Int32Shape(),
			Int64Shape(),
			Float32Shape(),
			Float64Shape(),
		},
	}
}

func UInt8Shape() Shape {
	return &StructLike{
		Name:          "UInt8",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func UInt16Shape() Shape {
	return &StructLike{
		Name:          "UInt16",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func UInt32Shape() Shape {
	return &StructLike{
		Name:          "UInt32",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func UInt64Shape() Shape {
	return &StructLike{
		Name:          "UInt64",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Int8Shape() Shape {
	return &StructLike{
		Name:          "Int8",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Int16Shape() Shape {
	return &StructLike{
		Name:          "Int16",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Int32Shape() Shape {
	return &StructLike{
		Name:          "Int32",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Int64Shape() Shape {
	return &StructLike{
		Name:          "Int64",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Float32Shape() Shape {
	return &StructLike{
		Name:          "Float32",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func Float64Shape() Shape {
	return &StructLike{
		Name:          "Float64",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/NumberKind", NumberKindFromJSON, NumberKindToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/UInt8", UInt8FromJSON, UInt8ToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/UInt16", UInt16FromJSON, UInt16ToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/UInt32", UInt32FromJSON, UInt32ToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/UInt64", UInt64FromJSON, UInt64ToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape.Int8", Int8FromJSON, Int8ToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/Int16", Int16FromJSON, Int16ToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/Int32", Int32FromJSON, Int32ToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/Int64", Int64FromJSON, Int64ToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/Float32", Float32FromJSON, Float32ToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/Float64", Float64FromJSON, Float64ToJSON)
}

type NumberKindUnionJSON struct {
	Type    string          `json:"$type,omitempty"`
	UInt8   json.RawMessage `json:"UInt8,omitempty"`
	UInt16  json.RawMessage `json:"UInt16,omitempty"`
	UInt32  json.RawMessage `json:"UInt32,omitempty"`
	UInt64  json.RawMessage `json:"UInt64,omitempty"`
	Int8    json.RawMessage `json:"Int8,omitempty"`
	Int16   json.RawMessage `json:"Int16,omitempty"`
	Int32   json.RawMessage `json:"Int32,omitempty"`
	Int64   json.RawMessage `json:"Int64,omitempty"`
	Float32 json.RawMessage `json:"Float32,omitempty"`
	Float64 json.RawMessage `json:"Float64,omitempty"`
}

func NumberKindFromJSON(x []byte) (NumberKind, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}

	var data NumberKindUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "UInt8":
		return UInt8FromJSON(data.UInt8)
	case "UInt16":
		return UInt16FromJSON(data.UInt16)
	case "UInt32":
		return UInt32FromJSON(data.UInt32)
	case "UInt64":
		return UInt64FromJSON(data.UInt64)
	case "Int8":
		return Int8FromJSON(data.Int8)
	case "Int16":
		return Int16FromJSON(data.Int16)
	case "Int32":
		return Int32FromJSON(data.Int32)
	case "Int64":
		return Int64FromJSON(data.Int64)
	case "Float32":
		return Float32FromJSON(data.Float32)
	case "Float64":
		return Float64FromJSON(data.Float64)
	}

	if data.UInt8 != nil {
		return UInt8FromJSON(data.UInt8)
	} else if data.UInt16 != nil {
		return UInt16FromJSON(data.UInt16)
	} else if data.UInt32 != nil {
		return UInt32FromJSON(data.UInt32)
	} else if data.UInt64 != nil {
		return UInt64FromJSON(data.UInt64)
	} else if data.Int8 != nil {
		return Int8FromJSON(data.Int8)
	} else if data.Int16 != nil {
		return Int16FromJSON(data.Int16)
	} else if data.Int32 != nil {
		return Int32FromJSON(data.Int32)
	} else if data.Int64 != nil {
		return Int64FromJSON(data.Int64)
	} else if data.Float32 != nil {
		return Float32FromJSON(data.Float32)
	} else if data.Float64 != nil {
		return Float64FromJSON(data.Float64)
	}

	return nil, fmt.Errorf("NumberKind: unknown type %s", data.Type)
}

func NumberKindToJSON(x NumberKind) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MatchNumberKindR2(
		x,
		func(x *UInt8) ([]byte, error) {
			body, err := UInt8ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:  "UInt8",
				UInt8: body,
			})
		},
		func(x *UInt16) ([]byte, error) {
			body, err := UInt16ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:   "UInt16",
				UInt16: body,
			})
		},
		func(x *UInt32) ([]byte, error) {
			body, err := UInt32ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:   "UInt32",
				UInt32: body,
			})
		},
		func(x *UInt64) ([]byte, error) {
			body, err := UInt64ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:   "UInt64",
				UInt64: body,
			})
		},
		func(x *Int8) ([]byte, error) {
			body, err := Int8ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type: "Int8",
				Int8: body,
			})
		},
		func(x *Int16) ([]byte, error) {
			body, err := Int16ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:  "Int16",
				Int16: body,
			})
		},
		func(x *Int32) ([]byte, error) {
			body, err := Int32ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:  "Int32",
				Int32: body,
			})
		},
		func(x *Int64) ([]byte, error) {
			body, err := Int64ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:  "Int64",
				Int64: body,
			})
		},
		func(x *Float32) ([]byte, error) {
			body, err := Float32ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:    "Float32",
				Float32: body,
			})
		},
		func(x *Float64) ([]byte, error) {
			body, err := Float64ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(NumberKindUnionJSON{
				Type:    "Float64",
				Float64: body,
			})
		},
	)
}

func UInt8FromJSON(x []byte) (*UInt8, error) {
	result := new(UInt8)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func UInt8ToJSON(x *UInt8) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*UInt8)(nil)
	_ json.Marshaler   = (*UInt8)(nil)
)

func (r *UInt8) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONUInt8(*r)
}
func (r *UInt8) _marshalJSONUInt8(x UInt8) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: UInt8._marshalJSONUInt8: struct; %w", err)
	}
	return result, nil
}
func (r *UInt8) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONUInt8(data)
	if err != nil {
		return fmt.Errorf("shape: UInt8.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *UInt8) _unmarshalJSONUInt8(data []byte) (UInt8, error) {
	result := UInt8{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: UInt8._unmarshalJSONUInt8: native struct unwrap; %w", err)
	}
	return result, nil
}

func UInt16FromJSON(x []byte) (*UInt16, error) {
	result := new(UInt16)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func UInt16ToJSON(x *UInt16) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*UInt16)(nil)
	_ json.Marshaler   = (*UInt16)(nil)
)

func (r *UInt16) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONUInt16(*r)
}
func (r *UInt16) _marshalJSONUInt16(x UInt16) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: UInt16._marshalJSONUInt16: struct; %w", err)
	}
	return result, nil
}
func (r *UInt16) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONUInt16(data)
	if err != nil {
		return fmt.Errorf("shape: UInt16.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *UInt16) _unmarshalJSONUInt16(data []byte) (UInt16, error) {
	result := UInt16{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: UInt16._unmarshalJSONUInt16: native struct unwrap; %w", err)
	}
	return result, nil
}

func UInt32FromJSON(x []byte) (*UInt32, error) {
	result := new(UInt32)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func UInt32ToJSON(x *UInt32) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*UInt32)(nil)
	_ json.Marshaler   = (*UInt32)(nil)
)

func (r *UInt32) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONUInt32(*r)
}
func (r *UInt32) _marshalJSONUInt32(x UInt32) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: UInt32._marshalJSONUInt32: struct; %w", err)
	}
	return result, nil
}
func (r *UInt32) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONUInt32(data)
	if err != nil {
		return fmt.Errorf("shape: UInt32.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *UInt32) _unmarshalJSONUInt32(data []byte) (UInt32, error) {
	result := UInt32{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: UInt32._unmarshalJSONUInt32: native struct unwrap; %w", err)
	}
	return result, nil
}

func UInt64FromJSON(x []byte) (*UInt64, error) {
	result := new(UInt64)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func UInt64ToJSON(x *UInt64) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*UInt64)(nil)
	_ json.Marshaler   = (*UInt64)(nil)
)

func (r *UInt64) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONUInt64(*r)
}
func (r *UInt64) _marshalJSONUInt64(x UInt64) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: UInt64._marshalJSONUInt64: struct; %w", err)
	}
	return result, nil
}
func (r *UInt64) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONUInt64(data)
	if err != nil {
		return fmt.Errorf("shape: UInt64.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *UInt64) _unmarshalJSONUInt64(data []byte) (UInt64, error) {
	result := UInt64{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: UInt64._unmarshalJSONUInt64: native struct unwrap; %w", err)
	}
	return result, nil
}

func Int8FromJSON(x []byte) (*Int8, error) {
	result := new(Int8)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func Int8ToJSON(x *Int8) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Int8)(nil)
	_ json.Marshaler   = (*Int8)(nil)
)

func (r *Int8) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONInt8(*r)
}
func (r *Int8) _marshalJSONInt8(x Int8) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: Int8._marshalJSONInt8: struct; %w", err)
	}
	return result, nil
}
func (r *Int8) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONInt8(data)
	if err != nil {
		return fmt.Errorf("shape: Int8.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Int8) _unmarshalJSONInt8(data []byte) (Int8, error) {
	result := Int8{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: Int8._unmarshalJSONInt8: native struct unwrap; %w", err)
	}
	return result, nil
}

func Int16FromJSON(x []byte) (*Int16, error) {
	result := new(Int16)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func Int16ToJSON(x *Int16) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Int16)(nil)
	_ json.Marshaler   = (*Int16)(nil)
)

func (r *Int16) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONInt16(*r)
}
func (r *Int16) _marshalJSONInt16(x Int16) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: Int16._marshalJSONInt16: struct; %w", err)
	}
	return result, nil
}
func (r *Int16) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONInt16(data)
	if err != nil {
		return fmt.Errorf("shape: Int16.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Int16) _unmarshalJSONInt16(data []byte) (Int16, error) {
	result := Int16{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: Int16._unmarshalJSONInt16: native struct unwrap; %w", err)
	}
	return result, nil
}

func Int32FromJSON(x []byte) (*Int32, error) {
	result := new(Int32)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func Int32ToJSON(x *Int32) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Int32)(nil)
	_ json.Marshaler   = (*Int32)(nil)
)

func (r *Int32) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONInt32(*r)
}
func (r *Int32) _marshalJSONInt32(x Int32) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: Int32._marshalJSONInt32: struct; %w", err)
	}
	return result, nil
}
func (r *Int32) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONInt32(data)
	if err != nil {
		return fmt.Errorf("shape: Int32.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Int32) _unmarshalJSONInt32(data []byte) (Int32, error) {
	result := Int32{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: Int32._unmarshalJSONInt32: native struct unwrap; %w", err)
	}
	return result, nil
}

func Int64FromJSON(x []byte) (*Int64, error) {
	result := new(Int64)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func Int64ToJSON(x *Int64) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Int64)(nil)
	_ json.Marshaler   = (*Int64)(nil)
)

func (r *Int64) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONInt64(*r)
}
func (r *Int64) _marshalJSONInt64(x Int64) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: Int64._marshalJSONInt64: struct; %w", err)
	}
	return result, nil
}
func (r *Int64) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONInt64(data)
	if err != nil {
		return fmt.Errorf("shape: Int64.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Int64) _unmarshalJSONInt64(data []byte) (Int64, error) {
	result := Int64{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: Int64._unmarshalJSONInt64: native struct unwrap; %w", err)
	}
	return result, nil
}

func Float32FromJSON(x []byte) (*Float32, error) {
	result := new(Float32)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func Float32ToJSON(x *Float32) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Float32)(nil)
	_ json.Marshaler   = (*Float32)(nil)
)

func (r *Float32) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONFloat32(*r)
}
func (r *Float32) _marshalJSONFloat32(x Float32) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: Float32._marshalJSONFloat32: struct; %w", err)
	}
	return result, nil
}
func (r *Float32) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONFloat32(data)
	if err != nil {
		return fmt.Errorf("shape: Float32.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Float32) _unmarshalJSONFloat32(data []byte) (Float32, error) {
	result := Float32{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: Float32._unmarshalJSONFloat32: native struct unwrap; %w", err)
	}
	return result, nil
}

func Float64FromJSON(x []byte) (*Float64, error) {
	result := new(Float64)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func Float64ToJSON(x *Float64) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Float64)(nil)
	_ json.Marshaler   = (*Float64)(nil)
)

func (r *Float64) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONFloat64(*r)
}
func (r *Float64) _marshalJSONFloat64(x Float64) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: Float64._marshalJSONFloat64: struct; %w", err)
	}
	return result, nil
}
func (r *Float64) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONFloat64(data)
	if err != nil {
		return fmt.Errorf("shape: Float64.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Float64) _unmarshalJSONFloat64(data []byte) (Float64, error) {
	result := Float64{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: Float64._unmarshalJSONFloat64: native struct unwrap; %w", err)
	}
	return result, nil
}

type GuardVisitor interface {
	VisitEnum(v *Enum) any
	VisitRequired(v *Required) any
	VisitAndGuard(v *AndGuard) any
}

type Guard interface {
	AcceptGuard(g GuardVisitor) any
}

var (
	_ Guard = (*Enum)(nil)
	_ Guard = (*Required)(nil)
	_ Guard = (*AndGuard)(nil)
)

func (r *Enum) AcceptGuard(v GuardVisitor) any     { return v.VisitEnum(r) }
func (r *Required) AcceptGuard(v GuardVisitor) any { return v.VisitRequired(r) }
func (r *AndGuard) AcceptGuard(v GuardVisitor) any { return v.VisitAndGuard(r) }

func MatchGuardR3[T0, T1, T2 any](
	x Guard,
	f1 func(x *Enum) (T0, T1, T2),
	f2 func(x *Required) (T0, T1, T2),
	f3 func(x *AndGuard) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Enum:
		return f1(v)
	case *Required:
		return f2(v)
	case *AndGuard:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchGuardR2[T0, T1 any](
	x Guard,
	f1 func(x *Enum) (T0, T1),
	f2 func(x *Required) (T0, T1),
	f3 func(x *AndGuard) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Enum:
		return f1(v)
	case *Required:
		return f2(v)
	case *AndGuard:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchGuardR1[T0 any](
	x Guard,
	f1 func(x *Enum) T0,
	f2 func(x *Required) T0,
	f3 func(x *AndGuard) T0,
) T0 {
	switch v := x.(type) {
	case *Enum:
		return f1(v)
	case *Required:
		return f2(v)
	case *AndGuard:
		return f3(v)
	}
	var result1 T0
	return result1
}

func MatchGuardR0(
	x Guard,
	f1 func(x *Enum),
	f2 func(x *Required),
	f3 func(x *AndGuard),
) {
	switch v := x.(type) {
	case *Enum:
		f1(v)
	case *Required:
		f2(v)
	case *AndGuard:
		f3(v)
	}
}

func GuardShape() Shape {
	return &UnionLike{
		Name:          "Guard",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Variant: []Shape{
			EnumShape(),
			RequiredShape(),
			AndGuardShape(),
		},
	}
}

func EnumShape() Shape {
	return &StructLike{
		Name:          "Enum",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Val",
				Type: &ListLike{
					Element: &PrimitiveLike{Kind: &StringLike{}},
				},
			},
		},
	}
}

func RequiredShape() Shape {
	return &StructLike{
		Name:          "Required",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
	}
}

func AndGuardShape() Shape {
	return &StructLike{
		Name:          "AndGuard",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "L",
				Type: &ListLike{
					Element: &RefName{
						Name:          "Guard",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
		},
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/Guard", GuardFromJSON, GuardToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/Enum", EnumFromJSON, EnumToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/Required", RequiredFromJSON, RequiredToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/AndGuard", AndGuardFromJSON, AndGuardToJSON)
}

type GuardUnionJSON struct {
	Type     string          `json:"$type,omitempty"`
	Enum     json.RawMessage `json:"Enum,omitempty"`
	Required json.RawMessage `json:"Required,omitempty"`
	AndGuard json.RawMessage `json:"AndGuard,omitempty"`
}

func GuardFromJSON(x []byte) (Guard, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}

	var data GuardUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "Enum":
		return EnumFromJSON(data.Enum)
	case "Required":
		return RequiredFromJSON(data.Required)
	case "AndGuard":
		return AndGuardFromJSON(data.AndGuard)
	}

	if data.Enum != nil {
		return EnumFromJSON(data.Enum)
	} else if data.Required != nil {
		return RequiredFromJSON(data.Required)
	} else if data.AndGuard != nil {
		return AndGuardFromJSON(data.AndGuard)
	}

	return nil, fmt.Errorf("Guard: unknown type %s", data.Type)
}

func GuardToJSON(x Guard) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MatchGuardR2(
		x,
		func(x *Enum) ([]byte, error) {
			body, err := EnumToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(GuardUnionJSON{
				Type: "Enum",
				Enum: body,
			})
		},
		func(x *Required) ([]byte, error) {
			body, err := RequiredToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(GuardUnionJSON{
				Type:     "Required",
				Required: body,
			})
		},
		func(x *AndGuard) ([]byte, error) {
			body, err := AndGuardToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(GuardUnionJSON{
				Type:     "AndGuard",
				AndGuard: body,
			})
		},
	)
}

func EnumFromJSON(x []byte) (*Enum, error) {
	result := new(Enum)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func EnumToJSON(x *Enum) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Enum)(nil)
	_ json.Marshaler   = (*Enum)(nil)
)

func (r *Enum) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONEnum(*r)
}
func (r *Enum) _marshalJSONEnum(x Enum) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldVal []byte
	fieldVal, err = r._marshalJSONSlicestring(x.Val)
	if err != nil {
		return nil, fmt.Errorf("shape: Enum._marshalJSONEnum: field name Val; %w", err)
	}
	partial["Val"] = fieldVal
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: Enum._marshalJSONEnum: struct; %w", err)
	}
	return result, nil
}
func (r *Enum) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("shape: Enum._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: Enum._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *Enum) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: Enum._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Enum) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONEnum(data)
	if err != nil {
		return fmt.Errorf("shape: Enum.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Enum) _unmarshalJSONEnum(data []byte) (Enum, error) {
	result := Enum{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: Enum._unmarshalJSONEnum: native struct unwrap; %w", err)
	}
	if fieldVal, ok := partial["Val"]; ok {
		result.Val, err = r._unmarshalJSONSlicestring(fieldVal)
		if err != nil {
			return result, fmt.Errorf("shape: Enum._unmarshalJSONEnum: field Val; %w", err)
		}
	}
	return result, nil
}
func (r *Enum) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: Enum._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("shape: Enum._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *Enum) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: Enum._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func RequiredFromJSON(x []byte) (*Required, error) {
	result := new(Required)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func RequiredToJSON(x *Required) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Required)(nil)
	_ json.Marshaler   = (*Required)(nil)
)

func (r *Required) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONRequired(*r)
}
func (r *Required) _marshalJSONRequired(x Required) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: Required._marshalJSONRequired: struct; %w", err)
	}
	return result, nil
}
func (r *Required) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONRequired(data)
	if err != nil {
		return fmt.Errorf("shape: Required.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Required) _unmarshalJSONRequired(data []byte) (Required, error) {
	result := Required{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: Required._unmarshalJSONRequired: native struct unwrap; %w", err)
	}
	return result, nil
}

func AndGuardFromJSON(x []byte) (*AndGuard, error) {
	result := new(AndGuard)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func AndGuardToJSON(x *AndGuard) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*AndGuard)(nil)
	_ json.Marshaler   = (*AndGuard)(nil)
)

func (r *AndGuard) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONAndGuard(*r)
}
func (r *AndGuard) _marshalJSONAndGuard(x AndGuard) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldL []byte
	fieldL, err = r._marshalJSONSliceGuard(x.L)
	if err != nil {
		return nil, fmt.Errorf("shape: AndGuard._marshalJSONAndGuard: field name L; %w", err)
	}
	partial["L"] = fieldL
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: AndGuard._marshalJSONAndGuard: struct; %w", err)
	}
	return result, nil
}
func (r *AndGuard) _marshalJSONSliceGuard(x []Guard) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONGuard(v)
		if err != nil {
			return nil, fmt.Errorf("shape: AndGuard._marshalJSONSliceGuard: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: AndGuard._marshalJSONSliceGuard:; %w", err)
	}
	return result, nil
}
func (r *AndGuard) _marshalJSONGuard(x Guard) ([]byte, error) {
	result, err := shared.JSONMarshal[Guard](x)
	if err != nil {
		return nil, fmt.Errorf("shape: AndGuard._marshalJSONGuard:; %w", err)
	}
	return result, nil
}
func (r *AndGuard) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONAndGuard(data)
	if err != nil {
		return fmt.Errorf("shape: AndGuard.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *AndGuard) _unmarshalJSONAndGuard(data []byte) (AndGuard, error) {
	result := AndGuard{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: AndGuard._unmarshalJSONAndGuard: native struct unwrap; %w", err)
	}
	if fieldL, ok := partial["L"]; ok {
		result.L, err = r._unmarshalJSONSliceGuard(fieldL)
		if err != nil {
			return result, fmt.Errorf("shape: AndGuard._unmarshalJSONAndGuard: field L; %w", err)
		}
	}
	return result, nil
}
func (r *AndGuard) _unmarshalJSONSliceGuard(data []byte) ([]Guard, error) {
	result := make([]Guard, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: AndGuard._unmarshalJSONSliceGuard: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONGuard(v)
		if err != nil {
			return result, fmt.Errorf("shape: AndGuard._unmarshalJSONSliceGuard: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *AndGuard) _unmarshalJSONGuard(data []byte) (Guard, error) {
	result, err := shared.JSONUnmarshal[Guard](data)
	if err != nil {
		return result, fmt.Errorf("shape: AndGuard._unmarshalJSONGuard: native ref unwrap; %w", err)
	}
	return result, nil
}
