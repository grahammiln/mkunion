// Code generated by mkunion. DO NOT EDIT.
package stream

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type PullCMDVisitor interface {
	VisitFromBeginning(v *FromBeginning) any
	VisitFromOffset(v *FromOffset) any
}

type PullCMD interface {
	AcceptPullCMD(g PullCMDVisitor) any
}

var (
	_ PullCMD = (*FromBeginning)(nil)
	_ PullCMD = (*FromOffset)(nil)
)

func (r *FromBeginning) AcceptPullCMD(v PullCMDVisitor) any { return v.VisitFromBeginning(r) }
func (r *FromOffset) AcceptPullCMD(v PullCMDVisitor) any    { return v.VisitFromOffset(r) }

func MatchPullCMDR3[T0, T1, T2 any](
	x PullCMD,
	f1 func(x *FromBeginning) (T0, T1, T2),
	f2 func(x *FromOffset) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *FromBeginning:
		return f1(v)
	case *FromOffset:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchPullCMDR2[T0, T1 any](
	x PullCMD,
	f1 func(x *FromBeginning) (T0, T1),
	f2 func(x *FromOffset) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *FromBeginning:
		return f1(v)
	case *FromOffset:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchPullCMDR1[T0 any](
	x PullCMD,
	f1 func(x *FromBeginning) T0,
	f2 func(x *FromOffset) T0,
) T0 {
	switch v := x.(type) {
	case *FromBeginning:
		return f1(v)
	case *FromOffset:
		return f2(v)
	}
	var result1 T0
	return result1
}

func MatchPullCMDR0(
	x PullCMD,
	f1 func(x *FromBeginning),
	f2 func(x *FromOffset),
) {
	switch v := x.(type) {
	case *FromBeginning:
		f1(v)
	case *FromOffset:
		f2(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/stream.PullCMD", PullCMDFromJSON, PullCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/stream.FromBeginning", FromBeginningFromJSON, FromBeginningToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/stream.FromOffset", FromOffsetFromJSON, FromOffsetToJSON)
}

type PullCMDUnionJSON struct {
	Type          string          `json:"$type,omitempty"`
	FromBeginning json.RawMessage `json:"stream.FromBeginning,omitempty"`
	FromOffset    json.RawMessage `json:"stream.FromOffset,omitempty"`
}

func PullCMDFromJSON(x []byte) (PullCMD, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}

	var data PullCMDUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "stream.FromBeginning":
		return FromBeginningFromJSON(data.FromBeginning)
	case "stream.FromOffset":
		return FromOffsetFromJSON(data.FromOffset)
	}

	if data.FromBeginning != nil {
		return FromBeginningFromJSON(data.FromBeginning)
	} else if data.FromOffset != nil {
		return FromOffsetFromJSON(data.FromOffset)
	}

	return nil, fmt.Errorf("stream.PullCMD: unknown type %s", data.Type)
}

func PullCMDToJSON(x PullCMD) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MatchPullCMDR2(
		x,
		func(x *FromBeginning) ([]byte, error) {
			body, err := FromBeginningToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(PullCMDUnionJSON{
				Type:          "stream.FromBeginning",
				FromBeginning: body,
			})
		},
		func(x *FromOffset) ([]byte, error) {
			body, err := FromOffsetToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(PullCMDUnionJSON{
				Type:       "stream.FromOffset",
				FromOffset: body,
			})
		},
	)
}

func FromBeginningFromJSON(x []byte) (*FromBeginning, error) {
	result := new(FromBeginning)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func FromBeginningToJSON(x *FromBeginning) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*FromBeginning)(nil)
	_ json.Marshaler   = (*FromBeginning)(nil)
)

func (r *FromBeginning) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONFromBeginning(*r)
}
func (r *FromBeginning) _marshalJSONFromBeginning(x FromBeginning) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("stream: FromBeginning._marshalJSONFromBeginning: struct; %w", err)
	}
	return result, nil
}
func (r *FromBeginning) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONFromBeginning(data)
	if err != nil {
		return fmt.Errorf("stream: FromBeginning.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *FromBeginning) _unmarshalJSONFromBeginning(data []byte) (FromBeginning, error) {
	result := FromBeginning{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("stream: FromBeginning._unmarshalJSONFromBeginning: native struct unwrap; %w", err)
	}
	return result, nil
}

func FromOffsetFromJSON(x []byte) (*FromOffset, error) {
	result := new(FromOffset)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func FromOffsetToJSON(x *FromOffset) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*FromOffset)(nil)
	_ json.Marshaler   = (*FromOffset)(nil)
)
