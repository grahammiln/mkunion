// Code generated by mkunion. DO NOT EDIT.
package predicate

type PredicateDefaultVisitor[A any] struct {
	Default   A
	OnAnd     func(x *And) A
	OnOr      func(x *Or) A
	OnNot     func(x *Not) A
	OnCompare func(x *Compare) A
}

func (t *PredicateDefaultVisitor[A]) VisitAnd(v *And) any {
	if t.OnAnd != nil {
		return t.OnAnd(v)
	}
	return t.Default
}
func (t *PredicateDefaultVisitor[A]) VisitOr(v *Or) any {
	if t.OnOr != nil {
		return t.OnOr(v)
	}
	return t.Default
}
func (t *PredicateDefaultVisitor[A]) VisitNot(v *Not) any {
	if t.OnNot != nil {
		return t.OnNot(v)
	}
	return t.Default
}
func (t *PredicateDefaultVisitor[A]) VisitCompare(v *Compare) any {
	if t.OnCompare != nil {
		return t.OnCompare(v)
	}
	return t.Default
}
