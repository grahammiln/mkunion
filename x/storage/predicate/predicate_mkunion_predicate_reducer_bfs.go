// Code generated by mkunion. DO NOT EDIT.
package predicate

var _ PredicateVisitor = (*PredicateBreadthFirstVisitor[any])(nil)

type PredicateBreadthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce PredicateReducer[A]

	queue         []Predicate
	visited       map[Predicate]bool
	shouldExecute map[Predicate]bool
}

func (d *PredicateBreadthFirstVisitor[A]) VisitAnd(v *And) any {
	d.queue = append(d.queue, v)
	for idx := range v.L {
		d.queue = append(d.queue, v.L[idx])
	}

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceAnd(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *PredicateBreadthFirstVisitor[A]) VisitOr(v *Or) any {
	d.queue = append(d.queue, v)
	for idx := range v.L {
		d.queue = append(d.queue, v.L[idx])
	}

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceOr(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *PredicateBreadthFirstVisitor[A]) VisitNot(v *Not) any {
	d.queue = append(d.queue, v)
	d.queue = append(d.queue, v.P)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceNot(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *PredicateBreadthFirstVisitor[A]) VisitCompare(v *Compare) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceCompare(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *PredicateBreadthFirstVisitor[A]) execute() {
	for len(d.queue) > 0 {
		if d.stop {
			return
		}

		i := d.pop()
		if d.visited[i] {
			continue
		}
		d.visited[i] = true
		d.shouldExecute[i] = true
		i.AcceptPredicate(d)
	}

	return
}

func (d *PredicateBreadthFirstVisitor[A]) pop() Predicate {
	i := d.queue[0]
	d.queue = d.queue[1:]
	return i
}

func ReducePredicateBreadthFirst[A any](r PredicateReducer[A], v Predicate, init A) A {
	reducer := &PredicateBreadthFirstVisitor[A]{
		result:        init,
		reduce:        r,
		queue:         []Predicate{v},
		visited:       make(map[Predicate]bool),
		shouldExecute: make(map[Predicate]bool),
	}

	_ = v.AcceptPredicate(reducer)

	return reducer.result
}
