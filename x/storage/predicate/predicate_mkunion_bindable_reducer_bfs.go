// Code generated by mkunion. DO NOT EDIT.
package predicate

var _ BindableVisitor = (*BindableBreadthFirstVisitor[any])(nil)

type BindableBreadthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce BindableReducer[A]

	queue         []Bindable
	visited       map[Bindable]bool
	shouldExecute map[Bindable]bool
}

func (d *BindableBreadthFirstVisitor[A]) VisitBindValue(v *BindValue) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceBindValue(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *BindableBreadthFirstVisitor[A]) VisitLiteral(v *Literal) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceLiteral(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *BindableBreadthFirstVisitor[A]) VisitLocatable(v *Locatable) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceLocatable(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *BindableBreadthFirstVisitor[A]) execute() {
	for len(d.queue) > 0 {
		if d.stop {
			return
		}

		i := d.pop()
		if d.visited[i] {
			continue
		}
		d.visited[i] = true
		d.shouldExecute[i] = true
		i.AcceptBindable(d)
	}

	return
}

func (d *BindableBreadthFirstVisitor[A]) pop() Bindable {
	i := d.queue[0]
	d.queue = d.queue[1:]
	return i
}

func ReduceBindableBreadthFirst[A any](r BindableReducer[A], v Bindable, init A) A {
	reducer := &BindableBreadthFirstVisitor[A]{
		result:        init,
		reduce:        r,
		queue:         []Bindable{v},
		visited:       make(map[Bindable]bool),
		shouldExecute: make(map[Bindable]bool),
	}

	_ = v.AcceptBindable(reducer)

	return reducer.result
}
