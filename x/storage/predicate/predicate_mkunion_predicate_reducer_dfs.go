// Code generated by mkunion. DO NOT EDIT.
package predicate

type (
	PredicateReducer[A any] interface {
		ReduceAnd(x *And, agg A) (result A, stop bool)
		ReduceOr(x *Or, agg A) (result A, stop bool)
		ReduceNot(x *Not, agg A) (result A, stop bool)
		ReduceCompare(x *Compare, agg A) (result A, stop bool)
	}
)

type PredicateDepthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce PredicateReducer[A]
}

var _ PredicateVisitor = (*PredicateDepthFirstVisitor[any])(nil)

func (d *PredicateDepthFirstVisitor[A]) VisitAnd(v *And) any {
	d.result, d.stop = d.reduce.ReduceAnd(v, d.result)
	if d.stop {
		return nil
	}
	for idx := range v.L {
		if _ = v.L[idx].AcceptPredicate(d); d.stop {
			return nil
		}
	}

	return nil
}

func (d *PredicateDepthFirstVisitor[A]) VisitOr(v *Or) any {
	d.result, d.stop = d.reduce.ReduceOr(v, d.result)
	if d.stop {
		return nil
	}
	for idx := range v.L {
		if _ = v.L[idx].AcceptPredicate(d); d.stop {
			return nil
		}
	}

	return nil
}

func (d *PredicateDepthFirstVisitor[A]) VisitNot(v *Not) any {
	d.result, d.stop = d.reduce.ReduceNot(v, d.result)
	if d.stop {
		return nil
	}
	if _ = v.P.AcceptPredicate(d); d.stop {
		return nil
	}

	return nil
}

func (d *PredicateDepthFirstVisitor[A]) VisitCompare(v *Compare) any {
	d.result, d.stop = d.reduce.ReduceCompare(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func ReducePredicateDepthFirst[A any](r PredicateReducer[A], v Predicate, init A) A {
	reducer := &PredicateDepthFirstVisitor[A]{
		result: init,
		reduce: r,
	}

	_ = v.AcceptPredicate(reducer)

	return reducer.result
}
