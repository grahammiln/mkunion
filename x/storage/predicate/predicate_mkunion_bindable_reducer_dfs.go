// Code generated by mkunion. DO NOT EDIT.
package predicate

type (
	BindableReducer[A any] interface {
		ReduceBindValue(x *BindValue, agg A) (result A, stop bool)
		ReduceLiteral(x *Literal, agg A) (result A, stop bool)
		ReduceLocatable(x *Locatable, agg A) (result A, stop bool)
	}
)

type BindableDepthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce BindableReducer[A]
}

var _ BindableVisitor = (*BindableDepthFirstVisitor[any])(nil)

func (d *BindableDepthFirstVisitor[A]) VisitBindValue(v *BindValue) any {
	d.result, d.stop = d.reduce.ReduceBindValue(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *BindableDepthFirstVisitor[A]) VisitLiteral(v *Literal) any {
	d.result, d.stop = d.reduce.ReduceLiteral(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *BindableDepthFirstVisitor[A]) VisitLocatable(v *Locatable) any {
	d.result, d.stop = d.reduce.ReduceLocatable(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func ReduceBindableDepthFirst[A any](r BindableReducer[A], v Bindable, init A) A {
	reducer := &BindableDepthFirstVisitor[A]{
		result: init,
		reduce: r,
	}

	_ = v.AcceptBindable(reducer)

	return reducer.result
}
