// Code generated by mkunion. DO NOT EDIT.
package predicate

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

var (
	_ json.Unmarshaler = (*WherePredicates)(nil)
	_ json.Marshaler   = (*WherePredicates)(nil)
)

func (r *WherePredicates) MarshalJSON() ([]byte, error) {
	var err error
	result := make(map[string]json.RawMessage)

	fieldPredicate, err := shared.JSONMarshal[Predicate](r.Predicate)
	if err != nil {
		return nil, fmt.Errorf("predicate.WherePredicates.MarshalJSON: field Predicate; %w", err)
	}
	result["Predicate"] = fieldPredicate

	fieldParams, err := shared.JSONMarshal[ParamBinds](r.Params)
	if err != nil {
		return nil, fmt.Errorf("predicate.WherePredicates.MarshalJSON: field Params; %w", err)
	}
	result["Params"] = fieldParams

	output, err := json.Marshal(result)
	if err != nil {
		return nil, fmt.Errorf("predicate.WherePredicates.MarshalJSON: final step; %w", err)
	}

	return output, nil
}

func (r *WherePredicates) UnmarshalJSON(bytes []byte) error {
	return shared.JSONParseObject(bytes, func(key string, bytes []byte) error {
		switch key {
		case "Predicate":
			var err error
			r.Predicate, err = shared.JSONUnmarshal[Predicate](bytes)
			if err != nil {
				return fmt.Errorf("predicate.WherePredicates.UnmarshalJSON: field Predicate; %w", err)
			}
			return nil

		case "Params":
			var err error
			r.Params, err = shared.JSONUnmarshal[ParamBinds](bytes)
			if err != nil {
				return fmt.Errorf("predicate.WherePredicates.UnmarshalJSON: field Params; %w", err)
			}
			return nil

		}

		return fmt.Errorf("predicate.WherePredicates.UnmarshalJSON: unknown key: %s", key)
	})
}
