// Code generated by mkunion. DO NOT EDIT.
package predicate

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/schema"
	"github.com/widmogrod/mkunion/x/shape"
	"github.com/widmogrod/mkunion/x/shared"
)

func init() {
	shape.Register(ParamBindsShape())
}

var (
	_ json.Unmarshaler = (*ParamBinds)(nil)
	_ json.Marshaler   = (*ParamBinds)(nil)
)

func (r *ParamBinds) MarshalJSON() ([]byte, error) {
	fieldMap := make(map[string]json.RawMessage)
	for k, v := range *r {
		key, value, err := shared.JSONMarshalMap[BindName, schema.Schema](k, v)
		if err != nil {
			return nil, fmt.Errorf("predicate.ParamBinds.MarshalJSON:; %w", err)
		}
		fieldMap[key] = value
	}
	result, err := json.Marshal(fieldMap)
	if err != nil {
		return nil, fmt.Errorf("predicate.ParamBinds.MarshalJSON:; %w", err)
	}
	return result, nil
}

func (r *ParamBinds) UnmarshalJSON(bytes []byte) error {
	*r = make(ParamBinds)
	return shared.JSONParseObject(bytes, func(key string, value []byte) error {
		k, v, err := shared.JSONUnmarshalMap[BindName, schema.Schema](key, value)
		if err != nil {
			return fmt.Errorf("predicate.ParamBinds.UnmarshalJSON: key %s; %w", key, err)
		}
		(*r)[k] = v
		return nil
	})
}

func ParamBindsShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "ParamBinds",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
		Type: &shape.MapLike{
			Key: &shape.RefName{
				Name:          "BindName",
				PkgName:       "predicate",
				PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
			},
			Val: &shape.RefName{
				Name:          "Schema",
				PkgName:       "schema",
				PkgImportName: "github.com/widmogrod/mkunion/x/schema",
			},
		},
	}
}
