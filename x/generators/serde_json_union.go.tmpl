{{- $self := . -}}

func init() {
	shared.JSONMarshallerRegister("{{ $self.Union.PkgImportName }}.{{ $self.Union.Name }}", {{ $self.Union.Name }}FromJSON, {{ .Union.Name }}ToJSON)
	{{- range $index, $variant := .Union.Variant }}
	shared.JSONMarshallerRegister("{{ $self.Union.PkgImportName }}.{{ $self.VariantName $variant }}", {{ $self.VariantName $variant }}FromJSON, {{ $self.VariantName $variant }}ToJSON)
	{{- end }}
}

type {{ .Union.Name }}UnionJSON struct {
	Type string `json:"$type,omitempty"`
	{{- range $index, $variant := .Union.Variant }}
	{{ $self.VariantName $variant }} json.RawMessage `json:"{{ $self.JSONVariantName $variant }},omitempty"`
	{{- end }}
}

func {{ .Union.Name }}FromJSON(x []byte) ({{ .Union.Name }}, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}

	var data {{ .Union.Name }}UnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	{{- range $index, $variant := .Union.Variant }}
	case "{{ $self.JSONVariantName $variant }}":
		return {{ $self.VariantName $variant }}FromJSON(data.{{ $self.VariantName $variant }})
	{{- end }}
	}

	{{range $index, $variant := .Union.Variant }}
	{{- if $index }} else if {{ else }}if {{ end -}}
	data.{{ $self.VariantName $variant }} != nil {
		return {{ $self.VariantName $variant }}FromJSON(data.{{ $self.VariantName $variant }})
	}{{ end }}

	return nil, fmt.Errorf("{{ .Union.PkgName }}.{{ .Union.Name }}: unknown type %s", data.Type)
}

func {{ .Union.Name }}ToJSON(x {{ .Union.Name }}) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MustMatch{{ .Union.Name }}R2(
		x,
		{{- range $index, $variant := .Union.Variant }}
		func(x *{{ $self.VariantName $variant }}) ([]byte, error) {
			body, err := {{ $self.VariantName $variant }}ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal({{ $self.Union.Name }}UnionJSON{
				Type: "{{ $self.JSONVariantName $variant }}",
				{{ $self.VariantName $variant }}: body,
			})
		},
		{{- end}}
	)
}
{{range $index, $variant := .Union.Variant }}
func {{ $self.VariantName $variant }}FromJSON(x []byte) (*{{ $self.VariantName $variant }}, error) {
	result := new({{ $self.VariantName $variant }})
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func {{ $self.VariantName $variant }}ToJSON(x *{{ $self.VariantName $variant }}) ([]byte, error) {
	return x.MarshalJSON()
}

{{ $self.Serde $variant }}
{{end}}