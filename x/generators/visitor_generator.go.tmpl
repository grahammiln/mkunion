{{- $self := . -}}

{{- $name := $self.Union.Name }}
type {{ $name }}Visitor interface {
	{{- range $index, $variant := .Union.Variant }}
	Visit{{ $self.VariantName $variant }}(v *{{ $self.VariantName $variant }}) any
	{{- end }}
}

type {{ $name }} interface {
	Accept{{ $name }}(g {{ $name }}Visitor) any
}
{{ range $index, $variant := .Union.Variant }}
func (r *{{ $self.VariantName $variant }}) Accept{{ $name }}(v {{ $name }}Visitor) any { return v.Visit{{ $self.VariantName $variant }}(r) }
{{- end }}

var (
	{{- range $index, $variant := .Union.Variant }}
	_ {{ $name }} = (*{{ $self.VariantName $variant }})(nil)
	{{- end }}
)
{{ $i := len .Union.Variant }}
func Match{{ $name }}[TOut any](
	x {{ $name }},
	{{- range $index, $variant := .Union.Variant }}
	f{{ $self.Add $index 1}} func(x *{{ $self.VariantName $variant }}) TOut,
    {{- end }}
	df func(x {{ $name }}) TOut,
) TOut {
	return f.Match{{ $i }}(x {{- range $k := $self.GenIntSlice 1 $i }}, f{{ $k }} {{- end }}, df)
}
{{ $i := len .Union.Variant }}
func Match{{ $name }}R2[TOut1, TOut2 any](
	x {{ $name }},
	{{- range $index, $variant := .Union.Variant }}
	f{{ $self.Add $index 1}} func(x *{{ $self.VariantName $variant }}) (TOut1, TOut2),
    {{- end }}
	df func(x {{ $name }}) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.Match{{ $i }}R2(x {{- range $k := $self.GenIntSlice 1 $i }}, f{{ $k }} {{- end }}, df)
}
{{ $i := len .Union.Variant }}
func MustMatch{{ $name }}[TOut any](
	x {{ $name }},
	{{- range $index, $variant := .Union.Variant }}
	f{{ $self.Add $index 1}} func(x *{{ $self.VariantName $variant }}) TOut,
    {{- end }}
) TOut {
	return f.MustMatch{{ $i }}(x {{- range $k :=$self.GenIntSlice 1 $i }}, f{{ $k }} {{- end }})
}
{{ $i := len .Union.Variant }}
func MustMatch{{ $name }}R0(
	x {{ $name }},
	{{- range $index, $variant := .Union.Variant }}
	f{{ $self.Add $index 1}} func(x *{{ $self.VariantName $variant }}),
    {{- end }}
) {
	f.MustMatch{{ $i }}R0(x {{- range $k :=$self.GenIntSlice 1 $i }}, f{{ $k }} {{- end }})
}
{{ $i := len .Union.Variant }}
func MustMatch{{ $name }}R2[TOut1, TOut2 any](
	x {{ $name }},
	{{- range $index, $variant := .Union.Variant }}
	f{{ $self.Add $index 1}} func(x *{{ $self.VariantName $variant }}) (TOut1, TOut2),
    {{- end }}
) (TOut1, TOut2) {
	return f.MustMatch{{ $i }}R2(x {{- range $k :=$self.GenIntSlice 1 $i }}, f{{ $k }} {{- end }})
}