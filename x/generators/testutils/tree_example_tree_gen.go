// Code generated by mkunion. DO NOT EDIT.
package testutils

import "github.com/widmogrod/mkunion/f"
import "github.com/widmogrod/mkunion/x/schema"
import "github.com/widmogrod/mkunion/x/shape"
import "github.com/widmogrod/mkunion/x/shared"
import "encoding/json"
import "fmt"

//mkunion-extension:visitor

type TreeVisitor interface {
	VisitBranch(v *Branch) any
	VisitLeaf(v *Leaf) any
}

type Tree interface {
	AcceptTree(g TreeVisitor) any
}

func (r *Branch) AcceptTree(v TreeVisitor) any { return v.VisitBranch(r) }
func (r *Leaf) AcceptTree(v TreeVisitor) any   { return v.VisitLeaf(r) }

var (
	_ Tree = (*Branch)(nil)
	_ Tree = (*Leaf)(nil)
)

func MatchTree[TOut any](
	x Tree,
	f1 func(x *Branch) TOut,
	f2 func(x *Leaf) TOut,
	df func(x Tree) TOut,
) TOut {
	return f.Match2(x, f1, f2, df)
}

func MatchTreeR2[TOut1, TOut2 any](
	x Tree,
	f1 func(x *Branch) (TOut1, TOut2),
	f2 func(x *Leaf) (TOut1, TOut2),
	df func(x Tree) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.Match2R2(x, f1, f2, df)
}

func MustMatchTree[TOut any](
	x Tree,
	f1 func(x *Branch) TOut,
	f2 func(x *Leaf) TOut,
) TOut {
	return f.MustMatch2(x, f1, f2)
}

func MustMatchTreeR0(
	x Tree,
	f1 func(x *Branch),
	f2 func(x *Leaf),
) {
	f.MustMatch2R0(x, f1, f2)
}

func MustMatchTreeR2[TOut1, TOut2 any](
	x Tree,
	f1 func(x *Branch) (TOut1, TOut2),
	f2 func(x *Leaf) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.MustMatch2R2(x, f1, f2)
}

// mkunion-extension:schema
func init() {
	schema.RegisterUnionTypes(TreeSchemaDef())
}

func TreeSchemaDef() *schema.UnionVariants[Tree] {
	return schema.MustDefineUnion[Tree](
		&Branch{},
		&Leaf{},
	)
}

// mkunion-extension:shape
func TreeShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Tree",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Variant: []shape.Shape{
			BranchShape(),
			LeafShape(),
		},
	}
}

func BranchShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Branch",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Fields: []*shape.FieldLike{
			{
				Name: "L",
				Type: &shape.RefName{
					Name:          "Tree",
					PkgName:       "testutils",
					PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
				},
			},
			{
				Name: "R",
				Type: &shape.RefName{
					Name:          "Tree",
					PkgName:       "testutils",
					PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
				},
			},
		},
	}
}

func LeafShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Leaf",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Fields: []*shape.FieldLike{
			{
				Name: "Value",
				Type: &shape.NumberLike{},
			},
		},
	}
}

// mkunion-extension:json
type TreeUnionJSON struct {
	Type   string          `json:"$type,omitempty"`
	Branch json.RawMessage `json:"github.com/widmogrod/mkunion/x/generators/testutils.Branch,omitempty"`
	Leaf   json.RawMessage `json:"github.com/widmogrod/mkunion/x/generators/testutils.Leaf,omitempty"`
}

func TreeFromJSON(x []byte) (Tree, error) {
	var data TreeUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "github.com/widmogrod/mkunion/x/generators/testutils.Branch":
		return BranchFromJSON(data.Branch)
	case "github.com/widmogrod/mkunion/x/generators/testutils.Leaf":
		return LeafFromJSON(data.Leaf)
	}

	if data.Branch != nil {
		return BranchFromJSON(data.Branch)
	} else if data.Leaf != nil {
		return LeafFromJSON(data.Leaf)
	}

	return nil, fmt.Errorf("unknown type %s", data.Type)
}

func TreeToJSON(x Tree) ([]byte, error) {
	return MustMatchTreeR2(
		x,
		func(x *Branch) ([]byte, error) {
			body, err := BranchToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(TreeUnionJSON{
				Type:   "github.com/widmogrod/mkunion/x/generators/testutils.Branch",
				Branch: body,
			})
		},
		func(x *Leaf) ([]byte, error) {
			body, err := LeafToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(TreeUnionJSON{
				Type: "github.com/widmogrod/mkunion/x/generators/testutils.Leaf",
				Leaf: body,
			})
		},
	)
}

func BranchFromJSON(x []byte) (*Branch, error) {
	var result *Branch = &Branch{}

	// if is Struct
	err := shared.JsonParseObject(x, func(key string, value []byte) error {
		switch key {
		case "L":
			res, err := TreeFromJSON(value)
			if err != nil {
				return fmt.Errorf("testutils.TreeFromJSON: %w", err)
			}
			result.L = res
			return nil
		case "R":
			res, err := TreeFromJSON(value)
			if err != nil {
				return fmt.Errorf("testutils.TreeFromJSON: %w", err)
			}
			result.R = res
			return nil
		}

		return fmt.Errorf("testutils.BranchFromJSON: unknown key %s", key)
	})

	return result, err
}

func BranchToJSON(x *Branch) ([]byte, error) {
	field_L, err := TreeToJSON(x.L)
	if err != nil {
		return nil, err
	}
	field_R, err := TreeToJSON(x.R)
	if err != nil {
		return nil, err
	}
	return json.Marshal(map[string]json.RawMessage{
		"L": field_L,
		"R": field_R,
	})
}

func (self *Branch) MarshalJSON() ([]byte, error) {
	return BranchToJSON(self)
}

func (self *Branch) UnmarshalJSON(x []byte) error {
	n, err := BranchFromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func LeafFromJSON(x []byte) (*Leaf, error) {
	var result *Leaf = &Leaf{}

	// if is Struct
	err := shared.JsonParseObject(x, func(key string, value []byte) error {
		switch key {
		case "Value":
			return json.Unmarshal(value, &result.Value)
		}

		return fmt.Errorf("testutils.LeafFromJSON: unknown key %s", key)
	})

	return result, err
}

func LeafToJSON(x *Leaf) ([]byte, error) {
	field_Value, err := json.Marshal(x.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(map[string]json.RawMessage{
		"Value": field_Value,
	})
}

func (self *Leaf) MarshalJSON() ([]byte, error) {
	return LeafToJSON(self)
}

func (self *Leaf) UnmarshalJSON(x []byte) error {
	n, err := LeafFromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}
