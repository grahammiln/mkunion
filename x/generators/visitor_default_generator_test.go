package generators

import (
	log "github.com/sirupsen/logrus"
	"github.com/stretchr/testify/assert"
	"github.com/widmogrod/mkunion/x/shape"
	"testing"
)

func TestOptionalVisitor(t *testing.T) {
	log.SetLevel(log.DebugLevel)
	inferred, err := shape.InferFromFile("testutils/tree.go")
	assert.NoError(t, err)

	g := NewVisitorDefaultGenerator(
		inferred.RetrieveUnion("Tree"),
		NewHelper(WithPackageName("testutils")),
	)

	result, err := g.Generate()
	assert.NoError(t, err)
	assert.Equal(t, `// Code generated by mkunion. DO NOT EDIT.
package testutils

type TreeDefaultVisitor[A any] struct {
	Default A
	OnBranch func(x *Branch) A
	OnLeaf func(x *Leaf) A
	OnK func(x *K) A
}
func (t *TreeDefaultVisitor[A]) VisitBranch(v *Branch) any {
	if t.OnBranch != nil {
		return t.OnBranch(v)
	}
	return t.Default
}
func (t *TreeDefaultVisitor[A]) VisitLeaf(v *Leaf) any {
	if t.OnLeaf != nil {
		return t.OnLeaf(v)
	}
	return t.Default
}
func (t *TreeDefaultVisitor[A]) VisitK(v *K) any {
	if t.OnK != nil {
		return t.OnK(v)
	}
	return t.Default
}`, string(result))
}
