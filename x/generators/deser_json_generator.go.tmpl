{{- $self := . -}}

{{ RenderHeader -}}
{{ $self.OptionallyImport "github.com/widmogrod/mkunion/x/shared" -}}
{{ RenderImport "encoding/json" -}}
{{ RenderImport "fmt" -}}

type {{ .Union.Name }}UnionJSON struct {
	Type string `json:"$type,omitempty"`
	{{- range $index, $variant := .Union.Variant }}
	{{ $self.VariantName $variant }} json.RawMessage `json:"{{ $self.JSONVariantName $variant }},omitempty"`
	{{- end }}
}

func {{ .Union.Name }}FromJSON(x []byte) ({{ .Union.Name }}, error) {
	var data {{ .Union.Name }}UnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	{{- range $index, $variant := .Union.Variant }}
	case "{{ $self.JSONVariantName $variant }}":
		return {{ $self.VariantName $variant }}FromJSON(data.{{ $self.VariantName $variant }})
	{{- end }}
	}

	{{range $index, $variant := .Union.Variant }}
	{{- if $index }} else if {{ else }}if {{ end -}}
	data.{{ $self.VariantName $variant }} != nil {
		return {{ $self.VariantName $variant }}FromJSON(data.{{ $self.VariantName $variant }})
	}{{ end }}

	return nil, fmt.Errorf("unknown type %s", data.Type)
}

func {{ .Union.Name }}ToJSON(x {{ .Union.Name }}) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MustMatch{{ .Union.Name }}R2(
		x,
		{{- range $index, $variant := .Union.Variant }}
		func(x *{{ $self.VariantName $variant }}) ([]byte, error) {
			body, err := {{ $self.VariantName $variant }}ToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal({{ $self.Union.Name }}UnionJSON{
				Type: "{{ $self.JSONVariantName $variant }}",
				{{ $self.VariantName $variant }}: body,
			})
		},
		{{- end}}
	)
}
{{range $index, $variant := .Union.Variant }}
func {{ $self.VariantName $variant }}FromJSON(x []byte) (*{{ $self.VariantName $variant }}, error) {
	var result *{{ $self.VariantName $variant }} = new({{ $self.VariantName $variant }})

	{{- if $self.IsStruct $variant }}
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		{{- range $index, $field := $variant.Fields }}
		case "{{ $self.JSONFieldName $field }}":
			{{ $self.UnmarshalTemplate $field 2 }}
		{{- end }}
		}

		return fmt.Errorf("{{ $self.Union.PkgName }}.{{ $self.VariantName $variant }}FromJSON: unknown key %s", key)
	})
	{{- else }}
	err := json.Unmarshal(x, result)
	{{- end }}

	return result, err
}

func {{ $self.VariantName $variant }}ToJSON(x *{{ $self.VariantName $variant }}) ([]byte, error) {
	{{- if $self.IsStruct $variant }}
	{{- range $index, $field := $variant.Fields }}
	field_{{ $field.Name }}, err := {{ $self.MarshalTemplate $field 2}}
	if err != nil {
		return nil, err
	}
	{{- end }}
	return json.Marshal(map[string]json.RawMessage{
		{{- range $index, $field := $variant.Fields }}
		"{{ $self.JSONFieldName $field }}": field_{{ $field.Name }},
		{{- end}}
	})
	{{- else }}
	return json.Marshal(x)
	{{- end }}
}
{{- if $self.SupportNativeJSONMarshal $variant }}
func (self *{{ $self.VariantName $variant }}) MarshalJSON() ([]byte, error) {
	return {{ $self.VariantName $variant }}ToJSON(self)
}

func (self *{{ $self.VariantName $variant }}) UnmarshalJSON(x []byte) error {
	n, err := {{ $self.VariantName $variant }}FromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}
{{- end}}
{{end}}