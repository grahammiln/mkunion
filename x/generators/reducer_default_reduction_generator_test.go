package generators

import (
	log "github.com/sirupsen/logrus"
	"github.com/stretchr/testify/assert"
	"github.com/widmogrod/mkunion/x/shape"
	"testing"
)

func TestDefaultReductionGenerator(t *testing.T) {
	log.SetLevel(log.DebugLevel)
	inferred, err := shape.InferFromFile("testutils/tree_example_lit.go")
	assert.NoError(t, err)

	g := NewReducerDefaultReductionGenerator(
		inferred.RetrieveUnion("Tree2"),
		NewHelper(WithPackageName("testutils")),
	)

	result, err := g.Generate()
	assert.NoError(t, err)
	assert.Equal(t, `// Code generated by mkunion. DO NOT EDIT.
package testutils

var _ Tree2Reducer[any] = (*Tree2DefaultReduction[any])(nil)

type (
	Tree2DefaultReduction[A any] struct {
		PanicOnFallback bool
		DefaultStopReduction bool
		OnBranch2 func(x *Branch2, agg A) (result A, stop bool)
		OnLeaf2 func(x *Leaf2, agg A) (result A, stop bool)
	}
)

func (t *Tree2DefaultReduction[A]) ReduceBranch2(x *Branch2, agg A) (result A, stop bool) {
	if t.OnBranch2 != nil {
		return t.OnBranch2(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceBranch2")
	}
	return agg, t.DefaultStopReduction
}

func (t *Tree2DefaultReduction[A]) ReduceLeaf2(x *Leaf2, agg A) (result A, stop bool) {
	if t.OnLeaf2 != nil {
		return t.OnLeaf2(x, agg)
	}
	if t.PanicOnFallback {
		panic("no fallback allowed on undefined ReduceLeaf2")
	}
	return agg, t.DefaultStopReduction
}
`, string(result))
}
