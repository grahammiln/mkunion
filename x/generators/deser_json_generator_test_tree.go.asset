package testutils

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
	"time"
)

func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Tree", TreeFromJSON, TreeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Branch", BranchFromJSON, BranchToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Leaf", LeafFromJSON, LeafToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.K", KFromJSON, KToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.P", PFromJSON, PToJSON)
}

type TreeUnionJSON struct {
	Type string `json:"$type,omitempty"`
	Branch json.RawMessage `json:"testutils.Branch,omitempty"`
	Leaf json.RawMessage `json:"testutils.Leaf,omitempty"`
	K json.RawMessage `json:"testutils.K,omitempty"`
	P json.RawMessage `json:"testutils.P,omitempty"`
}

func TreeFromJSON(x []byte) (Tree, error) {
	var data TreeUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "testutils.Branch":
		return BranchFromJSON(data.Branch)
	case "testutils.Leaf":
		return LeafFromJSON(data.Leaf)
	case "testutils.K":
		return KFromJSON(data.K)
	case "testutils.P":
		return PFromJSON(data.P)
	}

	if data.Branch != nil {
		return BranchFromJSON(data.Branch)
	} else if data.Leaf != nil {
		return LeafFromJSON(data.Leaf)
	} else if data.K != nil {
		return KFromJSON(data.K)
	} else if data.P != nil {
		return PFromJSON(data.P)
	}

	return nil, fmt.Errorf("testutils.Tree: unknown type %s", data.Type)
}

func TreeToJSON(x Tree) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MustMatchTreeR2(
		x,
		func(x *Branch) ([]byte, error) {
			body, err := BranchToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(TreeUnionJSON{
				Type: "testutils.Branch",
				Branch: body,
			})
		},
		func(x *Leaf) ([]byte, error) {
			body, err := LeafToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(TreeUnionJSON{
				Type: "testutils.Leaf",
				Leaf: body,
			})
		},
		func(x *K) ([]byte, error) {
			body, err := KToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(TreeUnionJSON{
				Type: "testutils.K",
				K: body,
			})
		},
		func(x *P) ([]byte, error) {
			body, err := PToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(TreeUnionJSON{
				Type: "testutils.P",
				P: body,
			})
		},
	)
}

func BranchFromJSON(x []byte) (*Branch, error) {
	result := new(Branch)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func BranchToJSON(x *Branch) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Branch)(nil)
	_ json.Marshaler   = (*Branch)(nil)
)

func (r *Branch) MarshalJSON() ([]byte, error) {
	var err error
	result := make(map[string]json.RawMessage)

	fieldLit, err := shared.JSONMarshal[Tree](r.Lit)
	if err != nil {
		return nil, fmt.Errorf("testutils.Branch.MarshalJSON: field Lit; %w", err)
	}
	result["Lit"] = fieldLit

	fieldList := make([]json.RawMessage, len(r.List))
	for i, v := range r.List {
		fieldList[i], err = shared.JSONMarshal[Tree](v)
		if err != nil {
			return nil, fmt.Errorf("testutils.Branch.MarshalJSON: field List[%d]; %w", i, err)
		}
	}
	result["List"], err = json.Marshal(fieldList)
	if err != nil {
		return nil, fmt.Errorf("testutils.Branch.MarshalJSON: field List; %w", err)
	}

	fieldMap := make(map[string]json.RawMessage)
	for k, v := range r.Map {
		var key any
		key, ok := any(k).(string)
		if !ok {
			key, err = shared.JSONMarshal[string](k)
			if err != nil {
				return nil, fmt.Errorf("testutils.Branch.MarshalJSON: field Map[%#v] key decoding; %w", key, err)
			}
			key = string(key.([]byte))
		}

		fieldMap[key.(string)], err = shared.JSONMarshal[Tree](v)
		if err != nil {
			return nil, fmt.Errorf("testutils.Branch.MarshalJSON: field Map[%#v] value decoding %#v; %w", key, v, err)
		}
	}
	result["Map"], err = json.Marshal(fieldMap)
	if err != nil {
		return nil, fmt.Errorf("testutils.Branch.MarshalJSON: field Map; %w", err)
	}

	if r.Of != nil {
		fieldOf, err := shared.JSONMarshal[*ListOf[Tree]](r.Of)
		if err != nil {
			return nil, fmt.Errorf("testutils.Branch.MarshalJSON: field Of; %w", err)
		}
		result["just_of"] = fieldOf
	}

	output, err := json.Marshal(result)
	if err != nil {
		return nil, fmt.Errorf("testutils.Branch.MarshalJSON: final step; %w", err)
	}

	return output, nil
}

func (r *Branch) UnmarshalJSON(bytes []byte) error {
	return shared.JSONParseObject(bytes, func(key string, bytes []byte) error {
		switch key {
		case "Lit":
			var err error
			r.Lit, err = shared.JSONUnmarshal[Tree](bytes)
			if err != nil {
				return fmt.Errorf("testutils.Branch.UnmarshalJSON: field Lit; %w", err)
			}
			return nil

		case "List":
			err := shared.JSONParseList(bytes, func(index int, bytes []byte) error {
				item, err := shared.JSONUnmarshal[Tree](bytes)
				if err != nil {
					return fmt.Errorf("testutils.Branch.UnmarshalJSON: field List[%d]; %w", index, err)
				}
				r.List = append(r.List, item)
				return nil
			})
			if err != nil {
				return fmt.Errorf("testutils.Branch.UnmarshalJSON: field List; %w", err)
			}
			return nil

		case "Map":
			r.Map = make(map[string]Tree)
			err := shared.JSONParseObject(bytes, func(rawKey string, bytes []byte) error {
				item, err := shared.JSONUnmarshal[Tree](bytes)
				if err != nil {
					return fmt.Errorf("key=%s to type=%T item error;  %w", bytes, item, err)
				}

				var key2 string
				if _, ok := any(key2).(string); !ok {
					var err error
					key2, err = shared.JSONUnmarshal[string]([]byte(rawKey))
					if err != nil {
						return fmt.Errorf("key=%s to type=%T key error; %w", rawKey, key2, err)
					}
				} else {
					key2 = any(rawKey).(string)
				}

				r.Map[key2] = item
				return nil
			})
			if err != nil {
				return fmt.Errorf("testutils.Branch.UnmarshalJSON: field Map; %w", err)
			}
			return nil

		case "just_of":
			var err error
			r.Of, err = shared.JSONUnmarshal[*ListOf[Tree]](bytes)
			if err != nil {
				return fmt.Errorf("testutils.Branch.UnmarshalJSON: field Of; %w", err)
			}
			return nil

		}

		return nil
	})
}



func LeafFromJSON(x []byte) (*Leaf, error) {
	result := new(Leaf)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func LeafToJSON(x *Leaf) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Leaf)(nil)
	_ json.Marshaler   = (*Leaf)(nil)
)

func (r *Leaf) MarshalJSON() ([]byte, error) {
	var err error
	result := make(map[string]json.RawMessage)

	fieldValue, err := shared.JSONMarshal[int64](r.Value)
	if err != nil {
		return nil, fmt.Errorf("testutils.Leaf.MarshalJSON: field Value; %w", err)
	}
	result["Value"] = fieldValue

	output, err := json.Marshal(result)
	if err != nil {
		return nil, fmt.Errorf("testutils.Leaf.MarshalJSON: final step; %w", err)
	}

	return output, nil
}

func (r *Leaf) UnmarshalJSON(bytes []byte) error {
	return shared.JSONParseObject(bytes, func(key string, bytes []byte) error {
		switch key {
		case "Value":
			var err error
			r.Value, err = shared.JSONUnmarshal[int64](bytes)
			if err != nil {
				return fmt.Errorf("testutils.Leaf.UnmarshalJSON: field Value; %w", err)
			}
			return nil

		}

		return nil
	})
}



func KFromJSON(x []byte) (*K, error) {
	result := new(K)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func KToJSON(x *K) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*K)(nil)
	_ json.Marshaler   = (*K)(nil)
)

func (r *K) MarshalJSON() ([]byte, error) {
	result, err := shared.JSONMarshal[string](string(*r))
	if err != nil {
		return nil, fmt.Errorf("testutils.K.MarshalJSON: %w", err)
	}
	return result, nil
}

func (r *K) UnmarshalJSON(bytes []byte) error {
	result, err := shared.JSONUnmarshal[string](bytes)
	if err != nil {
		return fmt.Errorf("testutils.K.UnmarshalJSON: %w", err)
	}
	*r = K(result)
	return nil
}



func PFromJSON(x []byte) (*P, error) {
	result := new(P)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func PToJSON(x *P) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*P)(nil)
	_ json.Marshaler   = (*P)(nil)
)

func (r *P) MarshalJSON() ([]byte, error) {
	result, err := shared.JSONMarshal[ListOf2[ListOf[any],*ListOf2[int64,*time.Duration]]](ListOf2[ListOf[any],*ListOf2[int64,*time.Duration]](*r))
	if err != nil {
		return nil, fmt.Errorf("testutils.P.MarshalJSON: %w", err)
	}
	return result, nil
}

func (r *P) UnmarshalJSON(bytes []byte) error {
	result, err := shared.JSONUnmarshal[ListOf2[ListOf[any],*ListOf2[int64,*time.Duration]]](bytes)
	if err != nil {
		return fmt.Errorf("testutils.P.UnmarshalJSON: %w", err)
	}
	*r = P(result)
	return nil
}


