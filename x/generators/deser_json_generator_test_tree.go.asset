// Code generated by mkunion. DO NOT EDIT.
package testutils

import "github.com/widmogrod/mkunion/x/shared"

import "encoding/json"

import "fmt"

func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Tree", TreeFromJSON, TreeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Branch", BranchFromJSON, BranchToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Leaf", LeafFromJSON, LeafToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.K", KFromJSON, KToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.P", PFromJSON, PToJSON)
}

type TreeUnionJSON struct {
	Type string `json:"$type,omitempty"`
	Branch json.RawMessage `json:"testutils.Branch,omitempty"`
	Leaf json.RawMessage `json:"testutils.Leaf,omitempty"`
	K json.RawMessage `json:"testutils.K,omitempty"`
	P json.RawMessage `json:"testutils.P,omitempty"`
}

func TreeFromJSON(x []byte) (Tree, error) {
	var data TreeUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "testutils.Branch":
		return BranchFromJSON(data.Branch)
	case "testutils.Leaf":
		return LeafFromJSON(data.Leaf)
	case "testutils.K":
		return KFromJSON(data.K)
	case "testutils.P":
		return PFromJSON(data.P)
	}

	if data.Branch != nil {
		return BranchFromJSON(data.Branch)
	} else if data.Leaf != nil {
		return LeafFromJSON(data.Leaf)
	} else if data.K != nil {
		return KFromJSON(data.K)
	} else if data.P != nil {
		return PFromJSON(data.P)
	}

	return nil, fmt.Errorf("testutils.Tree: unknown type %s", data.Type)
}

func TreeToJSON(x Tree) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MustMatchTreeR2(
		x,
		func(x *Branch) ([]byte, error) {
			body, err := BranchToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(TreeUnionJSON{
				Type: "testutils.Branch",
				Branch: body,
			})
		},
		func(x *Leaf) ([]byte, error) {
			body, err := LeafToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(TreeUnionJSON{
				Type: "testutils.Leaf",
				Leaf: body,
			})
		},
		func(x *K) ([]byte, error) {
			body, err := KToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(TreeUnionJSON{
				Type: "testutils.K",
				K: body,
			})
		},
		func(x *P) ([]byte, error) {
			body, err := PToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(TreeUnionJSON{
				Type: "testutils.P",
				P: body,
			})
		},
	)
}

func BranchFromJSON(x []byte) (*Branch, error) {
	var result *Branch = new(Branch)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		case "Lit":
			res, err := TreeFromJSON(value)
			if err != nil {
				return fmt.Errorf("testutils._FromJSON: field Tree %w", err)
			}
			result.Lit = res
			return nil
		case "List":
			res, err := shared.JSONToListWithDeserializer(value, result.List, TreeFromJSON)
			if err != nil {
				return fmt.Errorf("testutils._FromJSON: field Tree %w", err)
			}
			result.List = res
			return nil
		case "Map":
			res, err := shared.JSONToMapWithDeserializer(value, result.Map, TreeFromJSON)
			if err != nil {
				return fmt.Errorf("testutils._FromJSON: field Tree %w", err)
			}
			result.Map = res
			return nil
		}

		return fmt.Errorf("testutils.BranchFromJSON: unknown key %s", key)
	})

	return result, err
}

func BranchToJSON(x *Branch) ([]byte, error) {
	field_Lit, err := TreeToJSON(x.Lit)
	if err != nil {
		return nil, err
	}
	field_List, err := shared.JSONListFromSerializer(x.List, TreeToJSON)
	if err != nil {
		return nil, err
	}
	field_Map, err := shared.JSONMapFromSerializer(x.Map, TreeToJSON)
	if err != nil {
		return nil, err
	}
	return json.Marshal(map[string]json.RawMessage{
		"Lit": field_Lit,
		"List": field_List,
		"Map": field_Map,
	})
}
func (self *Branch) MarshalJSON() ([]byte, error) {
	return BranchToJSON(self)
}

func (self *Branch) UnmarshalJSON(x []byte) error {
	n, err := BranchFromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func LeafFromJSON(x []byte) (*Leaf, error) {
	var result *Leaf = new(Leaf)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		case "Value":
			return json.Unmarshal(value, &result.Value)
		}

		return fmt.Errorf("testutils.LeafFromJSON: unknown key %s", key)
	})

	return result, err
}

func LeafToJSON(x *Leaf) ([]byte, error) {
	field_Value, err := json.Marshal(x.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(map[string]json.RawMessage{
		"Value": field_Value,
	})
}
func (self *Leaf) MarshalJSON() ([]byte, error) {
	return LeafToJSON(self)
}

func (self *Leaf) UnmarshalJSON(x []byte) error {
	n, err := LeafFromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func KFromJSON(x []byte) (*K, error) {
	var result *K = new(K)
	err := json.Unmarshal(x, result)

	return result, err
}

func KToJSON(x *K) ([]byte, error) {
	return json.Marshal(x)
}

func PFromJSON(x []byte) (*P, error) {
	var result *P = new(P)
	err := json.Unmarshal(x, result)

	return result, err
}

func PToJSON(x *P) ([]byte, error) {
	return json.Marshal(x)
}
