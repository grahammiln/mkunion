// Code generated by mkunion. DO NOT EDIT.
package schema

type (
	SchemaReducer[A any] interface {
		ReduceNone(x *None, agg A) (result A, stop bool)
		ReduceBool(x *Bool, agg A) (result A, stop bool)
		ReduceNumber(x *Number, agg A) (result A, stop bool)
		ReduceString(x *String, agg A) (result A, stop bool)
		ReduceBinary(x *Binary, agg A) (result A, stop bool)
		ReduceList(x *List, agg A) (result A, stop bool)
		ReduceMap(x *Map, agg A) (result A, stop bool)
	}
)

type SchemaDepthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce SchemaReducer[A]
}

var _ SchemaVisitor = (*SchemaDepthFirstVisitor[any])(nil)

func (d *SchemaDepthFirstVisitor[A]) VisitNone(v *None) any {
	d.result, d.stop = d.reduce.ReduceNone(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *SchemaDepthFirstVisitor[A]) VisitBool(v *Bool) any {
	d.result, d.stop = d.reduce.ReduceBool(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *SchemaDepthFirstVisitor[A]) VisitNumber(v *Number) any {
	d.result, d.stop = d.reduce.ReduceNumber(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *SchemaDepthFirstVisitor[A]) VisitString(v *String) any {
	d.result, d.stop = d.reduce.ReduceString(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *SchemaDepthFirstVisitor[A]) VisitBinary(v *Binary) any {
	d.result, d.stop = d.reduce.ReduceBinary(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func (d *SchemaDepthFirstVisitor[A]) VisitList(v *List) any {
	d.result, d.stop = d.reduce.ReduceList(v, d.result)
	if d.stop {
		return nil
	}
	for idx := range v.Items {
		if _ = v.Items[idx].Accept(d); d.stop {
			return nil
		}
	}

	return nil
}

func (d *SchemaDepthFirstVisitor[A]) VisitMap(v *Map) any {
	d.result, d.stop = d.reduce.ReduceMap(v, d.result)
	if d.stop {
		return nil
	}

	return nil
}

func ReduceSchemaDepthFirst[A any](r SchemaReducer[A], v Schema, init A) A {
	reducer := &SchemaDepthFirstVisitor[A]{
		result: init,
		reduce: r,
	}

	_ = v.Accept(reducer)

	return reducer.result
}
