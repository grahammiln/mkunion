// Code generated by mkunion. DO NOT EDIT.
package schema

import (
	"github.com/widmogrod/mkunion/f"
)

type SchemaVisitor interface {
	VisitNone(v *None) any
	VisitBool(v *Bool) any
	VisitNumber(v *Number) any
	VisitString(v *String) any
	VisitList(v *List) any
	VisitMap(v *Map) any
}

type Schema interface {
	Accept(g SchemaVisitor) any
}

func (r *None) Accept(v SchemaVisitor) any   { return v.VisitNone(r) }
func (r *Bool) Accept(v SchemaVisitor) any   { return v.VisitBool(r) }
func (r *Number) Accept(v SchemaVisitor) any { return v.VisitNumber(r) }
func (r *String) Accept(v SchemaVisitor) any { return v.VisitString(r) }
func (r *List) Accept(v SchemaVisitor) any   { return v.VisitList(r) }
func (r *Map) Accept(v SchemaVisitor) any    { return v.VisitMap(r) }

var (
	_ Schema = (*None)(nil)
	_ Schema = (*Bool)(nil)
	_ Schema = (*Number)(nil)
	_ Schema = (*String)(nil)
	_ Schema = (*List)(nil)
	_ Schema = (*Map)(nil)
)

func MustMatchSchema[TOut any](
	x Schema,
	f1 func(x *None) TOut,
	f2 func(x *Bool) TOut,
	f3 func(x *Number) TOut,
	f4 func(x *String) TOut,
	f5 func(x *List) TOut,
	f6 func(x *Map) TOut,
) TOut {
	return f.MustMatch6(x, f1, f2, f3, f4, f5, f6)
}

func MustMatchSchemaR2[TOut1, TOut2 any](
	x Schema,
	f1 func(x *None) (TOut1, TOut2),
	f2 func(x *Bool) (TOut1, TOut2),
	f3 func(x *Number) (TOut1, TOut2),
	f4 func(x *String) (TOut1, TOut2),
	f5 func(x *List) (TOut1, TOut2),
	f6 func(x *Map) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.MustMatch6R2(x, f1, f2, f3, f4, f5, f6)
}
