// Code generated by mkunion. DO NOT EDIT.
package schema

var _ SchemaVisitor = (*SchemaBreadthFirstVisitor[any])(nil)

type SchemaBreadthFirstVisitor[A any] struct {
	stop   bool
	result A
	reduce SchemaReducer[A]

	queue         []Schema
	visited       map[Schema]bool
	shouldExecute map[Schema]bool
}

func (d *SchemaBreadthFirstVisitor[A]) VisitNone(v *None) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceNone(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *SchemaBreadthFirstVisitor[A]) VisitBool(v *Bool) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceBool(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *SchemaBreadthFirstVisitor[A]) VisitNumber(v *Number) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceNumber(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *SchemaBreadthFirstVisitor[A]) VisitString(v *String) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceString(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *SchemaBreadthFirstVisitor[A]) VisitBinary(v *Binary) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceBinary(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *SchemaBreadthFirstVisitor[A]) VisitList(v *List) any {
	d.queue = append(d.queue, v)
	for idx := range v.Items {
		d.queue = append(d.queue, v.Items[idx])
	}

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceList(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *SchemaBreadthFirstVisitor[A]) VisitMap(v *Map) any {
	d.queue = append(d.queue, v)

	if d.shouldExecute[v] {
		d.shouldExecute[v] = false
		d.result, d.stop = d.reduce.ReduceMap(v, d.result)
	} else {
		d.execute()
	}
	return nil
}

func (d *SchemaBreadthFirstVisitor[A]) execute() {
	for len(d.queue) > 0 {
		if d.stop {
			return
		}

		i := d.pop()
		if d.visited[i] {
			continue
		}
		d.visited[i] = true
		d.shouldExecute[i] = true
		i.AcceptSchema(d)
	}

	return
}

func (d *SchemaBreadthFirstVisitor[A]) pop() Schema {
	i := d.queue[0]
	d.queue = d.queue[1:]
	return i
}

func ReduceSchemaBreadthFirst[A any](r SchemaReducer[A], v Schema, init A) A {
	reducer := &SchemaBreadthFirstVisitor[A]{
		result:        init,
		reduce:        r,
		queue:         []Schema{v},
		visited:       make(map[Schema]bool),
		shouldExecute: make(map[Schema]bool),
	}

	_ = v.AcceptSchema(reducer)

	return reducer.result
}
