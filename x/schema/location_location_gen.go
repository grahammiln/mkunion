// Code generated by mkunion. DO NOT EDIT.
package schema

import "github.com/widmogrod/mkunion/f"
import "github.com/widmogrod/mkunion/x/shared"
import "encoding/json"
import "fmt"

//mkunion-extension:visitor

type LocationVisitor interface {
	VisitLocationField(v *LocationField) any
	VisitLocationIndex(v *LocationIndex) any
	VisitLocationAnything(v *LocationAnything) any
}

type Location interface {
	AcceptLocation(g LocationVisitor) any
}

func (r *LocationField) AcceptLocation(v LocationVisitor) any    { return v.VisitLocationField(r) }
func (r *LocationIndex) AcceptLocation(v LocationVisitor) any    { return v.VisitLocationIndex(r) }
func (r *LocationAnything) AcceptLocation(v LocationVisitor) any { return v.VisitLocationAnything(r) }

var (
	_ Location = (*LocationField)(nil)
	_ Location = (*LocationIndex)(nil)
	_ Location = (*LocationAnything)(nil)
)

func MatchLocation[TOut any](
	x Location,
	f1 func(x *LocationField) TOut,
	f2 func(x *LocationIndex) TOut,
	f3 func(x *LocationAnything) TOut,
	df func(x Location) TOut,
) TOut {
	return f.Match3(x, f1, f2, f3, df)
}

func MatchLocationR2[TOut1, TOut2 any](
	x Location,
	f1 func(x *LocationField) (TOut1, TOut2),
	f2 func(x *LocationIndex) (TOut1, TOut2),
	f3 func(x *LocationAnything) (TOut1, TOut2),
	df func(x Location) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.Match3R2(x, f1, f2, f3, df)
}

func MustMatchLocation[TOut any](
	x Location,
	f1 func(x *LocationField) TOut,
	f2 func(x *LocationIndex) TOut,
	f3 func(x *LocationAnything) TOut,
) TOut {
	return f.MustMatch3(x, f1, f2, f3)
}

func MustMatchLocationR0(
	x Location,
	f1 func(x *LocationField),
	f2 func(x *LocationIndex),
	f3 func(x *LocationAnything),
) {
	f.MustMatch3R0(x, f1, f2, f3)
}

func MustMatchLocationR2[TOut1, TOut2 any](
	x Location,
	f1 func(x *LocationField) (TOut1, TOut2),
	f2 func(x *LocationIndex) (TOut1, TOut2),
	f3 func(x *LocationAnything) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.MustMatch3R2(x, f1, f2, f3)
}

// mkunion-extension:json
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/schema.Location", LocationFromJSON, LocationToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/schema.LocationField", LocationFieldFromJSON, LocationFieldToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/schema.LocationIndex", LocationIndexFromJSON, LocationIndexToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/schema.LocationAnything", LocationAnythingFromJSON, LocationAnythingToJSON)
}

type LocationUnionJSON struct {
	Type             string          `json:"$type,omitempty"`
	LocationField    json.RawMessage `json:"schema.LocationField,omitempty"`
	LocationIndex    json.RawMessage `json:"schema.LocationIndex,omitempty"`
	LocationAnything json.RawMessage `json:"schema.LocationAnything,omitempty"`
}

func LocationFromJSON(x []byte) (Location, error) {
	var data LocationUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "schema.LocationField":
		return LocationFieldFromJSON(data.LocationField)
	case "schema.LocationIndex":
		return LocationIndexFromJSON(data.LocationIndex)
	case "schema.LocationAnything":
		return LocationAnythingFromJSON(data.LocationAnything)
	}

	if data.LocationField != nil {
		return LocationFieldFromJSON(data.LocationField)
	} else if data.LocationIndex != nil {
		return LocationIndexFromJSON(data.LocationIndex)
	} else if data.LocationAnything != nil {
		return LocationAnythingFromJSON(data.LocationAnything)
	}

	return nil, fmt.Errorf("unknown type %s", data.Type)
}

func LocationToJSON(x Location) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MustMatchLocationR2(
		x,
		func(x *LocationField) ([]byte, error) {
			body, err := LocationFieldToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(LocationUnionJSON{
				Type:          "schema.LocationField",
				LocationField: body,
			})
		},
		func(x *LocationIndex) ([]byte, error) {
			body, err := LocationIndexToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(LocationUnionJSON{
				Type:          "schema.LocationIndex",
				LocationIndex: body,
			})
		},
		func(x *LocationAnything) ([]byte, error) {
			body, err := LocationAnythingToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(LocationUnionJSON{
				Type:             "schema.LocationAnything",
				LocationAnything: body,
			})
		},
	)
}

func LocationFieldFromJSON(x []byte) (*LocationField, error) {
	var result *LocationField = new(LocationField)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		case "Name":
			return json.Unmarshal(value, &result.Name)
		}

		return fmt.Errorf("schema.LocationFieldFromJSON: unknown key %s", key)
	})

	return result, err
}

func LocationFieldToJSON(x *LocationField) ([]byte, error) {
	field_Name, err := json.Marshal(x.Name)
	if err != nil {
		return nil, err
	}
	return json.Marshal(map[string]json.RawMessage{
		"Name": field_Name,
	})
}
func (self *LocationField) MarshalJSON() ([]byte, error) {
	return LocationFieldToJSON(self)
}

func (self *LocationField) UnmarshalJSON(x []byte) error {
	n, err := LocationFieldFromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func LocationIndexFromJSON(x []byte) (*LocationIndex, error) {
	var result *LocationIndex = new(LocationIndex)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		case "Index":
			return json.Unmarshal(value, &result.Index)
		}

		return fmt.Errorf("schema.LocationIndexFromJSON: unknown key %s", key)
	})

	return result, err
}

func LocationIndexToJSON(x *LocationIndex) ([]byte, error) {
	field_Index, err := json.Marshal(x.Index)
	if err != nil {
		return nil, err
	}
	return json.Marshal(map[string]json.RawMessage{
		"Index": field_Index,
	})
}
func (self *LocationIndex) MarshalJSON() ([]byte, error) {
	return LocationIndexToJSON(self)
}

func (self *LocationIndex) UnmarshalJSON(x []byte) error {
	n, err := LocationIndexFromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}

func LocationAnythingFromJSON(x []byte) (*LocationAnything, error) {
	var result *LocationAnything = new(LocationAnything)
	// if is Struct
	err := shared.JSONParseObject(x, func(key string, value []byte) error {
		switch key {
		}

		return fmt.Errorf("schema.LocationAnythingFromJSON: unknown key %s", key)
	})

	return result, err
}

func LocationAnythingToJSON(x *LocationAnything) ([]byte, error) {
	return json.Marshal(map[string]json.RawMessage{})
}
func (self *LocationAnything) MarshalJSON() ([]byte, error) {
	return LocationAnythingToJSON(self)
}

func (self *LocationAnything) UnmarshalJSON(x []byte) error {
	n, err := LocationAnythingFromJSON(x)
	if err != nil {
		return err
	}
	*self = *n
	return nil
}
