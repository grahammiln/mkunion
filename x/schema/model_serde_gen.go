// Code generated by mkunion. DO NOT EDIT.
package schema

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shape"
	"github.com/widmogrod/mkunion/x/shared"
)

func init() {
	shape.Register(FieldShape())
}

var (
	_ json.Unmarshaler = (*Field)(nil)
	_ json.Marshaler   = (*Field)(nil)
)

func (r *Field) MarshalJSON() ([]byte, error) {
	var err error
	result := make(map[string]json.RawMessage)

	fieldName, err := shared.JSONMarshal[string](r.Name)
	if err != nil {
		return nil, fmt.Errorf("schema.Field.MarshalJSON: field Name; %w", err)
	}
	result["Name"] = fieldName

	fieldValue, err := shared.JSONMarshal[Schema](r.Value)
	if err != nil {
		return nil, fmt.Errorf("schema.Field.MarshalJSON: field Value; %w", err)
	}
	result["Value"] = fieldValue

	output, err := json.Marshal(result)
	if err != nil {
		return nil, fmt.Errorf("schema.Field.MarshalJSON: final step; %w", err)
	}

	return output, nil
}

func (r *Field) UnmarshalJSON(bytes []byte) error {
	return shared.JSONParseObject(bytes, func(key string, bytes []byte) error {
		switch key {
		case "Name":
			var err error
			r.Name, err = shared.JSONUnmarshal[string](bytes)
			if err != nil {
				return fmt.Errorf("schema.Field.UnmarshalJSON: field Name; %w", err)
			}
			return nil

		case "Value":
			var err error
			r.Value, err = shared.JSONUnmarshal[Schema](bytes)
			if err != nil {
				return fmt.Errorf("schema.Field.UnmarshalJSON: field Value; %w", err)
			}
			return nil

		}

		return nil
	})
}

func FieldShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Field",
		PkgName:       "schema",
		PkgImportName: "github.com/widmogrod/mkunion/x/schema",
		Fields: []*shape.FieldLike{
			{
				Name: "Name",
				Type: &shape.StringLike{},
			},
			{
				Name: "Value",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}
