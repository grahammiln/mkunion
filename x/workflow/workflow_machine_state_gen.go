// Code generated by mkunion. DO NOT EDIT.
package workflow

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/f"
	"github.com/widmogrod/mkunion/x/schema"
	"github.com/widmogrod/mkunion/x/shape"
	"github.com/widmogrod/mkunion/x/shared"
)

func init() {
	shape.Register(StateShape())
	shape.Register(NextOperationShape())
	shape.Register(DoneShape())
	shape.Register(ErrorShape())
	shape.Register(AwaitShape())
	shape.Register(ScheduledShape())
	shape.Register(ScheduleStoppedShape())
}

//mkunion-extension:visitor

type StateVisitor interface {
	VisitNextOperation(v *NextOperation) any
	VisitDone(v *Done) any
	VisitError(v *Error) any
	VisitAwait(v *Await) any
	VisitScheduled(v *Scheduled) any
	VisitScheduleStopped(v *ScheduleStopped) any
}

type State interface {
	AcceptState(g StateVisitor) any
}

func (r *NextOperation) AcceptState(v StateVisitor) any   { return v.VisitNextOperation(r) }
func (r *Done) AcceptState(v StateVisitor) any            { return v.VisitDone(r) }
func (r *Error) AcceptState(v StateVisitor) any           { return v.VisitError(r) }
func (r *Await) AcceptState(v StateVisitor) any           { return v.VisitAwait(r) }
func (r *Scheduled) AcceptState(v StateVisitor) any       { return v.VisitScheduled(r) }
func (r *ScheduleStopped) AcceptState(v StateVisitor) any { return v.VisitScheduleStopped(r) }

var (
	_ State = (*NextOperation)(nil)
	_ State = (*Done)(nil)
	_ State = (*Error)(nil)
	_ State = (*Await)(nil)
	_ State = (*Scheduled)(nil)
	_ State = (*ScheduleStopped)(nil)
)

func MatchState[TOut any](
	x State,
	f1 func(x *NextOperation) TOut,
	f2 func(x *Done) TOut,
	f3 func(x *Error) TOut,
	f4 func(x *Await) TOut,
	f5 func(x *Scheduled) TOut,
	f6 func(x *ScheduleStopped) TOut,
	df func(x State) TOut,
) TOut {
	return f.Match6(x, f1, f2, f3, f4, f5, f6, df)
}

func MatchStateR2[TOut1, TOut2 any](
	x State,
	f1 func(x *NextOperation) (TOut1, TOut2),
	f2 func(x *Done) (TOut1, TOut2),
	f3 func(x *Error) (TOut1, TOut2),
	f4 func(x *Await) (TOut1, TOut2),
	f5 func(x *Scheduled) (TOut1, TOut2),
	f6 func(x *ScheduleStopped) (TOut1, TOut2),
	df func(x State) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.Match6R2(x, f1, f2, f3, f4, f5, f6, df)
}

func MustMatchState[TOut any](
	x State,
	f1 func(x *NextOperation) TOut,
	f2 func(x *Done) TOut,
	f3 func(x *Error) TOut,
	f4 func(x *Await) TOut,
	f5 func(x *Scheduled) TOut,
	f6 func(x *ScheduleStopped) TOut,
) TOut {
	return f.MustMatch6(x, f1, f2, f3, f4, f5, f6)
}

func MustMatchStateR0(
	x State,
	f1 func(x *NextOperation),
	f2 func(x *Done),
	f3 func(x *Error),
	f4 func(x *Await),
	f5 func(x *Scheduled),
	f6 func(x *ScheduleStopped),
) {
	f.MustMatch6R0(x, f1, f2, f3, f4, f5, f6)
}

func MustMatchStateR2[TOut1, TOut2 any](
	x State,
	f1 func(x *NextOperation) (TOut1, TOut2),
	f2 func(x *Done) (TOut1, TOut2),
	f3 func(x *Error) (TOut1, TOut2),
	f4 func(x *Await) (TOut1, TOut2),
	f5 func(x *Scheduled) (TOut1, TOut2),
	f6 func(x *ScheduleStopped) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.MustMatch6R2(x, f1, f2, f3, f4, f5, f6)
}

//mkunion-extension:shape

func StateShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "State",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Variant: []shape.Shape{
			NextOperationShape(),
			DoneShape(),
			ErrorShape(),
			AwaitShape(),
			ScheduledShape(),
			ScheduleStoppedShape(),
		},
	}
}

func NextOperationShape() shape.Shape {
	return &shape.StructLike{
		Name:          "NextOperation",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Result",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
	}
}

func DoneShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Done",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Result",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
	}
}

func ErrorShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Error",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Code",
				Type: &shape.StringLike{},
			},
			{
				Name: "Reason",
				Type: &shape.StringLike{},
			},
			{
				Name: "Retried",
				Type: &shape.NumberLike{
					Kind: &shape.Int64{},
				},
			},
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
	}
}

func AwaitShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Await",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "CallbackID",
				Type: &shape.StringLike{},
			},
			{
				Name: "Timeout",
				Type: &shape.NumberLike{
					Kind: &shape.Int64{},
				},
			},
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
	}
}

func ScheduledShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Scheduled",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "ExpectedRunTimestamp",
				Type: &shape.NumberLike{
					Kind: &shape.Int64{},
				},
			},
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
	}
}

func ScheduleStoppedShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ScheduleStopped",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
	}
}

// mkunion-extension:json
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/workflow.State", StateFromJSON, StateToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/workflow.NextOperation", NextOperationFromJSON, NextOperationToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/workflow.Done", DoneFromJSON, DoneToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/workflow.Error", ErrorFromJSON, ErrorToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/workflow.Await", AwaitFromJSON, AwaitToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/workflow.Scheduled", ScheduledFromJSON, ScheduledToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/workflow.ScheduleStopped", ScheduleStoppedFromJSON, ScheduleStoppedToJSON)
}

type StateUnionJSON struct {
	Type            string          `json:"$type,omitempty"`
	NextOperation   json.RawMessage `json:"workflow.NextOperation,omitempty"`
	Done            json.RawMessage `json:"workflow.Done,omitempty"`
	Error           json.RawMessage `json:"workflow.Error,omitempty"`
	Await           json.RawMessage `json:"workflow.Await,omitempty"`
	Scheduled       json.RawMessage `json:"workflow.Scheduled,omitempty"`
	ScheduleStopped json.RawMessage `json:"workflow.ScheduleStopped,omitempty"`
}

func StateFromJSON(x []byte) (State, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}

	var data StateUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "workflow.NextOperation":
		return NextOperationFromJSON(data.NextOperation)
	case "workflow.Done":
		return DoneFromJSON(data.Done)
	case "workflow.Error":
		return ErrorFromJSON(data.Error)
	case "workflow.Await":
		return AwaitFromJSON(data.Await)
	case "workflow.Scheduled":
		return ScheduledFromJSON(data.Scheduled)
	case "workflow.ScheduleStopped":
		return ScheduleStoppedFromJSON(data.ScheduleStopped)
	}

	if data.NextOperation != nil {
		return NextOperationFromJSON(data.NextOperation)
	} else if data.Done != nil {
		return DoneFromJSON(data.Done)
	} else if data.Error != nil {
		return ErrorFromJSON(data.Error)
	} else if data.Await != nil {
		return AwaitFromJSON(data.Await)
	} else if data.Scheduled != nil {
		return ScheduledFromJSON(data.Scheduled)
	} else if data.ScheduleStopped != nil {
		return ScheduleStoppedFromJSON(data.ScheduleStopped)
	}

	return nil, fmt.Errorf("workflow.State: unknown type %s", data.Type)
}

func StateToJSON(x State) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MustMatchStateR2(
		x,
		func(x *NextOperation) ([]byte, error) {
			body, err := NextOperationToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(StateUnionJSON{
				Type:          "workflow.NextOperation",
				NextOperation: body,
			})
		},
		func(x *Done) ([]byte, error) {
			body, err := DoneToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(StateUnionJSON{
				Type: "workflow.Done",
				Done: body,
			})
		},
		func(x *Error) ([]byte, error) {
			body, err := ErrorToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(StateUnionJSON{
				Type:  "workflow.Error",
				Error: body,
			})
		},
		func(x *Await) ([]byte, error) {
			body, err := AwaitToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(StateUnionJSON{
				Type:  "workflow.Await",
				Await: body,
			})
		},
		func(x *Scheduled) ([]byte, error) {
			body, err := ScheduledToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(StateUnionJSON{
				Type:      "workflow.Scheduled",
				Scheduled: body,
			})
		},
		func(x *ScheduleStopped) ([]byte, error) {
			body, err := ScheduleStoppedToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(StateUnionJSON{
				Type:            "workflow.ScheduleStopped",
				ScheduleStopped: body,
			})
		},
	)
}

func NextOperationFromJSON(x []byte) (*NextOperation, error) {
	result := new(NextOperation)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func NextOperationToJSON(x *NextOperation) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*NextOperation)(nil)
	_ json.Marshaler   = (*NextOperation)(nil)
)

func (r *NextOperation) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONNextOperation(*r)
}
func (r *NextOperation) _marshalJSONNextOperation(x NextOperation) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldResult []byte
	fieldResult, err = r._marshalJSONschema_Schema(x.Result)
	if err != nil {
		return nil, fmt.Errorf("workflow: NextOperation._marshalJSONNextOperation: field name Result; %w", err)
	}
	partial["Result"] = fieldResult
	var fieldBaseState []byte
	fieldBaseState, err = r._marshalJSONBaseState(x.BaseState)
	if err != nil {
		return nil, fmt.Errorf("workflow: NextOperation._marshalJSONNextOperation: field name BaseState; %w", err)
	}
	partial["BaseState"] = fieldBaseState
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: NextOperation._marshalJSONNextOperation: struct; %w", err)
	}
	return result, nil
}
func (r *NextOperation) _marshalJSONschema_Schema(x schema.Schema) ([]byte, error) {
	result, err := shared.JSONMarshal[schema.Schema](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: NextOperation._marshalJSONschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *NextOperation) _marshalJSONBaseState(x BaseState) ([]byte, error) {
	result, err := shared.JSONMarshal[BaseState](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: NextOperation._marshalJSONBaseState:; %w", err)
	}
	return result, nil
}
func (r *NextOperation) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONNextOperation(data)
	if err != nil {
		return fmt.Errorf("workflow: NextOperation.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *NextOperation) _unmarshalJSONNextOperation(data []byte) (NextOperation, error) {
	result := NextOperation{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: NextOperation._unmarshalJSONNextOperation: native struct unwrap; %w", err)
	}
	if fieldResult, ok := partial["Result"]; ok {
		result.Result, err = r._unmarshalJSONschema_Schema(fieldResult)
		if err != nil {
			return result, fmt.Errorf("workflow: NextOperation._unmarshalJSONNextOperation: field Result; %w", err)
		}
	}
	if fieldBaseState, ok := partial["BaseState"]; ok {
		result.BaseState, err = r._unmarshalJSONBaseState(fieldBaseState)
		if err != nil {
			return result, fmt.Errorf("workflow: NextOperation._unmarshalJSONNextOperation: field BaseState; %w", err)
		}
	}
	return result, nil
}
func (r *NextOperation) _unmarshalJSONschema_Schema(data []byte) (schema.Schema, error) {
	result, err := shared.JSONUnmarshal[schema.Schema](data)
	if err != nil {
		return result, fmt.Errorf("workflow: NextOperation._unmarshalJSONschema_Schema: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *NextOperation) _unmarshalJSONBaseState(data []byte) (BaseState, error) {
	result, err := shared.JSONUnmarshal[BaseState](data)
	if err != nil {
		return result, fmt.Errorf("workflow: NextOperation._unmarshalJSONBaseState: native ref unwrap; %w", err)
	}
	return result, nil
}

func DoneFromJSON(x []byte) (*Done, error) {
	result := new(Done)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func DoneToJSON(x *Done) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Done)(nil)
	_ json.Marshaler   = (*Done)(nil)
)

func (r *Done) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONDone(*r)
}
func (r *Done) _marshalJSONDone(x Done) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldResult []byte
	fieldResult, err = r._marshalJSONschema_Schema(x.Result)
	if err != nil {
		return nil, fmt.Errorf("workflow: Done._marshalJSONDone: field name Result; %w", err)
	}
	partial["Result"] = fieldResult
	var fieldBaseState []byte
	fieldBaseState, err = r._marshalJSONBaseState(x.BaseState)
	if err != nil {
		return nil, fmt.Errorf("workflow: Done._marshalJSONDone: field name BaseState; %w", err)
	}
	partial["BaseState"] = fieldBaseState
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: Done._marshalJSONDone: struct; %w", err)
	}
	return result, nil
}
func (r *Done) _marshalJSONschema_Schema(x schema.Schema) ([]byte, error) {
	result, err := shared.JSONMarshal[schema.Schema](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: Done._marshalJSONschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *Done) _marshalJSONBaseState(x BaseState) ([]byte, error) {
	result, err := shared.JSONMarshal[BaseState](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: Done._marshalJSONBaseState:; %w", err)
	}
	return result, nil
}
func (r *Done) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONDone(data)
	if err != nil {
		return fmt.Errorf("workflow: Done.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Done) _unmarshalJSONDone(data []byte) (Done, error) {
	result := Done{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: Done._unmarshalJSONDone: native struct unwrap; %w", err)
	}
	if fieldResult, ok := partial["Result"]; ok {
		result.Result, err = r._unmarshalJSONschema_Schema(fieldResult)
		if err != nil {
			return result, fmt.Errorf("workflow: Done._unmarshalJSONDone: field Result; %w", err)
		}
	}
	if fieldBaseState, ok := partial["BaseState"]; ok {
		result.BaseState, err = r._unmarshalJSONBaseState(fieldBaseState)
		if err != nil {
			return result, fmt.Errorf("workflow: Done._unmarshalJSONDone: field BaseState; %w", err)
		}
	}
	return result, nil
}
func (r *Done) _unmarshalJSONschema_Schema(data []byte) (schema.Schema, error) {
	result, err := shared.JSONUnmarshal[schema.Schema](data)
	if err != nil {
		return result, fmt.Errorf("workflow: Done._unmarshalJSONschema_Schema: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *Done) _unmarshalJSONBaseState(data []byte) (BaseState, error) {
	result, err := shared.JSONUnmarshal[BaseState](data)
	if err != nil {
		return result, fmt.Errorf("workflow: Done._unmarshalJSONBaseState: native ref unwrap; %w", err)
	}
	return result, nil
}

func ErrorFromJSON(x []byte) (*Error, error) {
	result := new(Error)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func ErrorToJSON(x *Error) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Error)(nil)
	_ json.Marshaler   = (*Error)(nil)
)

func (r *Error) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONError(*r)
}
func (r *Error) _marshalJSONError(x Error) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldCode []byte
	fieldCode, err = r._marshalJSONstring(x.Code)
	if err != nil {
		return nil, fmt.Errorf("workflow: Error._marshalJSONError: field name Code; %w", err)
	}
	partial["Code"] = fieldCode
	var fieldReason []byte
	fieldReason, err = r._marshalJSONstring(x.Reason)
	if err != nil {
		return nil, fmt.Errorf("workflow: Error._marshalJSONError: field name Reason; %w", err)
	}
	partial["Reason"] = fieldReason
	var fieldRetried []byte
	fieldRetried, err = r._marshalJSONint64(x.Retried)
	if err != nil {
		return nil, fmt.Errorf("workflow: Error._marshalJSONError: field name Retried; %w", err)
	}
	partial["Retried"] = fieldRetried
	var fieldBaseState []byte
	fieldBaseState, err = r._marshalJSONBaseState(x.BaseState)
	if err != nil {
		return nil, fmt.Errorf("workflow: Error._marshalJSONError: field name BaseState; %w", err)
	}
	partial["BaseState"] = fieldBaseState
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: Error._marshalJSONError: struct; %w", err)
	}
	return result, nil
}
func (r *Error) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: Error._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Error) _marshalJSONint64(x int64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: Error._marshalJSONint64:; %w", err)
	}
	return result, nil
}
func (r *Error) _marshalJSONBaseState(x BaseState) ([]byte, error) {
	result, err := shared.JSONMarshal[BaseState](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: Error._marshalJSONBaseState:; %w", err)
	}
	return result, nil
}
func (r *Error) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONError(data)
	if err != nil {
		return fmt.Errorf("workflow: Error.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Error) _unmarshalJSONError(data []byte) (Error, error) {
	result := Error{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: Error._unmarshalJSONError: native struct unwrap; %w", err)
	}
	if fieldCode, ok := partial["Code"]; ok {
		result.Code, err = r._unmarshalJSONstring(fieldCode)
		if err != nil {
			return result, fmt.Errorf("workflow: Error._unmarshalJSONError: field Code; %w", err)
		}
	}
	if fieldReason, ok := partial["Reason"]; ok {
		result.Reason, err = r._unmarshalJSONstring(fieldReason)
		if err != nil {
			return result, fmt.Errorf("workflow: Error._unmarshalJSONError: field Reason; %w", err)
		}
	}
	if fieldRetried, ok := partial["Retried"]; ok {
		result.Retried, err = r._unmarshalJSONint64(fieldRetried)
		if err != nil {
			return result, fmt.Errorf("workflow: Error._unmarshalJSONError: field Retried; %w", err)
		}
	}
	if fieldBaseState, ok := partial["BaseState"]; ok {
		result.BaseState, err = r._unmarshalJSONBaseState(fieldBaseState)
		if err != nil {
			return result, fmt.Errorf("workflow: Error._unmarshalJSONError: field BaseState; %w", err)
		}
	}
	return result, nil
}
func (r *Error) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: Error._unmarshalJSONstring: native string unwrap; %w", err)
	}
	return result, nil
}
func (r *Error) _unmarshalJSONint64(data []byte) (int64, error) {
	var result int64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: Error._unmarshalJSONint64: native number unwrap; %w", err)
	}
	return result, nil
}
func (r *Error) _unmarshalJSONBaseState(data []byte) (BaseState, error) {
	result, err := shared.JSONUnmarshal[BaseState](data)
	if err != nil {
		return result, fmt.Errorf("workflow: Error._unmarshalJSONBaseState: native ref unwrap; %w", err)
	}
	return result, nil
}

func AwaitFromJSON(x []byte) (*Await, error) {
	result := new(Await)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func AwaitToJSON(x *Await) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Await)(nil)
	_ json.Marshaler   = (*Await)(nil)
)

func (r *Await) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONAwait(*r)
}
func (r *Await) _marshalJSONAwait(x Await) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldCallbackID []byte
	fieldCallbackID, err = r._marshalJSONstring(x.CallbackID)
	if err != nil {
		return nil, fmt.Errorf("workflow: Await._marshalJSONAwait: field name CallbackID; %w", err)
	}
	partial["CallbackID"] = fieldCallbackID
	var fieldTimeout []byte
	fieldTimeout, err = r._marshalJSONint64(x.Timeout)
	if err != nil {
		return nil, fmt.Errorf("workflow: Await._marshalJSONAwait: field name Timeout; %w", err)
	}
	partial["Timeout"] = fieldTimeout
	var fieldBaseState []byte
	fieldBaseState, err = r._marshalJSONBaseState(x.BaseState)
	if err != nil {
		return nil, fmt.Errorf("workflow: Await._marshalJSONAwait: field name BaseState; %w", err)
	}
	partial["BaseState"] = fieldBaseState
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: Await._marshalJSONAwait: struct; %w", err)
	}
	return result, nil
}
func (r *Await) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: Await._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Await) _marshalJSONint64(x int64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: Await._marshalJSONint64:; %w", err)
	}
	return result, nil
}
func (r *Await) _marshalJSONBaseState(x BaseState) ([]byte, error) {
	result, err := shared.JSONMarshal[BaseState](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: Await._marshalJSONBaseState:; %w", err)
	}
	return result, nil
}
func (r *Await) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONAwait(data)
	if err != nil {
		return fmt.Errorf("workflow: Await.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Await) _unmarshalJSONAwait(data []byte) (Await, error) {
	result := Await{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: Await._unmarshalJSONAwait: native struct unwrap; %w", err)
	}
	if fieldCallbackID, ok := partial["CallbackID"]; ok {
		result.CallbackID, err = r._unmarshalJSONstring(fieldCallbackID)
		if err != nil {
			return result, fmt.Errorf("workflow: Await._unmarshalJSONAwait: field CallbackID; %w", err)
		}
	}
	if fieldTimeout, ok := partial["Timeout"]; ok {
		result.Timeout, err = r._unmarshalJSONint64(fieldTimeout)
		if err != nil {
			return result, fmt.Errorf("workflow: Await._unmarshalJSONAwait: field Timeout; %w", err)
		}
	}
	if fieldBaseState, ok := partial["BaseState"]; ok {
		result.BaseState, err = r._unmarshalJSONBaseState(fieldBaseState)
		if err != nil {
			return result, fmt.Errorf("workflow: Await._unmarshalJSONAwait: field BaseState; %w", err)
		}
	}
	return result, nil
}
func (r *Await) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: Await._unmarshalJSONstring: native string unwrap; %w", err)
	}
	return result, nil
}
func (r *Await) _unmarshalJSONint64(data []byte) (int64, error) {
	var result int64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: Await._unmarshalJSONint64: native number unwrap; %w", err)
	}
	return result, nil
}
func (r *Await) _unmarshalJSONBaseState(data []byte) (BaseState, error) {
	result, err := shared.JSONUnmarshal[BaseState](data)
	if err != nil {
		return result, fmt.Errorf("workflow: Await._unmarshalJSONBaseState: native ref unwrap; %w", err)
	}
	return result, nil
}

func ScheduledFromJSON(x []byte) (*Scheduled, error) {
	result := new(Scheduled)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func ScheduledToJSON(x *Scheduled) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Scheduled)(nil)
	_ json.Marshaler   = (*Scheduled)(nil)
)

func (r *Scheduled) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONScheduled(*r)
}
func (r *Scheduled) _marshalJSONScheduled(x Scheduled) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldExpectedRunTimestamp []byte
	fieldExpectedRunTimestamp, err = r._marshalJSONint64(x.ExpectedRunTimestamp)
	if err != nil {
		return nil, fmt.Errorf("workflow: Scheduled._marshalJSONScheduled: field name ExpectedRunTimestamp; %w", err)
	}
	partial["ExpectedRunTimestamp"] = fieldExpectedRunTimestamp
	var fieldBaseState []byte
	fieldBaseState, err = r._marshalJSONBaseState(x.BaseState)
	if err != nil {
		return nil, fmt.Errorf("workflow: Scheduled._marshalJSONScheduled: field name BaseState; %w", err)
	}
	partial["BaseState"] = fieldBaseState
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: Scheduled._marshalJSONScheduled: struct; %w", err)
	}
	return result, nil
}
func (r *Scheduled) _marshalJSONint64(x int64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: Scheduled._marshalJSONint64:; %w", err)
	}
	return result, nil
}
func (r *Scheduled) _marshalJSONBaseState(x BaseState) ([]byte, error) {
	result, err := shared.JSONMarshal[BaseState](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: Scheduled._marshalJSONBaseState:; %w", err)
	}
	return result, nil
}
func (r *Scheduled) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONScheduled(data)
	if err != nil {
		return fmt.Errorf("workflow: Scheduled.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Scheduled) _unmarshalJSONScheduled(data []byte) (Scheduled, error) {
	result := Scheduled{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: Scheduled._unmarshalJSONScheduled: native struct unwrap; %w", err)
	}
	if fieldExpectedRunTimestamp, ok := partial["ExpectedRunTimestamp"]; ok {
		result.ExpectedRunTimestamp, err = r._unmarshalJSONint64(fieldExpectedRunTimestamp)
		if err != nil {
			return result, fmt.Errorf("workflow: Scheduled._unmarshalJSONScheduled: field ExpectedRunTimestamp; %w", err)
		}
	}
	if fieldBaseState, ok := partial["BaseState"]; ok {
		result.BaseState, err = r._unmarshalJSONBaseState(fieldBaseState)
		if err != nil {
			return result, fmt.Errorf("workflow: Scheduled._unmarshalJSONScheduled: field BaseState; %w", err)
		}
	}
	return result, nil
}
func (r *Scheduled) _unmarshalJSONint64(data []byte) (int64, error) {
	var result int64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: Scheduled._unmarshalJSONint64: native number unwrap; %w", err)
	}
	return result, nil
}
func (r *Scheduled) _unmarshalJSONBaseState(data []byte) (BaseState, error) {
	result, err := shared.JSONUnmarshal[BaseState](data)
	if err != nil {
		return result, fmt.Errorf("workflow: Scheduled._unmarshalJSONBaseState: native ref unwrap; %w", err)
	}
	return result, nil
}

func ScheduleStoppedFromJSON(x []byte) (*ScheduleStopped, error) {
	result := new(ScheduleStopped)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func ScheduleStoppedToJSON(x *ScheduleStopped) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*ScheduleStopped)(nil)
	_ json.Marshaler   = (*ScheduleStopped)(nil)
)

func (r *ScheduleStopped) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONScheduleStopped(*r)
}
func (r *ScheduleStopped) _marshalJSONScheduleStopped(x ScheduleStopped) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldBaseState []byte
	fieldBaseState, err = r._marshalJSONBaseState(x.BaseState)
	if err != nil {
		return nil, fmt.Errorf("workflow: ScheduleStopped._marshalJSONScheduleStopped: field name BaseState; %w", err)
	}
	partial["BaseState"] = fieldBaseState
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: ScheduleStopped._marshalJSONScheduleStopped: struct; %w", err)
	}
	return result, nil
}
func (r *ScheduleStopped) _marshalJSONBaseState(x BaseState) ([]byte, error) {
	result, err := shared.JSONMarshal[BaseState](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: ScheduleStopped._marshalJSONBaseState:; %w", err)
	}
	return result, nil
}
func (r *ScheduleStopped) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONScheduleStopped(data)
	if err != nil {
		return fmt.Errorf("workflow: ScheduleStopped.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ScheduleStopped) _unmarshalJSONScheduleStopped(data []byte) (ScheduleStopped, error) {
	result := ScheduleStopped{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: ScheduleStopped._unmarshalJSONScheduleStopped: native struct unwrap; %w", err)
	}
	if fieldBaseState, ok := partial["BaseState"]; ok {
		result.BaseState, err = r._unmarshalJSONBaseState(fieldBaseState)
		if err != nil {
			return result, fmt.Errorf("workflow: ScheduleStopped._unmarshalJSONScheduleStopped: field BaseState; %w", err)
		}
	}
	return result, nil
}
func (r *ScheduleStopped) _unmarshalJSONBaseState(data []byte) (BaseState, error) {
	result, err := shared.JSONUnmarshal[BaseState](data)
	if err != nil {
		return result, fmt.Errorf("workflow: ScheduleStopped._unmarshalJSONBaseState: native ref unwrap; %w", err)
	}
	return result, nil
}
