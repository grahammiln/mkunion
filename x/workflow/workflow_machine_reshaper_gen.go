// Code generated by mkunion. DO NOT EDIT.
package workflow

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/f"
	"github.com/widmogrod/mkunion/x/schema"
	"github.com/widmogrod/mkunion/x/shape"
	"github.com/widmogrod/mkunion/x/shared"
)

func init() {
	shape.Register(ReshaperShape())
	shape.Register(GetValueShape())
	shape.Register(SetValueShape())
}

//mkunion-extension:visitor

type ReshaperVisitor interface {
	VisitGetValue(v *GetValue) any
	VisitSetValue(v *SetValue) any
}

type Reshaper interface {
	AcceptReshaper(g ReshaperVisitor) any
}

func (r *GetValue) AcceptReshaper(v ReshaperVisitor) any { return v.VisitGetValue(r) }
func (r *SetValue) AcceptReshaper(v ReshaperVisitor) any { return v.VisitSetValue(r) }

var (
	_ Reshaper = (*GetValue)(nil)
	_ Reshaper = (*SetValue)(nil)
)

func MatchReshaper[TOut any](
	x Reshaper,
	f1 func(x *GetValue) TOut,
	f2 func(x *SetValue) TOut,
	df func(x Reshaper) TOut,
) TOut {
	return f.Match2(x, f1, f2, df)
}

func MatchReshaperR2[TOut1, TOut2 any](
	x Reshaper,
	f1 func(x *GetValue) (TOut1, TOut2),
	f2 func(x *SetValue) (TOut1, TOut2),
	df func(x Reshaper) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.Match2R2(x, f1, f2, df)
}

func MustMatchReshaper[TOut any](
	x Reshaper,
	f1 func(x *GetValue) TOut,
	f2 func(x *SetValue) TOut,
) TOut {
	return f.MustMatch2(x, f1, f2)
}

func MustMatchReshaperR0(
	x Reshaper,
	f1 func(x *GetValue),
	f2 func(x *SetValue),
) {
	f.MustMatch2R0(x, f1, f2)
}

func MustMatchReshaperR2[TOut1, TOut2 any](
	x Reshaper,
	f1 func(x *GetValue) (TOut1, TOut2),
	f2 func(x *SetValue) (TOut1, TOut2),
) (TOut1, TOut2) {
	return f.MustMatch2R2(x, f1, f2)
}

//mkunion-extension:shape

func ReshaperShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Reshaper",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Variant: []shape.Shape{
			GetValueShape(),
			SetValueShape(),
		},
	}
}

func GetValueShape() shape.Shape {
	return &shape.StructLike{
		Name:          "GetValue",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Path",
				Type: &shape.StringLike{},
			},
		},
	}
}

func SetValueShape() shape.Shape {
	return &shape.StructLike{
		Name:          "SetValue",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Value",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
		},
	}
}

// mkunion-extension:json
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/workflow.Reshaper", ReshaperFromJSON, ReshaperToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/workflow.GetValue", GetValueFromJSON, GetValueToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/workflow.SetValue", SetValueFromJSON, SetValueToJSON)
}

type ReshaperUnionJSON struct {
	Type     string          `json:"$type,omitempty"`
	GetValue json.RawMessage `json:"workflow.GetValue,omitempty"`
	SetValue json.RawMessage `json:"workflow.SetValue,omitempty"`
}

func ReshaperFromJSON(x []byte) (Reshaper, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}

	var data ReshaperUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, err
	}

	switch data.Type {
	case "workflow.GetValue":
		return GetValueFromJSON(data.GetValue)
	case "workflow.SetValue":
		return SetValueFromJSON(data.SetValue)
	}

	if data.GetValue != nil {
		return GetValueFromJSON(data.GetValue)
	} else if data.SetValue != nil {
		return SetValueFromJSON(data.SetValue)
	}

	return nil, fmt.Errorf("workflow.Reshaper: unknown type %s", data.Type)
}

func ReshaperToJSON(x Reshaper) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return MustMatchReshaperR2(
		x,
		func(x *GetValue) ([]byte, error) {
			body, err := GetValueToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(ReshaperUnionJSON{
				Type:     "workflow.GetValue",
				GetValue: body,
			})
		},
		func(x *SetValue) ([]byte, error) {
			body, err := SetValueToJSON(x)
			if err != nil {
				return nil, err
			}

			return json.Marshal(ReshaperUnionJSON{
				Type:     "workflow.SetValue",
				SetValue: body,
			})
		},
	)
}

func GetValueFromJSON(x []byte) (*GetValue, error) {
	result := new(GetValue)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func GetValueToJSON(x *GetValue) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*GetValue)(nil)
	_ json.Marshaler   = (*GetValue)(nil)
)

func (r *GetValue) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONGetValue(*r)
}
func (r *GetValue) _marshalJSONGetValue(x GetValue) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldPath []byte
	fieldPath, err = r._marshalJSONstring(x.Path)
	if err != nil {
		return nil, fmt.Errorf("workflow: GetValue._marshalJSONGetValue: field name Path; %w", err)
	}
	partial["Path"] = fieldPath
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: GetValue._marshalJSONGetValue: struct; %w", err)
	}
	return result, nil
}
func (r *GetValue) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: GetValue._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *GetValue) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONGetValue(data)
	if err != nil {
		return fmt.Errorf("workflow: GetValue.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *GetValue) _unmarshalJSONGetValue(data []byte) (GetValue, error) {
	result := GetValue{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: GetValue._unmarshalJSONGetValue: native struct unwrap; %w", err)
	}
	if fieldPath, ok := partial["Path"]; ok {
		result.Path, err = r._unmarshalJSONstring(fieldPath)
		if err != nil {
			return result, fmt.Errorf("workflow: GetValue._unmarshalJSONGetValue: field Path; %w", err)
		}
	}
	return result, nil
}
func (r *GetValue) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: GetValue._unmarshalJSONstring: native string unwrap; %w", err)
	}
	return result, nil
}

func SetValueFromJSON(x []byte) (*SetValue, error) {
	result := new(SetValue)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func SetValueToJSON(x *SetValue) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*SetValue)(nil)
	_ json.Marshaler   = (*SetValue)(nil)
)

func (r *SetValue) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONSetValue(*r)
}
func (r *SetValue) _marshalJSONSetValue(x SetValue) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldValue []byte
	fieldValue, err = r._marshalJSONschema_Schema(x.Value)
	if err != nil {
		return nil, fmt.Errorf("workflow: SetValue._marshalJSONSetValue: field name Value; %w", err)
	}
	partial["Value"] = fieldValue
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: SetValue._marshalJSONSetValue: struct; %w", err)
	}
	return result, nil
}
func (r *SetValue) _marshalJSONschema_Schema(x schema.Schema) ([]byte, error) {
	result, err := shared.JSONMarshal[schema.Schema](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: SetValue._marshalJSONschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *SetValue) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONSetValue(data)
	if err != nil {
		return fmt.Errorf("workflow: SetValue.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *SetValue) _unmarshalJSONSetValue(data []byte) (SetValue, error) {
	result := SetValue{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: SetValue._unmarshalJSONSetValue: native struct unwrap; %w", err)
	}
	if fieldValue, ok := partial["Value"]; ok {
		result.Value, err = r._unmarshalJSONschema_Schema(fieldValue)
		if err != nil {
			return result, fmt.Errorf("workflow: SetValue._unmarshalJSONSetValue: field Value; %w", err)
		}
	}
	return result, nil
}
func (r *SetValue) _unmarshalJSONschema_Schema(data []byte) (schema.Schema, error) {
	result, err := shared.JSONUnmarshal[schema.Schema](data)
	if err != nil {
		return result, fmt.Errorf("workflow: SetValue._unmarshalJSONschema_Schema: native ref unwrap; %w", err)
	}
	return result, nil
}
